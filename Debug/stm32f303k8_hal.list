
stm32f303k8_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d2c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eec  08006eec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006eec  08006eec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006eec  08006eec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef0  08006ef0  00016ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000a9c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000aac  20000aac  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017cad  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000324c  00000000  00000000  00037ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001348  00000000  00000000  0003c410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e2be  00000000  00000000  0003d758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018344  00000000  00000000  0005ba16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aea47  00000000  00000000  00073d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  001227a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056f8  00000000  00000000  001227ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e9c 	.word	0x08006e9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006e9c 	.word	0x08006e9c

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b094      	sub	sp, #80	; 0x50
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]
 80001ea:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2228      	movs	r2, #40	; 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f006 fe4a 	bl	8006e8c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001f8:	4b41      	ldr	r3, [pc, #260]	; (8000300 <MX_ADC1_Init+0x138>)
 80001fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000200:	4b3f      	ldr	r3, [pc, #252]	; (8000300 <MX_ADC1_Init+0x138>)
 8000202:	2200      	movs	r2, #0
 8000204:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000206:	4b3e      	ldr	r3, [pc, #248]	; (8000300 <MX_ADC1_Init+0x138>)
 8000208:	2200      	movs	r2, #0
 800020a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800020c:	4b3c      	ldr	r3, [pc, #240]	; (8000300 <MX_ADC1_Init+0x138>)
 800020e:	2200      	movs	r2, #0
 8000210:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000212:	4b3b      	ldr	r3, [pc, #236]	; (8000300 <MX_ADC1_Init+0x138>)
 8000214:	2200      	movs	r2, #0
 8000216:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000218:	4b39      	ldr	r3, [pc, #228]	; (8000300 <MX_ADC1_Init+0x138>)
 800021a:	2200      	movs	r2, #0
 800021c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000220:	4b37      	ldr	r3, [pc, #220]	; (8000300 <MX_ADC1_Init+0x138>)
 8000222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000226:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000228:	4b35      	ldr	r3, [pc, #212]	; (8000300 <MX_ADC1_Init+0x138>)
 800022a:	f44f 7250 	mov.w	r2, #832	; 0x340
 800022e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000230:	4b33      	ldr	r3, [pc, #204]	; (8000300 <MX_ADC1_Init+0x138>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000236:	4b32      	ldr	r3, [pc, #200]	; (8000300 <MX_ADC1_Init+0x138>)
 8000238:	2201      	movs	r2, #1
 800023a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800023c:	4b30      	ldr	r3, [pc, #192]	; (8000300 <MX_ADC1_Init+0x138>)
 800023e:	2201      	movs	r2, #1
 8000240:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000244:	4b2e      	ldr	r3, [pc, #184]	; (8000300 <MX_ADC1_Init+0x138>)
 8000246:	2208      	movs	r2, #8
 8000248:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800024a:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <MX_ADC1_Init+0x138>)
 800024c:	2200      	movs	r2, #0
 800024e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000250:	4b2b      	ldr	r3, [pc, #172]	; (8000300 <MX_ADC1_Init+0x138>)
 8000252:	2200      	movs	r2, #0
 8000254:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000256:	482a      	ldr	r0, [pc, #168]	; (8000300 <MX_ADC1_Init+0x138>)
 8000258:	f000 ff66 	bl	8001128 <HAL_ADC_Init>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000262:	f000 fc2b 	bl	8000abc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000266:	2300      	movs	r3, #0
 8000268:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800026a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800026e:	4619      	mov	r1, r3
 8000270:	4823      	ldr	r0, [pc, #140]	; (8000300 <MX_ADC1_Init+0x138>)
 8000272:	f001 ffa3 	bl	80021bc <HAL_ADCEx_MultiModeConfigChannel>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 800027c:	f000 fc1e 	bl	8000abc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000280:	2301      	movs	r3, #1
 8000282:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000284:	2301      	movs	r3, #1
 8000286:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000288:	2300      	movs	r3, #0
 800028a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800028c:	2300      	movs	r3, #0
 800028e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000290:	2300      	movs	r3, #0
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Offset = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800029c:	4619      	mov	r1, r3
 800029e:	4818      	ldr	r0, [pc, #96]	; (8000300 <MX_ADC1_Init+0x138>)
 80002a0:	f001 f9ae 	bl	8001600 <HAL_ADC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80002aa:	f000 fc07 	bl	8000abc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80002ae:	2301      	movs	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80002b2:	2301      	movs	r3, #1
 80002b4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80002c2:	2340      	movs	r3, #64	; 0x40
 80002c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80002c6:	2301      	movs	r3, #1
 80002c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80002ca:	2300      	movs	r3, #0
 80002cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	4619      	mov	r1, r3
 80002e8:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_ADC1_Init+0x138>)
 80002ea:	f001 fc49 	bl	8001b80 <HAL_ADCEx_InjectedConfigChannel>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 80002f4:	f000 fbe2 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f8:	bf00      	nop
 80002fa:	3750      	adds	r7, #80	; 0x50
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000002c 	.word	0x2000002c

08000304 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b08a      	sub	sp, #40	; 0x28
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000324:	d14c      	bne.n	80003c0 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000326:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <HAL_ADC_MspInit+0xc4>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a27      	ldr	r2, [pc, #156]	; (80003c8 <HAL_ADC_MspInit+0xc4>)
 800032c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <HAL_ADC_MspInit+0xc4>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800033a:	613b      	str	r3, [r7, #16]
 800033c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <HAL_ADC_MspInit+0xc4>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a21      	ldr	r2, [pc, #132]	; (80003c8 <HAL_ADC_MspInit+0xc4>)
 8000344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <HAL_ADC_MspInit+0xc4>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000356:	2301      	movs	r3, #1
 8000358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800035a:	2303      	movs	r3, #3
 800035c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	4619      	mov	r1, r3
 8000368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036c:	f002 fdb4 	bl	8002ed8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <HAL_ADC_MspInit+0xc8>)
 8000372:	4a17      	ldr	r2, [pc, #92]	; (80003d0 <HAL_ADC_MspInit+0xcc>)
 8000374:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000376:	4b15      	ldr	r3, [pc, #84]	; (80003cc <HAL_ADC_MspInit+0xc8>)
 8000378:	2200      	movs	r2, #0
 800037a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <HAL_ADC_MspInit+0xc8>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000382:	4b12      	ldr	r3, [pc, #72]	; (80003cc <HAL_ADC_MspInit+0xc8>)
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <HAL_ADC_MspInit+0xc8>)
 800038a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800038e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000390:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <HAL_ADC_MspInit+0xc8>)
 8000392:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000396:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <HAL_ADC_MspInit+0xc8>)
 800039a:	2220      	movs	r2, #32
 800039c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <HAL_ADC_MspInit+0xc8>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80003a4:	4809      	ldr	r0, [pc, #36]	; (80003cc <HAL_ADC_MspInit+0xc8>)
 80003a6:	f002 fbff 	bl	8002ba8 <HAL_DMA_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80003b0:	f000 fb84 	bl	8000abc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a05      	ldr	r2, [pc, #20]	; (80003cc <HAL_ADC_MspInit+0xc8>)
 80003b8:	639a      	str	r2, [r3, #56]	; 0x38
 80003ba:	4a04      	ldr	r2, [pc, #16]	; (80003cc <HAL_ADC_MspInit+0xc8>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003c0:	bf00      	nop
 80003c2:	3728      	adds	r7, #40	; 0x28
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40021000 	.word	0x40021000
 80003cc:	2000007c 	.word	0x2000007c
 80003d0:	40020008 	.word	0x40020008

080003d4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_DAC1_Init+0x4c>)
 80003e6:	4a0f      	ldr	r2, [pc, #60]	; (8000424 <MX_DAC1_Init+0x50>)
 80003e8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003ea:	480d      	ldr	r0, [pc, #52]	; (8000420 <MX_DAC1_Init+0x4c>)
 80003ec:	f002 f9ed 	bl	80027ca <HAL_DAC_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80003f6:	f000 fb61 	bl	8000abc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80003fa:	2304      	movs	r3, #4
 80003fc:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003fe:	2300      	movs	r3, #0
 8000400:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2200      	movs	r2, #0
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_DAC1_Init+0x4c>)
 800040a:	f002 fadb 	bl	80029c4 <HAL_DAC_ConfigChannel>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000414:	f000 fb52 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	200000c0 	.word	0x200000c0
 8000424:	40007400 	.word	0x40007400

08000428 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08a      	sub	sp, #40	; 0x28
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000430:	f107 0314 	add.w	r3, r7, #20
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
 800043e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a2c      	ldr	r2, [pc, #176]	; (80004f8 <HAL_DAC_MspInit+0xd0>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d152      	bne.n	80004f0 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800044a:	4b2c      	ldr	r3, [pc, #176]	; (80004fc <HAL_DAC_MspInit+0xd4>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a2b      	ldr	r2, [pc, #172]	; (80004fc <HAL_DAC_MspInit+0xd4>)
 8000450:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b29      	ldr	r3, [pc, #164]	; (80004fc <HAL_DAC_MspInit+0xd4>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800045e:	613b      	str	r3, [r7, #16]
 8000460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b26      	ldr	r3, [pc, #152]	; (80004fc <HAL_DAC_MspInit+0xd4>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a25      	ldr	r2, [pc, #148]	; (80004fc <HAL_DAC_MspInit+0xd4>)
 8000468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <HAL_DAC_MspInit+0xd4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800047a:	2310      	movs	r3, #16
 800047c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800047e:	2303      	movs	r3, #3
 8000480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	4619      	mov	r1, r3
 800048c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000490:	f002 fd22 	bl	8002ed8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000494:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <HAL_DAC_MspInit+0xd8>)
 8000496:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <HAL_DAC_MspInit+0xdc>)
 8000498:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800049a:	4b19      	ldr	r3, [pc, #100]	; (8000500 <HAL_DAC_MspInit+0xd8>)
 800049c:	2210      	movs	r2, #16
 800049e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004a0:	4b17      	ldr	r3, [pc, #92]	; (8000500 <HAL_DAC_MspInit+0xd8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80004a6:	4b16      	ldr	r3, [pc, #88]	; (8000500 <HAL_DAC_MspInit+0xd8>)
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <HAL_DAC_MspInit+0xd8>)
 80004ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004b2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <HAL_DAC_MspInit+0xd8>)
 80004b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004ba:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <HAL_DAC_MspInit+0xd8>)
 80004be:	2220      	movs	r2, #32
 80004c0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <HAL_DAC_MspInit+0xd8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80004c8:	480d      	ldr	r0, [pc, #52]	; (8000500 <HAL_DAC_MspInit+0xd8>)
 80004ca:	f002 fb6d 	bl	8002ba8 <HAL_DMA_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 80004d4:	f000 faf2 	bl	8000abc <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_DAC_MspInit+0xe0>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_DAC_MspInit+0xe0>)
 80004de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004e2:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a06      	ldr	r2, [pc, #24]	; (8000500 <HAL_DAC_MspInit+0xd8>)
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	4a05      	ldr	r2, [pc, #20]	; (8000500 <HAL_DAC_MspInit+0xd8>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80004f0:	bf00      	nop
 80004f2:	3728      	adds	r7, #40	; 0x28
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40007400 	.word	0x40007400
 80004fc:	40021000 	.word	0x40021000
 8000500:	200000d4 	.word	0x200000d4
 8000504:	40020030 	.word	0x40020030
 8000508:	40010000 	.word	0x40010000

0800050c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <MX_DMA_Init+0x48>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <MX_DMA_Init+0x48>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <MX_DMA_Init+0x48>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	200b      	movs	r0, #11
 8000530:	f002 f915 	bl	800275e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000534:	200b      	movs	r0, #11
 8000536:	f002 f92e 	bl	8002796 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	200d      	movs	r0, #13
 8000540:	f002 f90d 	bl	800275e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000544:	200d      	movs	r0, #13
 8000546:	f002 f926 	bl	8002796 <HAL_NVIC_EnableIRQ>

}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <MX_GPIO_Init+0x8c>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <MX_GPIO_Init+0x8c>)
 8000574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_GPIO_Init+0x8c>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <MX_GPIO_Init+0x8c>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a16      	ldr	r2, [pc, #88]	; (80005e4 <MX_GPIO_Init+0x8c>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <MX_GPIO_Init+0x8c>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_GPIO_Init+0x8c>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <MX_GPIO_Init+0x8c>)
 80005a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_GPIO_Init+0x8c>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2108      	movs	r1, #8
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <MX_GPIO_Init+0x90>)
 80005bc:	f002 fdfe 	bl	80031bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005c0:	2308      	movs	r3, #8
 80005c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_GPIO_Init+0x90>)
 80005d8:	f002 fc7e 	bl	8002ed8 <HAL_GPIO_Init>

}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400

080005ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_I2C1_Init+0x74>)
 80005f2:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <MX_I2C1_Init+0x78>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_I2C1_Init+0x74>)
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <MX_I2C1_Init+0x7c>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_I2C1_Init+0x74>)
 8000604:	2201      	movs	r2, #1
 8000606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_I2C1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_I2C1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000626:	480e      	ldr	r0, [pc, #56]	; (8000660 <MX_I2C1_Init+0x74>)
 8000628:	f002 fdfa 	bl	8003220 <HAL_I2C_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000632:	f000 fa43 	bl	8000abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000636:	2100      	movs	r1, #0
 8000638:	4809      	ldr	r0, [pc, #36]	; (8000660 <MX_I2C1_Init+0x74>)
 800063a:	f003 f96d 	bl	8003918 <HAL_I2CEx_ConfigAnalogFilter>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000644:	f000 fa3a 	bl	8000abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000648:	2100      	movs	r1, #0
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_I2C1_Init+0x74>)
 800064c:	f003 f9af 	bl	80039ae <HAL_I2CEx_ConfigDigitalFilter>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000656:	f000 fa31 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000118 	.word	0x20000118
 8000664:	40005400 	.word	0x40005400
 8000668:	2000090e 	.word	0x2000090e

0800066c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <HAL_I2C_MspInit+0x7c>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d127      	bne.n	80006de <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_I2C_MspInit+0x80>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a16      	ldr	r2, [pc, #88]	; (80006ec <HAL_I2C_MspInit+0x80>)
 8000694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <HAL_I2C_MspInit+0x80>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006a6:	23c0      	movs	r3, #192	; 0xc0
 80006a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006aa:	2312      	movs	r3, #18
 80006ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006b6:	2304      	movs	r3, #4
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <HAL_I2C_MspInit+0x84>)
 80006c2:	f002 fc09 	bl	8002ed8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_I2C_MspInit+0x80>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_I2C_MspInit+0x80>)
 80006cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_I2C_MspInit+0x80>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40005400 	.word	0x40005400
 80006ec:	40021000 	.word	0x40021000
 80006f0:	48000400 	.word	0x48000400

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f000 fc81 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fe:	f000 f891 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000702:	f7ff ff29 	bl	8000558 <MX_GPIO_Init>
  MX_DMA_Init();
 8000706:	f7ff ff01 	bl	800050c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800070a:	f000 fbdb 	bl	8000ec4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800070e:	f000 fa59 	bl	8000bc4 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000712:	f7ff ff6b 	bl	80005ec <MX_I2C1_Init>
  MX_ADC1_Init();
 8000716:	f7ff fd57 	bl	80001c8 <MX_ADC1_Init>
  MX_DAC1_Init();
 800071a:	f7ff fe5b 	bl	80003d4 <MX_DAC1_Init>
  MX_TIM6_Init();
 800071e:	f000 faff 	bl	8000d20 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT( &htim1 );
 8000722:	4835      	ldr	r0, [pc, #212]	; (80007f8 <main+0x104>)
 8000724:	f004 fdd6 	bl	80052d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 8000728:	2100      	movs	r1, #0
 800072a:	4833      	ldr	r0, [pc, #204]	; (80007f8 <main+0x104>)
 800072c:	f004 fe86 	bl	800543c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_2 );
 8000730:	2104      	movs	r1, #4
 8000732:	4831      	ldr	r0, [pc, #196]	; (80007f8 <main+0x104>)
 8000734:	f004 fe82 	bl	800543c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_3 );
 8000738:	2108      	movs	r1, #8
 800073a:	482f      	ldr	r0, [pc, #188]	; (80007f8 <main+0x104>)
 800073c:	f004 fe7e 	bl	800543c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_1 );
 8000740:	2100      	movs	r1, #0
 8000742:	482d      	ldr	r0, [pc, #180]	; (80007f8 <main+0x104>)
 8000744:	f005 fd06 	bl	8006154 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_2 );
 8000748:	2104      	movs	r1, #4
 800074a:	482b      	ldr	r0, [pc, #172]	; (80007f8 <main+0x104>)
 800074c:	f005 fd02 	bl	8006154 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_3 );
 8000750:	2108      	movs	r1, #8
 8000752:	4829      	ldr	r0, [pc, #164]	; (80007f8 <main+0x104>)
 8000754:	f005 fcfe 	bl	8006154 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start(&htim6);
 8000758:	4828      	ldr	r0, [pc, #160]	; (80007fc <main+0x108>)
 800075a:	f004 fd67 	bl	800522c <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, BUFFERSIZE);
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	4927      	ldr	r1, [pc, #156]	; (8000800 <main+0x10c>)
 8000762:	4828      	ldr	r0, [pc, #160]	; (8000804 <main+0x110>)
 8000764:	f000 fe72 	bl	800144c <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)dac_buffer, BUFFERSIZE, DAC_ALIGN_12B_R);
 8000768:	2300      	movs	r3, #0
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	4a26      	ldr	r2, [pc, #152]	; (8000808 <main+0x114>)
 8000770:	2100      	movs	r1, #0
 8000772:	4826      	ldr	r0, [pc, #152]	; (800080c <main+0x118>)
 8000774:	f002 f86a 	bl	800284c <HAL_DAC_Start_DMA>
  ssd1306_Init();
 8000778:	f006 fa28 	bl	8006bcc <ssd1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (j>127) {
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <main+0x11c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b7f      	cmp	r3, #127	; 0x7f
 8000782:	d907      	bls.n	8000794 <main+0xa0>
		  HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 8000784:	2108      	movs	r1, #8
 8000786:	4823      	ldr	r0, [pc, #140]	; (8000814 <main+0x120>)
 8000788:	f002 fd30 	bl	80031ec <HAL_GPIO_TogglePin>
		  j = 0;
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <main+0x11c>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	e004      	b.n	800079e <main+0xaa>
	  }
	  else {
		  j ++;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <main+0x11c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a1d      	ldr	r2, [pc, #116]	; (8000810 <main+0x11c>)
 800079c:	6013      	str	r3, [r2, #0]
//	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, (uint32_t*)dac_ch2_buffer, 1, DAC_ALIGN_12B_R);
//	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
//	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
//
//	i = 10000; while(i--);
	  tmp[2] = j;
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <main+0x11c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <main+0x124>)
 80007a4:	6093      	str	r3, [r2, #8]
  ssd1306_Fill(Black);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f006 fa7a 	bl	8006ca0 <ssd1306_Fill>
  for(i=0; i<BUFFERSIZE; i++) {
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <main+0x128>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	e017      	b.n	80007e4 <main+0xf0>
	  ssd1306_DrawPixel(i, (2+64*adc_buffer[i])/4100, White);
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <main+0x128>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	b2d8      	uxtb	r0, r3
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <main+0x128>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <main+0x10c>)
 80007c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c4:	019b      	lsls	r3, r3, #6
 80007c6:	3302      	adds	r3, #2
 80007c8:	4a15      	ldr	r2, [pc, #84]	; (8000820 <main+0x12c>)
 80007ca:	fba2 2303 	umull	r2, r3, r2, r3
 80007ce:	0b1b      	lsrs	r3, r3, #12
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	f006 faaf 	bl	8006d38 <ssd1306_DrawPixel>
  for(i=0; i<BUFFERSIZE; i++) {
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <main+0x128>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	4a0e      	ldr	r2, [pc, #56]	; (800081c <main+0x128>)
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <main+0x128>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b7f      	cmp	r3, #127	; 0x7f
 80007ea:	d9e3      	bls.n	80007b4 <main+0xc0>
  // ssd1306_SetCursor(64, 0); 	itoa(tmp[0], buffer, 16); 			ssd1306_WriteString(buffer, SCREEN_FONT, White);
  // ssd1306_SetCursor(0, 12); 	itoa(adc_buffer[1], buffer, 16); 	ssd1306_WriteString(buffer, SCREEN_FONT, White);
  // ssd1306_SetCursor(64, 12); 	itoa(tmp[1], buffer, 16); 			ssd1306_WriteString(buffer, SCREEN_FONT, White);
  // ssd1306_SetCursor(0, 24); 	itoa(adc_buffer[2], buffer, 16); 	ssd1306_WriteString(buffer, SCREEN_FONT, White);
  // ssd1306_SetCursor(64, 24); 	itoa(tmp[2], buffer, 16); 			ssd1306_WriteString(buffer, SCREEN_FONT, White);
  ssd1306_UpdateScreen();
 80007ec:	f006 fa7c 	bl	8006ce8 <ssd1306_UpdateScreen>
  processDSP();
 80007f0:	f000 f93a 	bl	8000a68 <processDSP>
	  if (j>127) {
 80007f4:	e7c2      	b.n	800077c <main+0x88>
 80007f6:	bf00      	nop
 80007f8:	20000584 	.word	0x20000584
 80007fc:	200005d0 	.word	0x200005d0
 8000800:	2000017c 	.word	0x2000017c
 8000804:	2000002c 	.word	0x2000002c
 8000808:	2000037c 	.word	0x2000037c
 800080c:	200000c0 	.word	0x200000c0
 8000810:	20000168 	.word	0x20000168
 8000814:	48000400 	.word	0x48000400
 8000818:	2000016c 	.word	0x2000016c
 800081c:	20000164 	.word	0x20000164
 8000820:	ffc00ffd 	.word	0xffc00ffd

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b096      	sub	sp, #88	; 0x58
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800082e:	2228      	movs	r2, #40	; 0x28
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f006 fb2a 	bl	8006e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
 8000856:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000858:	2302      	movs	r3, #2
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2310      	movs	r3, #16
 8000862:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000864:	2302      	movs	r3, #2
 8000866:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000868:	2300      	movs	r3, #0
 800086a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800086c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000870:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000876:	4618      	mov	r0, r3
 8000878:	f003 f8e6 	bl	8003a48 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000882:	f000 f91b 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f004 f90f 	bl	8004ac4 <HAL_RCC_ClockConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008ac:	f000 f906 	bl	8000abc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 80008b0:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 80008b4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80008b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ba:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	4618      	mov	r0, r3
 80008c8:	f004 fb32 	bl	8004f30 <HAL_RCCEx_PeriphCLKConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008d2:	f000 f8f3 	bl	8000abc <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3758      	adds	r7, #88	; 0x58
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if ( timer_ar_value == TIM1_PWM_FREQ_4K )
 80008e8:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d11c      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x4e>
  {
    timer_ar_value = TIM1_PWM_FREQ_8K;
 80008f4:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008f6:	f643 2298 	movw	r2, #15000	; 0x3a98
 80008fa:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD( &htim1, TIM1_PWM_FREQ_8K );
 80008fc:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
 8000906:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000908:	f643 2298 	movw	r2, #15000	; 0x3a98
 800090c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, TIM1_PWM_8K_25DUTY );
 800090e:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f640 62a6 	movw	r2, #3750	; 0xea6
 8000916:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, TIM1_PWM_8K_50DUTY );
 8000918:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000920:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, TIM1_PWM_8K_75DUTY );
 8000922:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f642 32f2 	movw	r2, #11250	; 0x2bf2
 800092a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_AUTORELOAD( &htim1, TIM1_PWM_FREQ_4K );
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, TIM1_PWM_4K_25DUTY );
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, TIM1_PWM_4K_50DUTY );
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, TIM1_PWM_4K_75DUTY );
  }
}
 800092c:	e061      	b.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x112>
  else if ( timer_ar_value == TIM1_PWM_FREQ_8K )
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000936:	4293      	cmp	r3, r2
 8000938:	d11c      	bne.n	8000974 <HAL_TIM_PeriodElapsedCallback+0x94>
    timer_ar_value = TIM1_PWM_FREQ_16K;
 800093a:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800093c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000940:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD( &htim1, TIM1_PWM_FREQ_16K );
 8000942:	4b30      	ldr	r3, [pc, #192]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f247 5230 	movw	r2, #30000	; 0x7530
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
 800094c:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800094e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000952:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, TIM1_PWM_16K_25DUTY );
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, TIM1_PWM_16K_50DUTY );
 800095e:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000966:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, TIM1_PWM_16K_75DUTY );
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8000970:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000972:	e03e      	b.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x112>
  else if ( timer_ar_value == TIM1_PWM_FREQ_16K )
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f247 5230 	movw	r2, #30000	; 0x7530
 800097c:	4293      	cmp	r3, r2
 800097e:	d11c      	bne.n	80009ba <HAL_TIM_PeriodElapsedCallback+0xda>
    timer_ar_value = TIM1_PWM_FREQ_4K;
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000982:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000986:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD( &htim1, TIM1_PWM_FREQ_4K );
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000994:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000998:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, TIM1_PWM_4K_25DUTY );
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f240 7253 	movw	r2, #1875	; 0x753
 80009a2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, TIM1_PWM_4K_50DUTY );
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f640 62a6 	movw	r2, #3750	; 0xea6
 80009ac:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, TIM1_PWM_4K_75DUTY );
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f241 52f9 	movw	r2, #5625	; 0x15f9
 80009b6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80009b8:	e01b      	b.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x112>
    timer_ar_value = TIM1_PWM_FREQ_4K;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80009bc:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80009c0:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD( &htim1, TIM1_PWM_FREQ_4K );
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009ce:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80009d2:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, TIM1_PWM_4K_25DUTY );
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f240 7253 	movw	r2, #1875	; 0x753
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, TIM1_PWM_4K_50DUTY );
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f640 62a6 	movw	r2, #3750	; 0xea6
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, TIM1_PWM_4K_75DUTY );
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f241 52f9 	movw	r2, #5625	; 0x15f9
 80009f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000584 	.word	0x20000584

08000a08 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	inbufferPtr = &adc_buffer[0];
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000a12:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000a14:	601a      	str	r2, [r3, #0]
	outbufferPtr = &dac_buffer[BUFFERSIZE/2];
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	2000057c 	.word	0x2000057c
 8000a2c:	2000017c 	.word	0x2000017c
 8000a30:	20000580 	.word	0x20000580
 8000a34:	2000047c 	.word	0x2000047c

08000a38 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  inbufferPtr = &adc_buffer[BUFFERSIZE/2];
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_ADC_ConvCpltCallback+0x20>)
 8000a42:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_ADC_ConvCpltCallback+0x24>)
 8000a44:	601a      	str	r2, [r3, #0]
  outbufferPtr = &dac_buffer[0];
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_ADC_ConvCpltCallback+0x28>)
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	2000057c 	.word	0x2000057c
 8000a5c:	2000027c 	.word	0x2000027c
 8000a60:	20000580 	.word	0x20000580
 8000a64:	2000037c 	.word	0x2000037c

08000a68 <processDSP>:

void processDSP() {
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  for(i=0; i<BUFFERSIZE/2; i++) {
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <processDSP+0x48>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	e012      	b.n	8000a9a <processDSP+0x32>
    outbufferPtr[i] = inbufferPtr[i];
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <processDSP+0x4c>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <processDSP+0x48>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	441a      	add	r2, r3
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <processDSP+0x50>)
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <processDSP+0x48>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	6812      	ldr	r2, [r2, #0]
 8000a8e:	601a      	str	r2, [r3, #0]
  for(i=0; i<BUFFERSIZE/2; i++) {
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <processDSP+0x48>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <processDSP+0x48>)
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <processDSP+0x48>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000aa0:	d9e8      	bls.n	8000a74 <processDSP+0xc>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000164 	.word	0x20000164
 8000ab4:	2000057c 	.word	0x2000057c
 8000ab8:	20000580 	.word	0x20000580

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6193      	str	r3, [r2, #24]
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	61d3      	str	r3, [r2, #28]
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x44>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 fa96 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <DMA1_Channel1_IRQHandler+0x10>)
 8000b6a:	f002 f8c3 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000007c 	.word	0x2000007c

08000b78 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <DMA1_Channel3_IRQHandler+0x10>)
 8000b7e:	f002 f8b9 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000d4 	.word	0x200000d4

08000b8c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b92:	f004 fd3f 	bl	8005614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000584 	.word	0x20000584

08000ba0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b096      	sub	sp, #88	; 0x58
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
 8000be6:	615a      	str	r2, [r3, #20]
 8000be8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	222c      	movs	r2, #44	; 0x2c
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f006 f94b 	bl	8006e8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bf6:	4b48      	ldr	r3, [pc, #288]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000bf8:	4a48      	ldr	r2, [pc, #288]	; (8000d1c <MX_TIM1_Init+0x158>)
 8000bfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bfc:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c02:	4b45      	ldr	r3, [pc, #276]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000c04:	2220      	movs	r2, #32
 8000c06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 8000c08:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000c0a:	f247 5230 	movw	r2, #30000	; 0x7530
 8000c0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b41      	ldr	r3, [pc, #260]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 3;
 8000c16:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000c18:	2203      	movs	r2, #3
 8000c1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1c:	4b3e      	ldr	r3, [pc, #248]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c22:	483d      	ldr	r0, [pc, #244]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000c24:	f004 fbb2 	bl	800538c <HAL_TIM_PWM_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c2e:	f7ff ff45 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c42:	4619      	mov	r1, r3
 8000c44:	4834      	ldr	r0, [pc, #208]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000c46:	f005 fb2b 	bl	80062a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c50:	f7ff ff34 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c54:	2360      	movs	r3, #96	; 0x60
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 7500;
 8000c58:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c76:	2200      	movs	r2, #0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4827      	ldr	r0, [pc, #156]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000c7c:	f004 fdea 	bl	8005854 <HAL_TIM_PWM_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000c86:	f7ff ff19 	bl	8000abc <Error_Handler>
  }
  sConfigOC.Pulse = 15000;
 8000c8a:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c94:	2204      	movs	r2, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	481f      	ldr	r0, [pc, #124]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000c9a:	f004 fddb 	bl	8005854 <HAL_TIM_PWM_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000ca4:	f7ff ff0a 	bl	8000abc <Error_Handler>
  }
  sConfigOC.Pulse = 22500;
 8000ca8:	f245 73e4 	movw	r3, #22500	; 0x57e4
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4818      	ldr	r0, [pc, #96]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000cb8:	f004 fdcc 	bl	8005854 <HAL_TIM_PWM_ConfigChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000cc2:	f7ff fefb 	bl	8000abc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ce8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000cfc:	f005 fb3e 	bl	800637c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000d06:	f7ff fed9 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d0a:	4803      	ldr	r0, [pc, #12]	; (8000d18 <MX_TIM1_Init+0x154>)
 8000d0c:	f000 f884 	bl	8000e18 <HAL_TIM_MspPostInit>

}
 8000d10:	bf00      	nop
 8000d12:	3758      	adds	r7, #88	; 0x58
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000584 	.word	0x20000584
 8000d1c:	40012c00 	.word	0x40012c00

08000d20 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d32:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <MX_TIM6_Init+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d44:	2204      	movs	r2, #4
 8000d46:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d50:	f004 fa14 	bl	800517c <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d5a:	f7ff feaf 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d5e:	2320      	movs	r3, #32
 8000d60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d6c:	f005 fa98 	bl	80062a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d76:	f7ff fea1 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200005d0 	.word	0x200005d0
 8000d88:	40001000 	.word	0x40001000

08000d8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_TIM_PWM_MspInit+0x44>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d113      	bne.n	8000dc6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x48>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x48>)
 8000da4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x48>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2019      	movs	r0, #25
 8000dbc:	f001 fccf 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000dc0:	2019      	movs	r0, #25
 8000dc2:	f001 fce8 	bl	8002796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40012c00 	.word	0x40012c00
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_TIM_Base_MspInit+0x38>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10b      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_TIM_Base_MspInit+0x3c>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_TIM_Base_MspInit+0x3c>)
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_TIM_Base_MspInit+0x3c>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 0310 	and.w	r3, r3, #16
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40001000 	.word	0x40001000
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <HAL_TIM_MspPostInit+0xa0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d139      	bne.n	8000eae <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <HAL_TIM_MspPostInit+0xa4>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a1f      	ldr	r2, [pc, #124]	; (8000ebc <HAL_TIM_MspPostInit+0xa4>)
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	6153      	str	r3, [r2, #20]
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <HAL_TIM_MspPostInit+0xa4>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_TIM_MspPostInit+0xa4>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_TIM_MspPostInit+0xa4>)
 8000e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5c:	6153      	str	r3, [r2, #20]
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_TIM_MspPostInit+0xa4>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e6a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e7c:	2306      	movs	r3, #6
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f002 f825 	bl	8002ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_TIM_MspPostInit+0xa8>)
 8000eaa:	f002 f815 	bl	8002ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40012c00 	.word	0x40012c00
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000eca:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <MX_USART2_UART_Init+0x5c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ed0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000f08:	f005 faf3 	bl	80064f2 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f12:	f7ff fdd3 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000061c 	.word	0x2000061c
 8000f20:	40004400 	.word	0x40004400

08000f24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <HAL_UART_MspInit+0x80>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d129      	bne.n	8000f9a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f76:	f248 0304 	movw	r3, #32772	; 0x8004
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f001 ff9f 	bl	8002ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40004400 	.word	0x40004400
 8000fa8:	40021000 	.word	0x40021000

08000fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490e      	ldr	r1, [pc, #56]	; (8000fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0b      	ldr	r4, [pc, #44]	; (8000ff8 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fd6:	f7ff fde3 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f005 ff33 	bl	8006e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fde:	f7ff fb89 	bl	80006f4 <main>

08000fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe2:	e7fe      	b.n	8000fe2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ff0:	08006ef4 	.word	0x08006ef4
  ldr r2, =_sbss
 8000ff4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ff8:	20000aac 	.word	0x20000aac

08000ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_2_IRQHandler>
	...

08001000 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x28>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x28>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f001 fb99 	bl	8002748 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fd54 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40022000 	.word	0x40022000

0800102c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fbb1 	bl	80027b2 <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f001 fb79 	bl	800275e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000004 	.word	0x20000004
 8001084:	2000000c 	.word	0x2000000c
 8001088:	20000008 	.word	0x20000008

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	200006a0 	.word	0x200006a0

080010b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200006a0 	.word	0x200006a0

080010cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff ffee 	bl	80010b4 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_Delay+0x44>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffde 	bl	80010b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000000c 	.word	0x2000000c

08001114 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b09a      	sub	sp, #104	; 0x68
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e172      	b.n	800142e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	2b00      	cmp	r3, #0
 8001158:	d176      	bne.n	8001248 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	2b00      	cmp	r3, #0
 8001160:	d152      	bne.n	8001208 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff f8c1 	bl	8000304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d13b      	bne.n	8001208 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f001 f9a3 	bl	80024dc <ADC_Disable>
 8001196:	4603      	mov	r3, r0
 8001198:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f003 0310 	and.w	r3, r3, #16
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d12f      	bne.n	8001208 <HAL_ADC_Init+0xe0>
 80011a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d12b      	bne.n	8001208 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011b8:	f023 0302 	bic.w	r3, r3, #2
 80011bc:	f043 0202 	orr.w	r2, r3, #2
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011d2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011e2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011e4:	4b94      	ldr	r3, [pc, #592]	; (8001438 <HAL_ADC_Init+0x310>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a94      	ldr	r2, [pc, #592]	; (800143c <HAL_ADC_Init+0x314>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	0c9a      	lsrs	r2, r3, #18
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011fa:	e002      	b.n	8001202 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	3b01      	subs	r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f9      	bne.n	80011fc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001224:	d110      	bne.n	8001248 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f023 0312 	bic.w	r3, r3, #18
 800122e:	f043 0210 	orr.w	r2, r3, #16
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f043 0201 	orr.w	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	2b00      	cmp	r3, #0
 8001252:	f040 80df 	bne.w	8001414 <HAL_ADC_Init+0x2ec>
 8001256:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 80da 	bne.w	8001414 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 80d2 	bne.w	8001414 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001278:	f043 0202 	orr.w	r2, r3, #2
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001280:	4b6f      	ldr	r3, [pc, #444]	; (8001440 <HAL_ADC_Init+0x318>)
 8001282:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800128c:	d102      	bne.n	8001294 <HAL_ADC_Init+0x16c>
 800128e:	4b6d      	ldr	r3, [pc, #436]	; (8001444 <HAL_ADC_Init+0x31c>)
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	e002      	b.n	800129a <HAL_ADC_Init+0x172>
 8001294:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001298:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d108      	bne.n	80012ba <HAL_ADC_Init+0x192>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_Init+0x192>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_ADC_Init+0x194>
 80012ba:	2300      	movs	r3, #0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d11c      	bne.n	80012fa <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012c0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d010      	beq.n	80012e8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d107      	bne.n	80012e2 <HAL_ADC_Init+0x1ba>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_Init+0x1ba>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_ADC_Init+0x1bc>
 80012e2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d108      	bne.n	80012fa <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80012e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	431a      	orrs	r2, r3
 80012f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012f8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7e5b      	ldrb	r3, [r3, #25]
 80012fe:	035b      	lsls	r3, r3, #13
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001304:	2a01      	cmp	r2, #1
 8001306:	d002      	beq.n	800130e <HAL_ADC_Init+0x1e6>
 8001308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800130c:	e000      	b.n	8001310 <HAL_ADC_Init+0x1e8>
 800130e:	2200      	movs	r2, #0
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	4313      	orrs	r3, r2
 800131e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001320:	4313      	orrs	r3, r2
 8001322:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d11b      	bne.n	8001366 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e5b      	ldrb	r3, [r3, #25]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	3b01      	subs	r3, #1
 800133c:	045a      	lsls	r2, r3, #17
 800133e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001340:	4313      	orrs	r3, r2
 8001342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001346:	663b      	str	r3, [r7, #96]	; 0x60
 8001348:	e00d      	b.n	8001366 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001352:	f043 0220 	orr.w	r2, r3, #32
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f043 0201 	orr.w	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136a:	2b01      	cmp	r3, #1
 800136c:	d007      	beq.n	800137e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001376:	4313      	orrs	r3, r2
 8001378:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800137a:	4313      	orrs	r3, r2
 800137c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b00      	cmp	r3, #0
 800138a:	d114      	bne.n	80013b6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800139a:	f023 0302 	bic.w	r3, r3, #2
 800139e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7e1b      	ldrb	r3, [r3, #24]
 80013a4:	039a      	lsls	r2, r3, #14
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4313      	orrs	r3, r2
 80013b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013b2:	4313      	orrs	r3, r2
 80013b4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <HAL_ADC_Init+0x320>)
 80013be:	4013      	ands	r3, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013c6:	430b      	orrs	r3, r1
 80013c8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10c      	bne.n	80013ec <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	f023 010f 	bic.w	r1, r3, #15
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	1e5a      	subs	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
 80013ea:	e007      	b.n	80013fc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 020f 	bic.w	r2, r2, #15
 80013fa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f023 0303 	bic.w	r3, r3, #3
 800140a:	f043 0201 	orr.w	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
 8001412:	e00a      	b.n	800142a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f023 0312 	bic.w	r3, r3, #18
 800141c:	f043 0210 	orr.w	r2, r3, #16
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001424:	2301      	movs	r3, #1
 8001426:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800142a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800142e:	4618      	mov	r0, r3
 8001430:	3768      	adds	r7, #104	; 0x68
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000004 	.word	0x20000004
 800143c:	431bde83 	.word	0x431bde83
 8001440:	50000300 	.word	0x50000300
 8001444:	50000100 	.word	0x50000100
 8001448:	fff0c007 	.word	0xfff0c007

0800144c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	2b00      	cmp	r3, #0
 8001468:	f040 80b9 	bne.w	80015de <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_ADC_Start_DMA+0x2e>
 8001476:	2302      	movs	r3, #2
 8001478:	e0b4      	b.n	80015e4 <HAL_ADC_Start_DMA+0x198>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001482:	4b5a      	ldr	r3, [pc, #360]	; (80015ec <HAL_ADC_Start_DMA+0x1a0>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 031f 	and.w	r3, r3, #31
 800148a:	2b00      	cmp	r3, #0
 800148c:	f040 80a0 	bne.w	80015d0 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 ffbf 	bl	8002414 <ADC_Enable>
 8001496:	4603      	mov	r3, r0
 8001498:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	2b00      	cmp	r3, #0
 800149e:	f040 8092 	bne.w	80015c6 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014b6:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <HAL_ADC_Start_DMA+0x1a0>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <HAL_ADC_Start_DMA+0x80>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ca:	d115      	bne.n	80014f8 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d027      	beq.n	8001536 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014f6:	e01e      	b.n	8001536 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800150c:	d004      	beq.n	8001518 <HAL_ADC_Start_DMA+0xcc>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a37      	ldr	r2, [pc, #220]	; (80015f0 <HAL_ADC_Start_DMA+0x1a4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d10e      	bne.n	8001536 <HAL_ADC_Start_DMA+0xea>
 8001518:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800152e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001542:	d106      	bne.n	8001552 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	f023 0206 	bic.w	r2, r3, #6
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	645a      	str	r2, [r3, #68]	; 0x44
 8001550:	e002      	b.n	8001558 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001564:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <HAL_ADC_Start_DMA+0x1a8>)
 8001566:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156c:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <HAL_ADC_Start_DMA+0x1ac>)
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <HAL_ADC_Start_DMA+0x1b0>)
 8001576:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	221c      	movs	r2, #28
 800157e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0210 	orr.w	r2, r2, #16
 800158e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3340      	adds	r3, #64	; 0x40
 80015aa:	4619      	mov	r1, r3
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f001 fb41 	bl	8002c36 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0204 	orr.w	r2, r2, #4
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	e00d      	b.n	80015e2 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015ce:	e008      	b.n	80015e2 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015dc:	e001      	b.n	80015e2 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015de:	2302      	movs	r3, #2
 80015e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	50000300 	.word	0x50000300
 80015f0:	50000100 	.word	0x50000100
 80015f4:	08002349 	.word	0x08002349
 80015f8:	080023c3 	.word	0x080023c3
 80015fc:	080023df 	.word	0x080023df

08001600 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001600:	b480      	push	{r7}
 8001602:	b09b      	sub	sp, #108	; 0x6c
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x22>
 800161e:	2302      	movs	r3, #2
 8001620:	e2a4      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x56c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	f040 8288 	bne.w	8001b4a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b04      	cmp	r3, #4
 8001640:	d81c      	bhi.n	800167c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	461a      	mov	r2, r3
 8001656:	231f      	movs	r3, #31
 8001658:	4093      	lsls	r3, r2
 800165a:	43db      	mvns	r3, r3
 800165c:	4019      	ands	r1, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fa00 f203 	lsl.w	r2, r0, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	631a      	str	r2, [r3, #48]	; 0x30
 800167a:	e063      	b.n	8001744 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b09      	cmp	r3, #9
 8001682:	d81e      	bhi.n	80016c2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	3b1e      	subs	r3, #30
 8001698:	221f      	movs	r2, #31
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	4019      	ands	r1, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	3b1e      	subs	r3, #30
 80016b4:	fa00 f203 	lsl.w	r2, r0, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
 80016c0:	e040      	b.n	8001744 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b0e      	cmp	r3, #14
 80016c8:	d81e      	bhi.n	8001708 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	3b3c      	subs	r3, #60	; 0x3c
 80016de:	221f      	movs	r2, #31
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	4019      	ands	r1, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	3b3c      	subs	r3, #60	; 0x3c
 80016fa:	fa00 f203 	lsl.w	r2, r0, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	639a      	str	r2, [r3, #56]	; 0x38
 8001706:	e01d      	b.n	8001744 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	3b5a      	subs	r3, #90	; 0x5a
 800171c:	221f      	movs	r2, #31
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	4019      	ands	r1, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	3b5a      	subs	r3, #90	; 0x5a
 8001738:	fa00 f203 	lsl.w	r2, r0, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 80e5 	bne.w	800191e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b09      	cmp	r3, #9
 800175a:	d91c      	bls.n	8001796 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6999      	ldr	r1, [r3, #24]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	3b1e      	subs	r3, #30
 800176e:	2207      	movs	r2, #7
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4019      	ands	r1, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6898      	ldr	r0, [r3, #8]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	3b1e      	subs	r3, #30
 8001788:	fa00 f203 	lsl.w	r2, r0, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	619a      	str	r2, [r3, #24]
 8001794:	e019      	b.n	80017ca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6959      	ldr	r1, [r3, #20]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	2207      	movs	r2, #7
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4019      	ands	r1, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	6898      	ldr	r0, [r3, #8]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	fa00 f203 	lsl.w	r2, r0, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d84f      	bhi.n	800188c <HAL_ADC_ConfigChannel+0x28c>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <HAL_ADC_ConfigChannel+0x1f4>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001805 	.word	0x08001805
 80017f8:	08001827 	.word	0x08001827
 80017fc:	08001849 	.word	0x08001849
 8001800:	0800186b 	.word	0x0800186b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800180a:	4b94      	ldr	r3, [pc, #592]	; (8001a5c <HAL_ADC_ConfigChannel+0x45c>)
 800180c:	4013      	ands	r3, r2
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	0691      	lsls	r1, r2, #26
 8001814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001816:	430a      	orrs	r2, r1
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001822:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001824:	e07e      	b.n	8001924 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800182c:	4b8b      	ldr	r3, [pc, #556]	; (8001a5c <HAL_ADC_ConfigChannel+0x45c>)
 800182e:	4013      	ands	r3, r2
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	0691      	lsls	r1, r2, #26
 8001836:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001838:	430a      	orrs	r2, r1
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001844:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001846:	e06d      	b.n	8001924 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800184e:	4b83      	ldr	r3, [pc, #524]	; (8001a5c <HAL_ADC_ConfigChannel+0x45c>)
 8001850:	4013      	ands	r3, r2
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	0691      	lsls	r1, r2, #26
 8001858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800185a:	430a      	orrs	r2, r1
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001866:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001868:	e05c      	b.n	8001924 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001870:	4b7a      	ldr	r3, [pc, #488]	; (8001a5c <HAL_ADC_ConfigChannel+0x45c>)
 8001872:	4013      	ands	r3, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	0691      	lsls	r1, r2, #26
 800187a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800187c:	430a      	orrs	r2, r1
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001888:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800188a:	e04b      	b.n	8001924 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001892:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	069b      	lsls	r3, r3, #26
 800189c:	429a      	cmp	r2, r3
 800189e:	d107      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ae:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	069b      	lsls	r3, r3, #26
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d107      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018d2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	069b      	lsls	r3, r3, #26
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d107      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018f6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	069b      	lsls	r3, r3, #26
 8001908:	429a      	cmp	r2, r3
 800190a:	d10a      	bne.n	8001922 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800191a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800191c:	e001      	b.n	8001922 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800191e:	bf00      	nop
 8001920:	e000      	b.n	8001924 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001922:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b01      	cmp	r3, #1
 8001930:	d108      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x344>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x344>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_ADC_ConfigChannel+0x346>
 8001944:	2300      	movs	r3, #0
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 810a 	bne.w	8001b60 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d00f      	beq.n	8001974 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2201      	movs	r2, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	400a      	ands	r2, r1
 800196e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001972:	e049      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2201      	movs	r2, #1
 8001982:	409a      	lsls	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b09      	cmp	r3, #9
 8001994:	d91c      	bls.n	80019d0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6999      	ldr	r1, [r3, #24]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	3b1b      	subs	r3, #27
 80019a8:	2207      	movs	r2, #7
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	4019      	ands	r1, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	6898      	ldr	r0, [r3, #8]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	3b1b      	subs	r3, #27
 80019c2:	fa00 f203 	lsl.w	r2, r0, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	619a      	str	r2, [r3, #24]
 80019ce:	e01b      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6959      	ldr	r1, [r3, #20]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	2207      	movs	r2, #7
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4019      	ands	r1, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6898      	ldr	r0, [r3, #8]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_ADC_ConfigChannel+0x460>)
 8001a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b10      	cmp	r3, #16
 8001a12:	d105      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d015      	beq.n	8001a4c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a24:	2b11      	cmp	r3, #17
 8001a26:	d105      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00b      	beq.n	8001a4c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a38:	2b12      	cmp	r3, #18
 8001a3a:	f040 8091 	bne.w	8001b60 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 808a 	bne.w	8001b60 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a54:	d108      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x468>
 8001a56:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_ADC_ConfigChannel+0x464>)
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	e008      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x46e>
 8001a5c:	83fff000 	.word	0x83fff000
 8001a60:	50000300 	.word	0x50000300
 8001a64:	50000100 	.word	0x50000100
 8001a68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a6c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d108      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x48e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x48e>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x490>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d150      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a94:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d010      	beq.n	8001abc <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x4b6>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x4b6>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x4b8>
 8001ab6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d13c      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b10      	cmp	r3, #16
 8001ac2:	d11d      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x500>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001acc:	d118      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <HAL_ADC_ConfigChannel+0x578>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a27      	ldr	r2, [pc, #156]	; (8001b7c <HAL_ADC_ConfigChannel+0x57c>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	0c9a      	lsrs	r2, r3, #18
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001af0:	e002      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f9      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001afe:	e02e      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b11      	cmp	r3, #17
 8001b06:	d10b      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x520>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b10:	d106      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b1e:	e01e      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b12      	cmp	r3, #18
 8001b26:	d11a      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b32:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b34:	e013      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f043 0220 	orr.w	r2, r3, #32
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b48:	e00a      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f043 0220 	orr.w	r2, r3, #32
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b5c:	e000      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b5e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	376c      	adds	r7, #108	; 0x6c
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	431bde83 	.word	0x431bde83

08001b80 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b09d      	sub	sp, #116	; 0x74
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_ADCEx_InjectedConfigChannel+0x26>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e2ff      	b.n	80021a6 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d132      	bne.n	8001c24 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d124      	bne.n	8001c10 <HAL_ADCEx_InjectedConfigChannel+0x90>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d00c      	beq.n	8001be8 <HAL_ADCEx_InjectedConfigChannel+0x68>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	021a      	lsls	r2, r3, #8
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	4313      	orrs	r3, r2
 8001be0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001be2:	4313      	orrs	r3, r2
 8001be4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001be6:	e005      	b.n	8001bf4 <HAL_ADCEx_InjectedConfigChannel+0x74>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bfa:	4b9c      	ldr	r3, [pc, #624]	; (8001e6c <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001c04:	430b      	orrs	r3, r1
 8001c06:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001c0c:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001c0e:	e060      	b.n	8001cd2 <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f043 0220 	orr.w	r2, r3, #32
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001c22:	e056      	b.n	8001cd2 <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d121      	bne.n	8001c70 <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	699a      	ldr	r2, [r3, #24]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d00e      	beq.n	8001c60 <HAL_ADCEx_InjectedConfigChannel+0xe0>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	1e59      	subs	r1, r3, #1
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4319      	orrs	r1, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	430b      	orrs	r3, r1
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	649a      	str	r2, [r3, #72]	; 0x48
 8001c5e:	e007      	b.n	8001c70 <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	3302      	adds	r3, #2
 8001c82:	221f      	movs	r2, #31
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4019      	ands	r1, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	fa00 f303 	lsl.w	r3, r0, r3
 8001ca2:	ea41 0203 	orr.w	r2, r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	1e5a      	subs	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10a      	bne.n	8001cd2 <HAL_ADCEx_InjectedConfigChannel+0x152>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d12d      	bne.n	8001d3c <HAL_ADCEx_InjectedConfigChannel+0x1bc>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	7f5b      	ldrb	r3, [r3, #29]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d110      	bne.n	8001d0a <HAL_ADCEx_InjectedConfigChannel+0x18a>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	7f9b      	ldrb	r3, [r3, #30]
 8001cf6:	055a      	lsls	r2, r3, #21
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	7f1b      	ldrb	r3, [r3, #28]
 8001cfc:	051b      	lsls	r3, r3, #20
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	e018      	b.n	8001d3c <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	7f9b      	ldrb	r3, [r3, #30]
 8001d18:	055a      	lsls	r2, r3, #21
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	7f1b      	ldrb	r3, [r3, #28]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d108      	bne.n	8001d3c <HAL_ADCEx_InjectedConfigChannel+0x1bc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f043 0220 	orr.w	r2, r3, #32
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 8110 	bne.w	8001f6c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d10c      	bne.n	8001d6e <HAL_ADCEx_InjectedConfigChannel+0x1ee>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	7f5b      	ldrb	r3, [r3, #29]
 8001d62:	065a      	lsls	r2, r3, #25
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	e014      	b.n	8001d98 <HAL_ADCEx_InjectedConfigChannel+0x218>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001d7c:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	7f5b      	ldrb	r3, [r3, #29]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d108      	bne.n	8001d98 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f043 0220 	orr.w	r2, r3, #32
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	d91c      	bls.n	8001dda <HAL_ADCEx_InjectedConfigChannel+0x25a>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6999      	ldr	r1, [r3, #24]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	3b1e      	subs	r3, #30
 8001db2:	2207      	movs	r2, #7
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4019      	ands	r1, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6898      	ldr	r0, [r3, #8]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b1e      	subs	r3, #30
 8001dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	619a      	str	r2, [r3, #24]
 8001dd8:	e019      	b.n	8001e0e <HAL_ADCEx_InjectedConfigChannel+0x28e>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6959      	ldr	r1, [r3, #20]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	2207      	movs	r2, #7
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	4019      	ands	r1, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6898      	ldr	r0, [r3, #8]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	fa00 f203 	lsl.w	r2, r0, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	08db      	lsrs	r3, r3, #3
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d854      	bhi.n	8001eda <HAL_ADCEx_InjectedConfigChannel+0x35a>
 8001e30:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <HAL_ADCEx_InjectedConfigChannel+0x2b8>)
 8001e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e36:	bf00      	nop
 8001e38:	08001e49 	.word	0x08001e49
 8001e3c:	08001e75 	.word	0x08001e75
 8001e40:	08001e97 	.word	0x08001e97
 8001e44:	08001eb9 	.word	0x08001eb9
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	0691      	lsls	r1, r2, #26
 8001e58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e66:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8001e68:	e083      	b.n	8001f72 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
 8001e6a:	bf00      	nop
 8001e6c:	82082000 	.word	0x82082000
 8001e70:	83fff000 	.word	0x83fff000
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e7a:	4b95      	ldr	r3, [pc, #596]	; (80020d0 <HAL_ADCEx_InjectedConfigChannel+0x550>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	0691      	lsls	r1, r2, #26
 8001e84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e86:	430a      	orrs	r2, r1
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e92:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8001e94:	e06d      	b.n	8001f72 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e9c:	4b8c      	ldr	r3, [pc, #560]	; (80020d0 <HAL_ADCEx_InjectedConfigChannel+0x550>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	0691      	lsls	r1, r2, #26
 8001ea6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eb4:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8001eb6:	e05c      	b.n	8001f72 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ebe:	4b84      	ldr	r3, [pc, #528]	; (80020d0 <HAL_ADCEx_InjectedConfigChannel+0x550>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	0691      	lsls	r1, r2, #26
 8001ec8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ed6:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8001ed8:	e04b      	b.n	8001f72 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	069b      	lsls	r3, r3, #26
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d107      	bne.n	8001efe <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001efc:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	069b      	lsls	r3, r3, #26
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d107      	bne.n	8001f22 <HAL_ADCEx_InjectedConfigChannel+0x3a2>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f20:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	069b      	lsls	r3, r3, #26
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d107      	bne.n	8001f46 <HAL_ADCEx_InjectedConfigChannel+0x3c6>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f44:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	069b      	lsls	r3, r3, #26
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d10a      	bne.n	8001f70 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f68:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f6a:	e001      	b.n	8001f70 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
    }
    
  }
 8001f6c:	bf00      	nop
 8001f6e:	e000      	b.n	8001f72 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
      break;
 8001f70:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d108      	bne.n	8001f92 <HAL_ADCEx_InjectedConfigChannel+0x412>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADCEx_InjectedConfigChannel+0x412>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_ADCEx_InjectedConfigChannel+0x414>
 8001f92:	2300      	movs	r3, #0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f040 8100 	bne.w	800219a <HAL_ADCEx_InjectedConfigChannel+0x61a>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d00f      	beq.n	8001fc2 <HAL_ADCEx_InjectedConfigChannel+0x442>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	400a      	ands	r2, r1
 8001fbc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001fc0:	e049      	b.n	8002056 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b09      	cmp	r3, #9
 8001fe2:	d91c      	bls.n	800201e <HAL_ADCEx_InjectedConfigChannel+0x49e>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6999      	ldr	r1, [r3, #24]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b1b      	subs	r3, #27
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	4019      	ands	r1, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6898      	ldr	r0, [r3, #8]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	3b1b      	subs	r3, #27
 8002010:	fa00 f203 	lsl.w	r2, r0, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	619a      	str	r2, [r3, #24]
 800201c:	e01b      	b.n	8002056 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6959      	ldr	r1, [r3, #20]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	2207      	movs	r2, #7
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	4019      	ands	r1, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6898      	ldr	r0, [r3, #8]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	fa00 f203 	lsl.w	r2, r0, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_ADCEx_InjectedConfigChannel+0x554>)
 8002058:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b10      	cmp	r3, #16
 8002060:	d105      	bne.n	800206e <HAL_ADCEx_InjectedConfigChannel+0x4ee>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800206a:	2b00      	cmp	r3, #0
 800206c:	d015      	beq.n	800209a <HAL_ADCEx_InjectedConfigChannel+0x51a>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002072:	2b11      	cmp	r3, #17
 8002074:	d105      	bne.n	8002082 <HAL_ADCEx_InjectedConfigChannel+0x502>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_ADCEx_InjectedConfigChannel+0x51a>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002086:	2b12      	cmp	r3, #18
 8002088:	f040 8087 	bne.w	800219a <HAL_ADCEx_InjectedConfigChannel+0x61a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800208c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	f040 8080 	bne.w	800219a <HAL_ADCEx_InjectedConfigChannel+0x61a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020a2:	d102      	bne.n	80020aa <HAL_ADCEx_InjectedConfigChannel+0x52a>
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_ADCEx_InjectedConfigChannel+0x558>)
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	e002      	b.n	80020b0 <HAL_ADCEx_InjectedConfigChannel+0x530>
 80020aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020ae:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d10e      	bne.n	80020dc <HAL_ADCEx_InjectedConfigChannel+0x55c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_ADCEx_InjectedConfigChannel+0x55c>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e006      	b.n	80020de <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80020d0:	83fff000 	.word	0x83fff000
 80020d4:	50000300 	.word	0x50000300
 80020d8:	50000100 	.word	0x50000100
 80020dc:	2300      	movs	r3, #0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d150      	bne.n	8002184 <HAL_ADCEx_InjectedConfigChannel+0x604>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020e2:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d010      	beq.n	800210a <HAL_ADCEx_InjectedConfigChannel+0x58a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d107      	bne.n	8002104 <HAL_ADCEx_InjectedConfigChannel+0x584>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_ADCEx_InjectedConfigChannel+0x584>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_ADCEx_InjectedConfigChannel+0x586>
 8002104:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002106:	2b00      	cmp	r3, #0
 8002108:	d13c      	bne.n	8002184 <HAL_ADCEx_InjectedConfigChannel+0x604>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b10      	cmp	r3, #16
 8002110:	d11d      	bne.n	800214e <HAL_ADCEx_InjectedConfigChannel+0x5ce>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800211a:	d118      	bne.n	800214e <HAL_ADCEx_InjectedConfigChannel+0x5ce>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800211c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002126:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <HAL_ADCEx_InjectedConfigChannel+0x634>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_ADCEx_InjectedConfigChannel+0x638>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0c9a      	lsrs	r2, r3, #18
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800213e:	e002      	b.n	8002146 <HAL_ADCEx_InjectedConfigChannel+0x5c6>
          {
            wait_loop_index--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3b01      	subs	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f9      	bne.n	8002140 <HAL_ADCEx_InjectedConfigChannel+0x5c0>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800214c:	e024      	b.n	8002198 <HAL_ADCEx_InjectedConfigChannel+0x618>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b11      	cmp	r3, #17
 8002154:	d10b      	bne.n	800216e <HAL_ADCEx_InjectedConfigChannel+0x5ee>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800215e:	d106      	bne.n	800216e <HAL_ADCEx_InjectedConfigChannel+0x5ee>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800216a:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800216c:	e014      	b.n	8002198 <HAL_ADCEx_InjectedConfigChannel+0x618>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b12      	cmp	r3, #18
 8002174:	d110      	bne.n	8002198 <HAL_ADCEx_InjectedConfigChannel+0x618>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800217e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002180:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002182:	e009      	b.n	8002198 <HAL_ADCEx_InjectedConfigChannel+0x618>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002196:	e000      	b.n	800219a <HAL_ADCEx_InjectedConfigChannel+0x61a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002198:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3774      	adds	r7, #116	; 0x74
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000004 	.word	0x20000004
 80021b8:	431bde83 	.word	0x431bde83

080021bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80021bc:	b480      	push	{r7}
 80021be:	b099      	sub	sp, #100	; 0x64
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d4:	d102      	bne.n	80021dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80021d6:	4b5a      	ldr	r3, [pc, #360]	; (8002340 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	e002      	b.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80021dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021e0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0a2      	b.n	8002332 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e09b      	b.n	8002332 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d17f      	bne.n	8002310 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d179      	bne.n	8002310 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800221c:	4b49      	ldr	r3, [pc, #292]	; (8002344 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800221e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d040      	beq.n	80022aa <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6859      	ldr	r1, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800223a:	035b      	lsls	r3, r3, #13
 800223c:	430b      	orrs	r3, r1
 800223e:	431a      	orrs	r2, r3
 8002240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002242:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d108      	bne.n	8002264 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002264:	2300      	movs	r3, #0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d15c      	bne.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002286:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d14b      	bne.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800228c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002294:	f023 030f 	bic.w	r3, r3, #15
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	6811      	ldr	r1, [r2, #0]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	6892      	ldr	r2, [r2, #8]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	431a      	orrs	r2, r3
 80022a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022a8:	e03c      	b.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d108      	bne.n	80022d6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80022d6:	2300      	movs	r3, #0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d123      	bne.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d107      	bne.n	80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80022f8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d112      	bne.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80022fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002306:	f023 030f 	bic.w	r3, r3, #15
 800230a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800230c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800230e:	e009      	b.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f043 0220 	orr.w	r2, r3, #32
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002322:	e000      	b.n	8002326 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002324:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800232e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002332:	4618      	mov	r0, r3
 8002334:	3764      	adds	r7, #100	; 0x64
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	50000100 	.word	0x50000100
 8002344:	50000300 	.word	0x50000300

08002348 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800235e:	2b00      	cmp	r3, #0
 8002360:	d126      	bne.n	80023b0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002378:	2b00      	cmp	r3, #0
 800237a:	d115      	bne.n	80023a8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002380:	2b00      	cmp	r3, #0
 8002382:	d111      	bne.n	80023a8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d105      	bne.n	80023a8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7fe fb45 	bl	8000a38 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023ae:	e004      	b.n	80023ba <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
}
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7fe fb19 	bl	8000a08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	f043 0204 	orr.w	r2, r3, #4
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f7fe fe85 	bl	8001114 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d108      	bne.n	8002440 <ADC_Enable+0x2c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <ADC_Enable+0x2c>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <ADC_Enable+0x2e>
 8002440:	2300      	movs	r3, #0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d143      	bne.n	80024ce <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <ADC_Enable+0xc4>)
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00d      	beq.n	8002470 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f043 0210 	orr.w	r2, r3, #16
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002464:	f043 0201 	orr.w	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e02f      	b.n	80024d0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002480:	f7fe fe18 	bl	80010b4 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002486:	e01b      	b.n	80024c0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002488:	f7fe fe14 	bl	80010b4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d914      	bls.n	80024c0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d00d      	beq.n	80024c0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f043 0210 	orr.w	r2, r3, #16
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e007      	b.n	80024d0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d1dc      	bne.n	8002488 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	8000003f 	.word	0x8000003f

080024dc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d108      	bne.n	8002508 <ADC_Disable+0x2c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <ADC_Disable+0x2c>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <ADC_Disable+0x2e>
 8002508:	2300      	movs	r3, #0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d047      	beq.n	800259e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030d 	and.w	r3, r3, #13
 8002518:	2b01      	cmp	r3, #1
 800251a:	d10f      	bne.n	800253c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0202 	orr.w	r2, r2, #2
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2203      	movs	r2, #3
 8002532:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002534:	f7fe fdbe 	bl	80010b4 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800253a:	e029      	b.n	8002590 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f043 0210 	orr.w	r2, r3, #16
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e023      	b.n	80025a0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002558:	f7fe fdac 	bl	80010b4 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d914      	bls.n	8002590 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b01      	cmp	r3, #1
 8002572:	d10d      	bne.n	8002590 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f043 0210 	orr.w	r2, r3, #16
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e007      	b.n	80025a0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b01      	cmp	r3, #1
 800259c:	d0dc      	beq.n	8002558 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c4:	4013      	ands	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	60d3      	str	r3, [r2, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <__NVIC_GetPriorityGrouping+0x18>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	db0b      	blt.n	8002636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4907      	ldr	r1, [pc, #28]	; (8002644 <__NVIC_EnableIRQ+0x38>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2001      	movs	r0, #1
 800262e:	fa00 f202 	lsl.w	r2, r0, r2
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000e100 	.word	0xe000e100

08002648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	2b00      	cmp	r3, #0
 800265a:	db0a      	blt.n	8002672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	490c      	ldr	r1, [pc, #48]	; (8002694 <__NVIC_SetPriority+0x4c>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	440b      	add	r3, r1
 800266c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002670:	e00a      	b.n	8002688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4908      	ldr	r1, [pc, #32]	; (8002698 <__NVIC_SetPriority+0x50>)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	3b04      	subs	r3, #4
 8002680:	0112      	lsls	r2, r2, #4
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	440b      	add	r3, r1
 8002686:	761a      	strb	r2, [r3, #24]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000e100 	.word	0xe000e100
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f1c3 0307 	rsb	r3, r3, #7
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	bf28      	it	cs
 80026ba:	2304      	movcs	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d902      	bls.n	80026cc <NVIC_EncodePriority+0x30>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3b03      	subs	r3, #3
 80026ca:	e000      	b.n	80026ce <NVIC_EncodePriority+0x32>
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	401a      	ands	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	43d9      	mvns	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	4313      	orrs	r3, r2
         );
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002714:	d301      	bcc.n	800271a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002716:	2301      	movs	r3, #1
 8002718:	e00f      	b.n	800273a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <SysTick_Config+0x40>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002722:	210f      	movs	r1, #15
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f7ff ff8e 	bl	8002648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <SysTick_Config+0x40>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <SysTick_Config+0x40>)
 8002734:	2207      	movs	r2, #7
 8002736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	e000e010 	.word	0xe000e010

08002748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ff29 	bl	80025a8 <__NVIC_SetPriorityGrouping>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002770:	f7ff ff3e 	bl	80025f0 <__NVIC_GetPriorityGrouping>
 8002774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	6978      	ldr	r0, [r7, #20]
 800277c:	f7ff ff8e 	bl	800269c <NVIC_EncodePriority>
 8002780:	4602      	mov	r2, r0
 8002782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff5d 	bl	8002648 <__NVIC_SetPriority>
}
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff31 	bl	800260c <__NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffa2 	bl	8002704 <SysTick_Config>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e014      	b.n	8002806 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	791b      	ldrb	r3, [r3, #4]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d105      	bne.n	80027f2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7fd fe1b 	bl	8000428 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	795b      	ldrb	r3, [r3, #5]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_DAC_Start_DMA+0x1e>
 8002866:	2302      	movs	r3, #2
 8002868:	e09b      	b.n	80029a2 <HAL_DAC_Start_DMA+0x156>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2202      	movs	r2, #2
 8002874:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d12f      	bne.n	80028dc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a4a      	ldr	r2, [pc, #296]	; (80029ac <HAL_DAC_Start_DMA+0x160>)
 8002882:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a49      	ldr	r2, [pc, #292]	; (80029b0 <HAL_DAC_Start_DMA+0x164>)
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a48      	ldr	r2, [pc, #288]	; (80029b4 <HAL_DAC_Start_DMA+0x168>)
 8002892:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028a2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d013      	beq.n	80028d2 <HAL_DAC_Start_DMA+0x86>
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d845      	bhi.n	800293c <HAL_DAC_Start_DMA+0xf0>
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_DAC_Start_DMA+0x72>
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d005      	beq.n	80028c8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80028bc:	e03e      	b.n	800293c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3308      	adds	r3, #8
 80028c4:	617b      	str	r3, [r7, #20]
        break;
 80028c6:	e03c      	b.n	8002942 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	330c      	adds	r3, #12
 80028ce:	617b      	str	r3, [r7, #20]
        break;
 80028d0:	e037      	b.n	8002942 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3310      	adds	r3, #16
 80028d8:	617b      	str	r3, [r7, #20]
        break;
 80028da:	e032      	b.n	8002942 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a35      	ldr	r2, [pc, #212]	; (80029b8 <HAL_DAC_Start_DMA+0x16c>)
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a34      	ldr	r2, [pc, #208]	; (80029bc <HAL_DAC_Start_DMA+0x170>)
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a33      	ldr	r2, [pc, #204]	; (80029c0 <HAL_DAC_Start_DMA+0x174>)
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002902:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	2b08      	cmp	r3, #8
 8002908:	d013      	beq.n	8002932 <HAL_DAC_Start_DMA+0xe6>
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	2b08      	cmp	r3, #8
 800290e:	d817      	bhi.n	8002940 <HAL_DAC_Start_DMA+0xf4>
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_DAC_Start_DMA+0xd2>
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d005      	beq.n	8002928 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800291c:	e010      	b.n	8002940 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3314      	adds	r3, #20
 8002924:	617b      	str	r3, [r7, #20]
        break;
 8002926:	e00c      	b.n	8002942 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3318      	adds	r3, #24
 800292e:	617b      	str	r3, [r7, #20]
        break;
 8002930:	e007      	b.n	8002942 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	331c      	adds	r3, #28
 8002938:	617b      	str	r3, [r7, #20]
        break;
 800293a:	e002      	b.n	8002942 <HAL_DAC_Start_DMA+0xf6>
        break;
 800293c:	bf00      	nop
 800293e:	e000      	b.n	8002942 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002940:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10f      	bne.n	8002968 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002956:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6898      	ldr	r0, [r3, #8]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	f000 f968 	bl	8002c36 <HAL_DMA_Start_IT>
 8002966:	e00e      	b.n	8002986 <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002976:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	68d8      	ldr	r0, [r3, #12]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	f000 f958 	bl	8002c36 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6819      	ldr	r1, [r3, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	409a      	lsls	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	08002ad1 	.word	0x08002ad1
 80029b0:	08002af3 	.word	0x08002af3
 80029b4:	08002b0f 	.word	0x08002b0f
 80029b8:	08002b3d 	.word	0x08002b3d
 80029bc:	08002b5f 	.word	0x08002b5f
 80029c0:	08002b7b 	.word	0x08002b7b

080029c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	795b      	ldrb	r3, [r3, #5]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_DAC_ConfigChannel+0x20>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e04e      	b.n	8002a82 <HAL_DAC_ConfigChannel+0xbe>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2202      	movs	r2, #2
 80029ee:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a24      	ldr	r2, [pc, #144]	; (8002a90 <HAL_DAC_ConfigChannel+0xcc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d112      	bne.n	8002a28 <HAL_DAC_ConfigChannel+0x64>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10f      	bne.n	8002a28 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002a08:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4013      	ands	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	e00e      	b.n	8002a46 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8002a28:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4013      	ands	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6819      	ldr	r1, [r3, #0]
 8002a62:	22c0      	movs	r2, #192	; 0xc0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	400a      	ands	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40007400 	.word	0x40007400

08002a94 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f7ff fe95 	bl	800280e <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	711a      	strb	r2, [r3, #4]
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff fe8e 	bl	8002822 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f043 0204 	orr.w	r2, r3, #4
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7ff fe84 	bl	8002836 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	711a      	strb	r2, [r3, #4]
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f7ff ffa2 	bl	8002a94 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	711a      	strb	r2, [r3, #4]
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff ff9b 	bl	8002aa8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f043 0204 	orr.w	r2, r3, #4
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7ff ff91 	bl	8002abc <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	711a      	strb	r2, [r3, #4]
}
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e037      	b.n	8002c2e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bd4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002bd8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f941 	bl	8002e98 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}  
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_DMA_Start_IT+0x20>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e04a      	b.n	8002cec <HAL_DMA_Start_IT+0xb6>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d13a      	bne.n	8002cde <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f8d4 	bl	8002e3a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 020e 	orr.w	r2, r2, #14
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e00f      	b.n	8002ccc <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 020a 	orr.w	r2, r2, #10
 8002cba:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0204 	bic.w	r2, r2, #4
 8002cca:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e005      	b.n	8002cea <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2204      	movs	r2, #4
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d024      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x72>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01f      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0204 	bic.w	r2, r2, #4
 8002d42:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d52:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d06a      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002d64:	e065      	b.n	8002e32 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d02c      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0xdc>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d027      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10b      	bne.n	8002da6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 020a 	bic.w	r2, r2, #10
 8002d9c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	2102      	movs	r1, #2
 8002db0:	fa01 f202 	lsl.w	r2, r1, r2
 8002db4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d035      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002dce:	e030      	b.n	8002e32 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d028      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x13e>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d023      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 020e 	bic.w	r2, r2, #14
 8002df8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f202 	lsl.w	r2, r1, r2
 8002e08:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4798      	blx	r3
    }
  }
}  
 8002e30:	e7ff      	b.n	8002e32 <HAL_DMA_IRQHandler+0x13e>
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e50:	2101      	movs	r1, #1
 8002e52:	fa01 f202 	lsl.w	r2, r1, r2
 8002e56:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d108      	bne.n	8002e7a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e78:	e007      	b.n	8002e8a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	60da      	str	r2, [r3, #12]
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <DMA_CalcBaseAndBitshift+0x34>)
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <DMA_CalcBaseAndBitshift+0x38>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	009a      	lsls	r2, r3, #2
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a06      	ldr	r2, [pc, #24]	; (8002ed4 <DMA_CalcBaseAndBitshift+0x3c>)
 8002ebc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	bffdfff8 	.word	0xbffdfff8
 8002ed0:	cccccccd 	.word	0xcccccccd
 8002ed4:	40020000 	.word	0x40020000

08002ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee6:	e14e      	b.n	8003186 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	2101      	movs	r1, #1
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8140 	beq.w	8003180 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d005      	beq.n	8002f18 <HAL_GPIO_Init+0x40>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d130      	bne.n	8002f7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f4e:	2201      	movs	r2, #1
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	f003 0201 	and.w	r2, r3, #1
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d017      	beq.n	8002fb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	2203      	movs	r2, #3
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d123      	bne.n	800300a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	08da      	lsrs	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3208      	adds	r2, #8
 8002fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	220f      	movs	r2, #15
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	08da      	lsrs	r2, r3, #3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3208      	adds	r2, #8
 8003004:	6939      	ldr	r1, [r7, #16]
 8003006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	2203      	movs	r2, #3
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0203 	and.w	r2, r3, #3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 809a 	beq.w	8003180 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304c:	4b55      	ldr	r3, [pc, #340]	; (80031a4 <HAL_GPIO_Init+0x2cc>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4a54      	ldr	r2, [pc, #336]	; (80031a4 <HAL_GPIO_Init+0x2cc>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6193      	str	r3, [r2, #24]
 8003058:	4b52      	ldr	r3, [pc, #328]	; (80031a4 <HAL_GPIO_Init+0x2cc>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003064:	4a50      	ldr	r2, [pc, #320]	; (80031a8 <HAL_GPIO_Init+0x2d0>)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	220f      	movs	r2, #15
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800308e:	d013      	beq.n	80030b8 <HAL_GPIO_Init+0x1e0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a46      	ldr	r2, [pc, #280]	; (80031ac <HAL_GPIO_Init+0x2d4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00d      	beq.n	80030b4 <HAL_GPIO_Init+0x1dc>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a45      	ldr	r2, [pc, #276]	; (80031b0 <HAL_GPIO_Init+0x2d8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d007      	beq.n	80030b0 <HAL_GPIO_Init+0x1d8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a44      	ldr	r2, [pc, #272]	; (80031b4 <HAL_GPIO_Init+0x2dc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <HAL_GPIO_Init+0x1d4>
 80030a8:	2303      	movs	r3, #3
 80030aa:	e006      	b.n	80030ba <HAL_GPIO_Init+0x1e2>
 80030ac:	2305      	movs	r3, #5
 80030ae:	e004      	b.n	80030ba <HAL_GPIO_Init+0x1e2>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e002      	b.n	80030ba <HAL_GPIO_Init+0x1e2>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_GPIO_Init+0x1e2>
 80030b8:	2300      	movs	r3, #0
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	f002 0203 	and.w	r2, r2, #3
 80030c0:	0092      	lsls	r2, r2, #2
 80030c2:	4093      	lsls	r3, r2
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030ca:	4937      	ldr	r1, [pc, #220]	; (80031a8 <HAL_GPIO_Init+0x2d0>)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	3302      	adds	r3, #2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d8:	4b37      	ldr	r3, [pc, #220]	; (80031b8 <HAL_GPIO_Init+0x2e0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030fc:	4a2e      	ldr	r2, [pc, #184]	; (80031b8 <HAL_GPIO_Init+0x2e0>)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003102:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <HAL_GPIO_Init+0x2e0>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	43db      	mvns	r3, r3
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003126:	4a24      	ldr	r2, [pc, #144]	; (80031b8 <HAL_GPIO_Init+0x2e0>)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800312c:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <HAL_GPIO_Init+0x2e0>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003150:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_GPIO_Init+0x2e0>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <HAL_GPIO_Init+0x2e0>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	43db      	mvns	r3, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4013      	ands	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800317a:	4a0f      	ldr	r2, [pc, #60]	; (80031b8 <HAL_GPIO_Init+0x2e0>)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	3301      	adds	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	f47f aea9 	bne.w	8002ee8 <HAL_GPIO_Init+0x10>
  }
}
 8003196:	bf00      	nop
 8003198:	bf00      	nop
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40010000 	.word	0x40010000
 80031ac:	48000400 	.word	0x48000400
 80031b0:	48000800 	.word	0x48000800
 80031b4:	48000c00 	.word	0x48000c00
 80031b8:	40010400 	.word	0x40010400

080031bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
 80031c8:	4613      	mov	r3, r2
 80031ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031cc:	787b      	ldrb	r3, [r7, #1]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031d8:	e002      	b.n	80031e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031fe:	887a      	ldrh	r2, [r7, #2]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4013      	ands	r3, r2
 8003204:	041a      	lsls	r2, r3, #16
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	43d9      	mvns	r1, r3
 800320a:	887b      	ldrh	r3, [r7, #2]
 800320c:	400b      	ands	r3, r1
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	619a      	str	r2, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e081      	b.n	8003336 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd fa10 	bl	800066c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2224      	movs	r2, #36	; 0x24
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003270:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003280:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	e006      	b.n	80032a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d104      	bne.n	80032ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69d9      	ldr	r1, [r3, #28]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	4608      	mov	r0, r1
 800334a:	4611      	mov	r1, r2
 800334c:	461a      	mov	r2, r3
 800334e:	4603      	mov	r3, r0
 8003350:	817b      	strh	r3, [r7, #10]
 8003352:	460b      	mov	r3, r1
 8003354:	813b      	strh	r3, [r7, #8]
 8003356:	4613      	mov	r3, r2
 8003358:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b20      	cmp	r3, #32
 8003364:	f040 80f9 	bne.w	800355a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_I2C_Mem_Write+0x34>
 800336e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0ed      	b.n	800355c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_I2C_Mem_Write+0x4e>
 800338a:	2302      	movs	r3, #2
 800338c:	e0e6      	b.n	800355c <HAL_I2C_Mem_Write+0x21c>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003396:	f7fd fe8d 	bl	80010b4 <HAL_GetTick>
 800339a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2319      	movs	r3, #25
 80033a2:	2201      	movs	r2, #1
 80033a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f955 	bl	8003658 <I2C_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0d1      	b.n	800355c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2221      	movs	r2, #33	; 0x21
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2240      	movs	r2, #64	; 0x40
 80033c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033e0:	88f8      	ldrh	r0, [r7, #6]
 80033e2:	893a      	ldrh	r2, [r7, #8]
 80033e4:	8979      	ldrh	r1, [r7, #10]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	4603      	mov	r3, r0
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f8b9 	bl	8003568 <I2C_RequestMemoryWrite>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0a9      	b.n	800355c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	2bff      	cmp	r3, #255	; 0xff
 8003410:	d90e      	bls.n	8003430 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	22ff      	movs	r2, #255	; 0xff
 8003416:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	b2da      	uxtb	r2, r3
 800341e:	8979      	ldrh	r1, [r7, #10]
 8003420:	2300      	movs	r3, #0
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fa47 	bl	80038bc <I2C_TransferConfig>
 800342e:	e00f      	b.n	8003450 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343e:	b2da      	uxtb	r2, r3
 8003440:	8979      	ldrh	r1, [r7, #10]
 8003442:	2300      	movs	r3, #0
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fa36 	bl	80038bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f93f 	bl	80036d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e07b      	b.n	800355c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d034      	beq.n	8003508 <HAL_I2C_Mem_Write+0x1c8>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d130      	bne.n	8003508 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	2200      	movs	r2, #0
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f8d1 	bl	8003658 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e04d      	b.n	800355c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2bff      	cmp	r3, #255	; 0xff
 80034c8:	d90e      	bls.n	80034e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	22ff      	movs	r2, #255	; 0xff
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	8979      	ldrh	r1, [r7, #10]
 80034d8:	2300      	movs	r3, #0
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f9eb 	bl	80038bc <I2C_TransferConfig>
 80034e6:	e00f      	b.n	8003508 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	8979      	ldrh	r1, [r7, #10]
 80034fa:	2300      	movs	r3, #0
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f9da 	bl	80038bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d19e      	bne.n	8003450 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f91e 	bl	8003758 <I2C_WaitOnSTOPFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e01a      	b.n	800355c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2220      	movs	r2, #32
 800352c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_I2C_Mem_Write+0x224>)
 800353a:	400b      	ands	r3, r1
 800353c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	e000      	b.n	800355c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
  }
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	fe00e800 	.word	0xfe00e800

08003568 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	461a      	mov	r2, r3
 8003576:	4603      	mov	r3, r0
 8003578:	817b      	strh	r3, [r7, #10]
 800357a:	460b      	mov	r3, r1
 800357c:	813b      	strh	r3, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	8979      	ldrh	r1, [r7, #10]
 8003588:	4b20      	ldr	r3, [pc, #128]	; (800360c <I2C_RequestMemoryWrite+0xa4>)
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f993 	bl	80038bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	69b9      	ldr	r1, [r7, #24]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f89c 	bl	80036d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e02c      	b.n	8003604 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035b0:	893b      	ldrh	r3, [r7, #8]
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	629a      	str	r2, [r3, #40]	; 0x28
 80035ba:	e015      	b.n	80035e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035bc:	893b      	ldrh	r3, [r7, #8]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	69b9      	ldr	r1, [r7, #24]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f882 	bl	80036d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e012      	b.n	8003604 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035de:	893b      	ldrh	r3, [r7, #8]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2200      	movs	r2, #0
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f830 	bl	8003658 <I2C_WaitOnFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	80002000 	.word	0x80002000

08003610 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b02      	cmp	r3, #2
 8003624:	d103      	bne.n	800362e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	d007      	beq.n	800364c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	619a      	str	r2, [r3, #24]
  }
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003668:	e022      	b.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d01e      	beq.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003672:	f7fd fd1f 	bl	80010b4 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d302      	bcc.n	8003688 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d113      	bne.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e00f      	b.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4013      	ands	r3, r2
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d0cd      	beq.n	800366a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036e4:	e02c      	b.n	8003740 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f870 	bl	80037d0 <I2C_IsAcknowledgeFailed>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e02a      	b.n	8003750 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d01e      	beq.n	8003740 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fd fcd7 	bl	80010b4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d113      	bne.n	8003740 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e007      	b.n	8003750 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b02      	cmp	r3, #2
 800374c:	d1cb      	bne.n	80036e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003764:	e028      	b.n	80037b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f830 	bl	80037d0 <I2C_IsAcknowledgeFailed>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e026      	b.n	80037c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fd fc9b 	bl	80010b4 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d113      	bne.n	80037b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e007      	b.n	80037c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d1cf      	bne.n	8003766 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d161      	bne.n	80038ae <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037f8:	d02b      	beq.n	8003852 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003808:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800380a:	e022      	b.n	8003852 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003812:	d01e      	beq.n	8003852 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003814:	f7fd fc4e 	bl	80010b4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	429a      	cmp	r2, r3
 8003822:	d302      	bcc.n	800382a <I2C_IsAcknowledgeFailed+0x5a>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d113      	bne.n	8003852 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e02e      	b.n	80038b0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b20      	cmp	r3, #32
 800385e:	d1d5      	bne.n	800380c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2210      	movs	r2, #16
 8003866:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2220      	movs	r2, #32
 800386e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f7ff fecd 	bl	8003610 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <I2C_IsAcknowledgeFailed+0xe8>)
 8003882:	400b      	ands	r3, r1
 8003884:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f043 0204 	orr.w	r2, r3, #4
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	fe00e800 	.word	0xfe00e800

080038bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	817b      	strh	r3, [r7, #10]
 80038ca:	4613      	mov	r3, r2
 80038cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	0d5b      	lsrs	r3, r3, #21
 80038d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <I2C_TransferConfig+0x58>)
 80038de:	430b      	orrs	r3, r1
 80038e0:	43db      	mvns	r3, r3
 80038e2:	ea02 0103 	and.w	r1, r2, r3
 80038e6:	897b      	ldrh	r3, [r7, #10]
 80038e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038ec:	7a7b      	ldrb	r3, [r7, #9]
 80038ee:	041b      	lsls	r3, r3, #16
 80038f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	03ff63ff 	.word	0x03ff63ff

08003918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b20      	cmp	r3, #32
 800392c:	d138      	bne.n	80039a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003938:	2302      	movs	r3, #2
 800393a:	e032      	b.n	80039a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2224      	movs	r2, #36	; 0x24
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800396a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	e000      	b.n	80039a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039a0:	2302      	movs	r3, #2
  }
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d139      	bne.n	8003a38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e033      	b.n	8003a3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2224      	movs	r2, #36	; 0x24
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f001 b823 	b.w	8004ab4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 817d 	beq.w	8003d7e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a84:	4bbc      	ldr	r3, [pc, #752]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d00c      	beq.n	8003aaa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a90:	4bb9      	ldr	r3, [pc, #740]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d15c      	bne.n	8003b56 <HAL_RCC_OscConfig+0x10e>
 8003a9c:	4bb6      	ldr	r3, [pc, #728]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d155      	bne.n	8003b56 <HAL_RCC_OscConfig+0x10e>
 8003aaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003abe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d102      	bne.n	8003adc <HAL_RCC_OscConfig+0x94>
 8003ad6:	4ba8      	ldr	r3, [pc, #672]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	e015      	b.n	8003b08 <HAL_RCC_OscConfig+0xc0>
 8003adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ae0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003ae8:	fa93 f3a3 	rbit	r3, r3
 8003aec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003af8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003b04:	4b9c      	ldr	r3, [pc, #624]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b0c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003b10:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b14:	fa92 f2a2 	rbit	r2, r2
 8003b18:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003b1c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003b20:	fab2 f282 	clz	r2, r2
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	f042 0220 	orr.w	r2, r2, #32
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	f002 021f 	and.w	r2, r2, #31
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f202 	lsl.w	r2, r1, r2
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 811f 	beq.w	8003d7c <HAL_RCC_OscConfig+0x334>
 8003b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 8116 	bne.w	8003d7c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f000 bfaf 	b.w	8004ab4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b66:	d106      	bne.n	8003b76 <HAL_RCC_OscConfig+0x12e>
 8003b68:	4b83      	ldr	r3, [pc, #524]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a82      	ldr	r2, [pc, #520]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	e036      	b.n	8003be4 <HAL_RCC_OscConfig+0x19c>
 8003b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x158>
 8003b86:	4b7c      	ldr	r3, [pc, #496]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a7b      	ldr	r2, [pc, #492]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4b79      	ldr	r3, [pc, #484]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a78      	ldr	r2, [pc, #480]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e021      	b.n	8003be4 <HAL_RCC_OscConfig+0x19c>
 8003ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x184>
 8003bb2:	4b71      	ldr	r3, [pc, #452]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a70      	ldr	r2, [pc, #448]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b6e      	ldr	r3, [pc, #440]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6d      	ldr	r2, [pc, #436]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e00b      	b.n	8003be4 <HAL_RCC_OscConfig+0x19c>
 8003bcc:	4b6a      	ldr	r3, [pc, #424]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a69      	ldr	r2, [pc, #420]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	4b67      	ldr	r3, [pc, #412]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a66      	ldr	r2, [pc, #408]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003be4:	4b64      	ldr	r3, [pc, #400]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	f023 020f 	bic.w	r2, r3, #15
 8003bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	495f      	ldr	r1, [pc, #380]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d059      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fd fa51 	bl	80010b4 <HAL_GetTick>
 8003c12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fd fa4c 	bl	80010b4 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b64      	cmp	r3, #100	; 0x64
 8003c26:	d902      	bls.n	8003c2e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	f000 bf43 	b.w	8004ab4 <HAL_RCC_OscConfig+0x106c>
 8003c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c32:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003c42:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d102      	bne.n	8003c60 <HAL_RCC_OscConfig+0x218>
 8003c5a:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	e015      	b.n	8003c8c <HAL_RCC_OscConfig+0x244>
 8003c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c64:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c78:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c7c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003c80:	fa93 f3a3 	rbit	r3, r3
 8003c84:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003c88:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c90:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003c94:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c98:	fa92 f2a2 	rbit	r2, r2
 8003c9c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003ca0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003ca4:	fab2 f282 	clz	r2, r2
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	f042 0220 	orr.w	r2, r2, #32
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	f002 021f 	and.w	r2, r2, #31
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ab      	beq.n	8003c18 <HAL_RCC_OscConfig+0x1d0>
 8003cc0:	e05d      	b.n	8003d7e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fd f9f7 	bl	80010b4 <HAL_GetTick>
 8003cc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ccc:	f7fd f9f2 	bl	80010b4 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b64      	cmp	r3, #100	; 0x64
 8003cda:	d902      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	f000 bee9 	b.w	8004ab4 <HAL_RCC_OscConfig+0x106c>
 8003ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ce6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003cf6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d102      	bne.n	8003d14 <HAL_RCC_OscConfig+0x2cc>
 8003d0e:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	e015      	b.n	8003d40 <HAL_RCC_OscConfig+0x2f8>
 8003d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d18:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d2c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d30:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d34:	fa93 f3a3 	rbit	r3, r3
 8003d38:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_RCC_OscConfig+0x330>)
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d44:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003d48:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003d4c:	fa92 f2a2 	rbit	r2, r2
 8003d50:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003d54:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003d58:	fab2 f282 	clz	r2, r2
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	f042 0220 	orr.w	r2, r2, #32
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	f002 021f 	and.w	r2, r2, #31
 8003d68:	2101      	movs	r1, #1
 8003d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1ab      	bne.n	8003ccc <HAL_RCC_OscConfig+0x284>
 8003d74:	e003      	b.n	8003d7e <HAL_RCC_OscConfig+0x336>
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 817d 	beq.w	800408e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d94:	4ba6      	ldr	r3, [pc, #664]	; (8004030 <HAL_RCC_OscConfig+0x5e8>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 030c 	and.w	r3, r3, #12
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00b      	beq.n	8003db8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003da0:	4ba3      	ldr	r3, [pc, #652]	; (8004030 <HAL_RCC_OscConfig+0x5e8>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 030c 	and.w	r3, r3, #12
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d172      	bne.n	8003e92 <HAL_RCC_OscConfig+0x44a>
 8003dac:	4ba0      	ldr	r3, [pc, #640]	; (8004030 <HAL_RCC_OscConfig+0x5e8>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d16c      	bne.n	8003e92 <HAL_RCC_OscConfig+0x44a>
 8003db8:	2302      	movs	r3, #2
 8003dba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003dc2:	fa93 f3a3 	rbit	r3, r3
 8003dc6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003dca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dce:	fab3 f383 	clz	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d102      	bne.n	8003de8 <HAL_RCC_OscConfig+0x3a0>
 8003de2:	4b93      	ldr	r3, [pc, #588]	; (8004030 <HAL_RCC_OscConfig+0x5e8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	e013      	b.n	8003e10 <HAL_RCC_OscConfig+0x3c8>
 8003de8:	2302      	movs	r3, #2
 8003dea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003e00:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003e0c:	4b88      	ldr	r3, [pc, #544]	; (8004030 <HAL_RCC_OscConfig+0x5e8>)
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	2202      	movs	r2, #2
 8003e12:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003e16:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e1a:	fa92 f2a2 	rbit	r2, r2
 8003e1e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003e22:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003e26:	fab2 f282 	clz	r2, r2
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	f042 0220 	orr.w	r2, r2, #32
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	f002 021f 	and.w	r2, r2, #31
 8003e36:	2101      	movs	r1, #1
 8003e38:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCC_OscConfig+0x410>
 8003e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f000 be2e 	b.w	8004ab4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e58:	4b75      	ldr	r3, [pc, #468]	; (8004030 <HAL_RCC_OscConfig+0x5e8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	21f8      	movs	r1, #248	; 0xf8
 8003e6e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003e76:	fa91 f1a1 	rbit	r1, r1
 8003e7a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003e7e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003e82:	fab1 f181 	clz	r1, r1
 8003e86:	b2c9      	uxtb	r1, r1
 8003e88:	408b      	lsls	r3, r1
 8003e8a:	4969      	ldr	r1, [pc, #420]	; (8004030 <HAL_RCC_OscConfig+0x5e8>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e90:	e0fd      	b.n	800408e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8088 	beq.w	8003fb4 <HAL_RCC_OscConfig+0x56c>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003eae:	fa93 f3a3 	rbit	r3, r3
 8003eb2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003eb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ec4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2301      	movs	r3, #1
 8003ece:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fd f8f0 	bl	80010b4 <HAL_GetTick>
 8003ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eda:	f7fd f8eb 	bl	80010b4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d902      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	f000 bde2 	b.w	8004ab4 <HAL_RCC_OscConfig+0x106c>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003f02:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f06:	fab3 f383 	clz	r3, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d102      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4d8>
 8003f1a:	4b45      	ldr	r3, [pc, #276]	; (8004030 <HAL_RCC_OscConfig+0x5e8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	e013      	b.n	8003f48 <HAL_RCC_OscConfig+0x500>
 8003f20:	2302      	movs	r3, #2
 8003f22:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f32:	2302      	movs	r3, #2
 8003f34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f38:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003f3c:	fa93 f3a3 	rbit	r3, r3
 8003f40:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003f44:	4b3a      	ldr	r3, [pc, #232]	; (8004030 <HAL_RCC_OscConfig+0x5e8>)
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003f4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f52:	fa92 f2a2 	rbit	r2, r2
 8003f56:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003f5a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003f5e:	fab2 f282 	clz	r2, r2
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	f042 0220 	orr.w	r2, r2, #32
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	f002 021f 	and.w	r2, r2, #31
 8003f6e:	2101      	movs	r1, #1
 8003f70:	fa01 f202 	lsl.w	r2, r1, r2
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0af      	beq.n	8003eda <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7a:	4b2d      	ldr	r3, [pc, #180]	; (8004030 <HAL_RCC_OscConfig+0x5e8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	21f8      	movs	r1, #248	; 0xf8
 8003f90:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003f98:	fa91 f1a1 	rbit	r1, r1
 8003f9c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003fa0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003fa4:	fab1 f181 	clz	r1, r1
 8003fa8:	b2c9      	uxtb	r1, r1
 8003faa:	408b      	lsls	r3, r1
 8003fac:	4920      	ldr	r1, [pc, #128]	; (8004030 <HAL_RCC_OscConfig+0x5e8>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]
 8003fb2:	e06c      	b.n	800408e <HAL_RCC_OscConfig+0x646>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003fc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fd f868 	bl	80010b4 <HAL_GetTick>
 8003fe4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fea:	f7fd f863 	bl	80010b4 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d902      	bls.n	8004000 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	f000 bd5a 	b.w	8004ab4 <HAL_RCC_OscConfig+0x106c>
 8004000:	2302      	movs	r3, #2
 8004002:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b01      	cmp	r3, #1
 8004028:	d104      	bne.n	8004034 <HAL_RCC_OscConfig+0x5ec>
 800402a:	4b01      	ldr	r3, [pc, #4]	; (8004030 <HAL_RCC_OscConfig+0x5e8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	e015      	b.n	800405c <HAL_RCC_OscConfig+0x614>
 8004030:	40021000 	.word	0x40021000
 8004034:	2302      	movs	r3, #2
 8004036:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800403e:	fa93 f3a3 	rbit	r3, r3
 8004042:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004046:	2302      	movs	r3, #2
 8004048:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800404c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004058:	4bc8      	ldr	r3, [pc, #800]	; (800437c <HAL_RCC_OscConfig+0x934>)
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	2202      	movs	r2, #2
 800405e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004062:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004066:	fa92 f2a2 	rbit	r2, r2
 800406a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800406e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004072:	fab2 f282 	clz	r2, r2
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	f042 0220 	orr.w	r2, r2, #32
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	f002 021f 	and.w	r2, r2, #31
 8004082:	2101      	movs	r1, #1
 8004084:	fa01 f202 	lsl.w	r2, r1, r2
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ad      	bne.n	8003fea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 8110 	beq.w	80042c4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d079      	beq.n	80041a8 <HAL_RCC_OscConfig+0x760>
 80040b4:	2301      	movs	r3, #1
 80040b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040be:	fa93 f3a3 	rbit	r3, r3
 80040c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80040c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ca:	fab3 f383 	clz	r3, r3
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	4bab      	ldr	r3, [pc, #684]	; (8004380 <HAL_RCC_OscConfig+0x938>)
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	461a      	mov	r2, r3
 80040da:	2301      	movs	r3, #1
 80040dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040de:	f7fc ffe9 	bl	80010b4 <HAL_GetTick>
 80040e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e8:	f7fc ffe4 	bl	80010b4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d902      	bls.n	80040fe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	f000 bcdb 	b.w	8004ab4 <HAL_RCC_OscConfig+0x106c>
 80040fe:	2302      	movs	r3, #2
 8004100:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004108:	fa93 f3a3 	rbit	r3, r3
 800410c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004114:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004118:	2202      	movs	r2, #2
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004120:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	fa93 f2a3 	rbit	r2, r3
 800412a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800413c:	2202      	movs	r2, #2
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	fa93 f2a3 	rbit	r2, r3
 800414e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004152:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004156:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004158:	4b88      	ldr	r3, [pc, #544]	; (800437c <HAL_RCC_OscConfig+0x934>)
 800415a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004160:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004164:	2102      	movs	r1, #2
 8004166:	6019      	str	r1, [r3, #0]
 8004168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	fa93 f1a3 	rbit	r1, r3
 8004176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800417e:	6019      	str	r1, [r3, #0]
  return result;
 8004180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004184:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	2101      	movs	r1, #1
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0a0      	beq.n	80040e8 <HAL_RCC_OscConfig+0x6a0>
 80041a6:	e08d      	b.n	80042c4 <HAL_RCC_OscConfig+0x87c>
 80041a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	fa93 f2a3 	rbit	r2, r3
 80041c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80041ca:	601a      	str	r2, [r3, #0]
  return result;
 80041cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80041d4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	4b68      	ldr	r3, [pc, #416]	; (8004380 <HAL_RCC_OscConfig+0x938>)
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	461a      	mov	r2, r3
 80041e6:	2300      	movs	r3, #0
 80041e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ea:	f7fc ff63 	bl	80010b4 <HAL_GetTick>
 80041ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f2:	e00a      	b.n	800420a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f4:	f7fc ff5e 	bl	80010b4 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d902      	bls.n	800420a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	f000 bc55 	b.w	8004ab4 <HAL_RCC_OscConfig+0x106c>
 800420a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004212:	2202      	movs	r2, #2
 8004214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	fa93 f2a3 	rbit	r2, r3
 8004224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004228:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004232:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004236:	2202      	movs	r2, #2
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	fa93 f2a3 	rbit	r2, r3
 8004248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800425a:	2202      	movs	r2, #2
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	fa93 f2a3 	rbit	r2, r3
 800426c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004270:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004274:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004276:	4b41      	ldr	r3, [pc, #260]	; (800437c <HAL_RCC_OscConfig+0x934>)
 8004278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800427a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004282:	2102      	movs	r1, #2
 8004284:	6019      	str	r1, [r3, #0]
 8004286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	fa93 f1a3 	rbit	r1, r3
 8004294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004298:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800429c:	6019      	str	r1, [r3, #0]
  return result;
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	fab3 f383 	clz	r3, r3
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2101      	movs	r1, #1
 80042ba:	fa01 f303 	lsl.w	r3, r1, r3
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d197      	bne.n	80041f4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 81a1 	beq.w	800461c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e0:	4b26      	ldr	r3, [pc, #152]	; (800437c <HAL_RCC_OscConfig+0x934>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d116      	bne.n	800431a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ec:	4b23      	ldr	r3, [pc, #140]	; (800437c <HAL_RCC_OscConfig+0x934>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	4a22      	ldr	r2, [pc, #136]	; (800437c <HAL_RCC_OscConfig+0x934>)
 80042f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f6:	61d3      	str	r3, [r2, #28]
 80042f8:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCC_OscConfig+0x934>)
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004304:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004312:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <HAL_RCC_OscConfig+0x93c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11a      	bne.n	800435c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004326:	4b17      	ldr	r3, [pc, #92]	; (8004384 <HAL_RCC_OscConfig+0x93c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a16      	ldr	r2, [pc, #88]	; (8004384 <HAL_RCC_OscConfig+0x93c>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004330:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004332:	f7fc febf 	bl	80010b4 <HAL_GetTick>
 8004336:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433a:	e009      	b.n	8004350 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433c:	f7fc feba 	bl	80010b4 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b64      	cmp	r3, #100	; 0x64
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e3b1      	b.n	8004ab4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <HAL_RCC_OscConfig+0x93c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ef      	beq.n	800433c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800435c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d10d      	bne.n	8004388 <HAL_RCC_OscConfig+0x940>
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <HAL_RCC_OscConfig+0x934>)
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	4a02      	ldr	r2, [pc, #8]	; (800437c <HAL_RCC_OscConfig+0x934>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6213      	str	r3, [r2, #32]
 8004378:	e03c      	b.n	80043f4 <HAL_RCC_OscConfig+0x9ac>
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000
 8004380:	10908120 	.word	0x10908120
 8004384:	40007000 	.word	0x40007000
 8004388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10c      	bne.n	80043b2 <HAL_RCC_OscConfig+0x96a>
 8004398:	4bc1      	ldr	r3, [pc, #772]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	4ac0      	ldr	r2, [pc, #768]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	6213      	str	r3, [r2, #32]
 80043a4:	4bbe      	ldr	r3, [pc, #760]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	4abd      	ldr	r2, [pc, #756]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 80043aa:	f023 0304 	bic.w	r3, r3, #4
 80043ae:	6213      	str	r3, [r2, #32]
 80043b0:	e020      	b.n	80043f4 <HAL_RCC_OscConfig+0x9ac>
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b05      	cmp	r3, #5
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x994>
 80043c2:	4bb7      	ldr	r3, [pc, #732]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	4ab6      	ldr	r2, [pc, #728]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 80043c8:	f043 0304 	orr.w	r3, r3, #4
 80043cc:	6213      	str	r3, [r2, #32]
 80043ce:	4bb4      	ldr	r3, [pc, #720]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4ab3      	ldr	r2, [pc, #716]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6213      	str	r3, [r2, #32]
 80043da:	e00b      	b.n	80043f4 <HAL_RCC_OscConfig+0x9ac>
 80043dc:	4bb0      	ldr	r3, [pc, #704]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	4aaf      	ldr	r2, [pc, #700]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	6213      	str	r3, [r2, #32]
 80043e8:	4bad      	ldr	r3, [pc, #692]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	4aac      	ldr	r2, [pc, #688]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 80043ee:	f023 0304 	bic.w	r3, r3, #4
 80043f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8081 	beq.w	8004508 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004406:	f7fc fe55 	bl	80010b4 <HAL_GetTick>
 800440a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440e:	e00b      	b.n	8004428 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004410:	f7fc fe50 	bl	80010b4 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004420:	4293      	cmp	r3, r2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e345      	b.n	8004ab4 <HAL_RCC_OscConfig+0x106c>
 8004428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004430:	2202      	movs	r2, #2
 8004432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004438:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	fa93 f2a3 	rbit	r2, r3
 8004442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004446:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004450:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004454:	2202      	movs	r2, #2
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	fa93 f2a3 	rbit	r2, r3
 8004466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800446e:	601a      	str	r2, [r3, #0]
  return result;
 8004470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004474:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004478:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f043 0302 	orr.w	r3, r3, #2
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d102      	bne.n	8004494 <HAL_RCC_OscConfig+0xa4c>
 800448e:	4b84      	ldr	r3, [pc, #528]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	e013      	b.n	80044bc <HAL_RCC_OscConfig+0xa74>
 8004494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004498:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800449c:	2202      	movs	r2, #2
 800449e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	fa93 f2a3 	rbit	r2, r3
 80044ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	4b79      	ldr	r3, [pc, #484]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80044c4:	2102      	movs	r1, #2
 80044c6:	6011      	str	r1, [r2, #0]
 80044c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	fa92 f1a2 	rbit	r1, r2
 80044d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80044de:	6011      	str	r1, [r2, #0]
  return result;
 80044e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044e4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80044e8:	6812      	ldr	r2, [r2, #0]
 80044ea:	fab2 f282 	clz	r2, r2
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	f002 021f 	and.w	r2, r2, #31
 80044fa:	2101      	movs	r1, #1
 80044fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004500:	4013      	ands	r3, r2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d084      	beq.n	8004410 <HAL_RCC_OscConfig+0x9c8>
 8004506:	e07f      	b.n	8004608 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004508:	f7fc fdd4 	bl	80010b4 <HAL_GetTick>
 800450c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004510:	e00b      	b.n	800452a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7fc fdcf 	bl	80010b4 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e2c4      	b.n	8004ab4 <HAL_RCC_OscConfig+0x106c>
 800452a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004532:	2202      	movs	r2, #2
 8004534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	fa93 f2a3 	rbit	r2, r3
 8004544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004548:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004552:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004556:	2202      	movs	r2, #2
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800455e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	fa93 f2a3 	rbit	r2, r3
 8004568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004570:	601a      	str	r2, [r3, #0]
  return result;
 8004572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004576:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800457a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457c:	fab3 f383 	clz	r3, r3
 8004580:	b2db      	uxtb	r3, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f043 0302 	orr.w	r3, r3, #2
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d102      	bne.n	8004596 <HAL_RCC_OscConfig+0xb4e>
 8004590:	4b43      	ldr	r3, [pc, #268]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	e013      	b.n	80045be <HAL_RCC_OscConfig+0xb76>
 8004596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800459a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800459e:	2202      	movs	r2, #2
 80045a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	fa93 f2a3 	rbit	r2, r3
 80045b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80045c6:	2102      	movs	r1, #2
 80045c8:	6011      	str	r1, [r2, #0]
 80045ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	fa92 f1a2 	rbit	r1, r2
 80045d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80045e0:	6011      	str	r1, [r2, #0]
  return result;
 80045e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045e6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	fab2 f282 	clz	r2, r2
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	f002 021f 	and.w	r2, r2, #31
 80045fc:	2101      	movs	r1, #1
 80045fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d184      	bne.n	8004512 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004608:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800460c:	2b01      	cmp	r3, #1
 800460e:	d105      	bne.n	800461c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004610:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	4a22      	ldr	r2, [pc, #136]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 8004616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004620:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8242 	beq.w	8004ab2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800462e:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <HAL_RCC_OscConfig+0xc58>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b08      	cmp	r3, #8
 8004638:	f000 8213 	beq.w	8004a62 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800463c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004640:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	2b02      	cmp	r3, #2
 800464a:	f040 8162 	bne.w	8004912 <HAL_RCC_OscConfig+0xeca>
 800464e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004652:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004656:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800465a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004660:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	fa93 f2a3 	rbit	r2, r3
 800466a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004672:	601a      	str	r2, [r3, #0]
  return result;
 8004674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004678:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800467c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004688:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	461a      	mov	r2, r3
 8004690:	2300      	movs	r3, #0
 8004692:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fc fd0e 	bl	80010b4 <HAL_GetTick>
 8004698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800469c:	e00c      	b.n	80046b8 <HAL_RCC_OscConfig+0xc70>
 800469e:	bf00      	nop
 80046a0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fc fd06 	bl	80010b4 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e1fd      	b.n	8004ab4 <HAL_RCC_OscConfig+0x106c>
 80046b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80046c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	fa93 f2a3 	rbit	r2, r3
 80046d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046dc:	601a      	str	r2, [r3, #0]
  return result;
 80046de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e8:	fab3 f383 	clz	r3, r3
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d102      	bne.n	8004702 <HAL_RCC_OscConfig+0xcba>
 80046fc:	4bb0      	ldr	r3, [pc, #704]	; (80049c0 <HAL_RCC_OscConfig+0xf78>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	e027      	b.n	8004752 <HAL_RCC_OscConfig+0xd0a>
 8004702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004706:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800470a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800470e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004714:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	fa93 f2a3 	rbit	r2, r3
 800471e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004722:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	fa93 f2a3 	rbit	r2, r3
 8004744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004748:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	4b9c      	ldr	r3, [pc, #624]	; (80049c0 <HAL_RCC_OscConfig+0xf78>)
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004756:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800475a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800475e:	6011      	str	r1, [r2, #0]
 8004760:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004764:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	fa92 f1a2 	rbit	r1, r2
 800476e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004772:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004776:	6011      	str	r1, [r2, #0]
  return result;
 8004778:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800477c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	fab2 f282 	clz	r2, r2
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	f042 0220 	orr.w	r2, r2, #32
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	f002 021f 	and.w	r2, r2, #31
 8004792:	2101      	movs	r1, #1
 8004794:	fa01 f202 	lsl.w	r2, r1, r2
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d182      	bne.n	80046a4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800479e:	4b88      	ldr	r3, [pc, #544]	; (80049c0 <HAL_RCC_OscConfig+0xf78>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	430b      	orrs	r3, r1
 80047c0:	497f      	ldr	r1, [pc, #508]	; (80049c0 <HAL_RCC_OscConfig+0xf78>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	604b      	str	r3, [r1, #4]
 80047c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80047ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	fa93 f2a3 	rbit	r2, r3
 80047e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80047ea:	601a      	str	r2, [r3, #0]
  return result;
 80047ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80047f4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f6:	fab3 f383 	clz	r3, r3
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004800:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	461a      	mov	r2, r3
 8004808:	2301      	movs	r3, #1
 800480a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fc fc52 	bl	80010b4 <HAL_GetTick>
 8004810:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004814:	e009      	b.n	800482a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004816:	f7fc fc4d 	bl	80010b4 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e144      	b.n	8004ab4 <HAL_RCC_OscConfig+0x106c>
 800482a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004832:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	fa93 f2a3 	rbit	r2, r3
 8004846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800484e:	601a      	str	r2, [r3, #0]
  return result;
 8004850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004854:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004858:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	b2db      	uxtb	r3, r3
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	d102      	bne.n	8004874 <HAL_RCC_OscConfig+0xe2c>
 800486e:	4b54      	ldr	r3, [pc, #336]	; (80049c0 <HAL_RCC_OscConfig+0xf78>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	e027      	b.n	80048c4 <HAL_RCC_OscConfig+0xe7c>
 8004874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004878:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800487c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004886:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	fa93 f2a3 	rbit	r2, r3
 8004890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004894:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800489e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80048a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	fa93 f2a3 	rbit	r2, r3
 80048b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	4b3f      	ldr	r3, [pc, #252]	; (80049c0 <HAL_RCC_OscConfig+0xf78>)
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048c8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80048cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048d0:	6011      	str	r1, [r2, #0]
 80048d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048d6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	fa92 f1a2 	rbit	r1, r2
 80048e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048e4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80048e8:	6011      	str	r1, [r2, #0]
  return result;
 80048ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	fab2 f282 	clz	r2, r2
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	f042 0220 	orr.w	r2, r2, #32
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	f002 021f 	and.w	r2, r2, #31
 8004904:	2101      	movs	r1, #1
 8004906:	fa01 f202 	lsl.w	r2, r1, r2
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d082      	beq.n	8004816 <HAL_RCC_OscConfig+0xdce>
 8004910:	e0cf      	b.n	8004ab2 <HAL_RCC_OscConfig+0x106a>
 8004912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004916:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800491a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800491e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004924:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	fa93 f2a3 	rbit	r2, r3
 800492e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004932:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004936:	601a      	str	r2, [r3, #0]
  return result;
 8004938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004940:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004942:	fab3 f383 	clz	r3, r3
 8004946:	b2db      	uxtb	r3, r3
 8004948:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800494c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	461a      	mov	r2, r3
 8004954:	2300      	movs	r3, #0
 8004956:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7fc fbac 	bl	80010b4 <HAL_GetTick>
 800495c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004960:	e009      	b.n	8004976 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004962:	f7fc fba7 	bl	80010b4 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e09e      	b.n	8004ab4 <HAL_RCC_OscConfig+0x106c>
 8004976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800497e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004988:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	fa93 f2a3 	rbit	r2, r3
 8004992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004996:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800499a:	601a      	str	r2, [r3, #0]
  return result;
 800499c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80049a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049a6:	fab3 f383 	clz	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d104      	bne.n	80049c4 <HAL_RCC_OscConfig+0xf7c>
 80049ba:	4b01      	ldr	r3, [pc, #4]	; (80049c0 <HAL_RCC_OscConfig+0xf78>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	e029      	b.n	8004a14 <HAL_RCC_OscConfig+0xfcc>
 80049c0:	40021000 	.word	0x40021000
 80049c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80049cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	fa93 f2a3 	rbit	r2, r3
 80049e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80049f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	fa93 f2a3 	rbit	r2, r3
 8004a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <HAL_RCC_OscConfig+0x1078>)
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a18:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004a1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a20:	6011      	str	r1, [r2, #0]
 8004a22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a26:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	fa92 f1a2 	rbit	r1, r2
 8004a30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a34:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004a38:	6011      	str	r1, [r2, #0]
  return result;
 8004a3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a3e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	fab2 f282 	clz	r2, r2
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	f042 0220 	orr.w	r2, r2, #32
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	f002 021f 	and.w	r2, r2, #31
 8004a54:	2101      	movs	r1, #1
 8004a56:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d180      	bne.n	8004962 <HAL_RCC_OscConfig+0xf1a>
 8004a60:	e027      	b.n	8004ab2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e01e      	b.n	8004ab4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a76:	4b12      	ldr	r3, [pc, #72]	; (8004ac0 <HAL_RCC_OscConfig+0x1078>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004a82:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d10b      	bne.n	8004aae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004a96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004a9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d001      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40021000 	.word	0x40021000

08004ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b09e      	sub	sp, #120	; 0x78
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e162      	b.n	8004da2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004adc:	4b90      	ldr	r3, [pc, #576]	; (8004d20 <HAL_RCC_ClockConfig+0x25c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d910      	bls.n	8004b0c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aea:	4b8d      	ldr	r3, [pc, #564]	; (8004d20 <HAL_RCC_ClockConfig+0x25c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 0207 	bic.w	r2, r3, #7
 8004af2:	498b      	ldr	r1, [pc, #556]	; (8004d20 <HAL_RCC_ClockConfig+0x25c>)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b89      	ldr	r3, [pc, #548]	; (8004d20 <HAL_RCC_ClockConfig+0x25c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e14a      	b.n	8004da2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b18:	4b82      	ldr	r3, [pc, #520]	; (8004d24 <HAL_RCC_ClockConfig+0x260>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	497f      	ldr	r1, [pc, #508]	; (8004d24 <HAL_RCC_ClockConfig+0x260>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80dc 	beq.w	8004cf0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d13c      	bne.n	8004bba <HAL_RCC_ClockConfig+0xf6>
 8004b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b48:	fa93 f3a3 	rbit	r3, r3
 8004b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b50:	fab3 f383 	clz	r3, r3
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d102      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xa6>
 8004b64:	4b6f      	ldr	r3, [pc, #444]	; (8004d24 <HAL_RCC_ClockConfig+0x260>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	e00f      	b.n	8004b8a <HAL_RCC_ClockConfig+0xc6>
 8004b6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b72:	fa93 f3a3 	rbit	r3, r3
 8004b76:	667b      	str	r3, [r7, #100]	; 0x64
 8004b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b80:	fa93 f3a3 	rbit	r3, r3
 8004b84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b86:	4b67      	ldr	r3, [pc, #412]	; (8004d24 <HAL_RCC_ClockConfig+0x260>)
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b92:	fa92 f2a2 	rbit	r2, r2
 8004b96:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004b98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b9a:	fab2 f282 	clz	r2, r2
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	f042 0220 	orr.w	r2, r2, #32
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	f002 021f 	and.w	r2, r2, #31
 8004baa:	2101      	movs	r1, #1
 8004bac:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d17b      	bne.n	8004cae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e0f3      	b.n	8004da2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d13c      	bne.n	8004c3c <HAL_RCC_ClockConfig+0x178>
 8004bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bc6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bca:	fa93 f3a3 	rbit	r3, r3
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd2:	fab3 f383 	clz	r3, r3
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d102      	bne.n	8004bec <HAL_RCC_ClockConfig+0x128>
 8004be6:	4b4f      	ldr	r3, [pc, #316]	; (8004d24 <HAL_RCC_ClockConfig+0x260>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	e00f      	b.n	8004c0c <HAL_RCC_ClockConfig+0x148>
 8004bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bf0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf4:	fa93 f3a3 	rbit	r3, r3
 8004bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8004c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c02:	fa93 f3a3 	rbit	r3, r3
 8004c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c08:	4b46      	ldr	r3, [pc, #280]	; (8004d24 <HAL_RCC_ClockConfig+0x260>)
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c10:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c14:	fa92 f2a2 	rbit	r2, r2
 8004c18:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c1c:	fab2 f282 	clz	r2, r2
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	f042 0220 	orr.w	r2, r2, #32
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	f002 021f 	and.w	r2, r2, #31
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d13a      	bne.n	8004cae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0b2      	b.n	8004da2 <HAL_RCC_ClockConfig+0x2de>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	fa93 f3a3 	rbit	r3, r3
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4a:	fab3 f383 	clz	r3, r3
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	095b      	lsrs	r3, r3, #5
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d102      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x1a0>
 8004c5e:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <HAL_RCC_ClockConfig+0x260>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	e00d      	b.n	8004c80 <HAL_RCC_ClockConfig+0x1bc>
 8004c64:	2302      	movs	r3, #2
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	fa93 f3a3 	rbit	r3, r3
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c70:	2302      	movs	r3, #2
 8004c72:	623b      	str	r3, [r7, #32]
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <HAL_RCC_ClockConfig+0x260>)
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	2202      	movs	r2, #2
 8004c82:	61ba      	str	r2, [r7, #24]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	fa92 f2a2 	rbit	r2, r2
 8004c8a:	617a      	str	r2, [r7, #20]
  return result;
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	fab2 f282 	clz	r2, r2
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	f042 0220 	orr.w	r2, r2, #32
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	f002 021f 	and.w	r2, r2, #31
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e079      	b.n	8004da2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cae:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <HAL_RCC_ClockConfig+0x260>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f023 0203 	bic.w	r2, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	491a      	ldr	r1, [pc, #104]	; (8004d24 <HAL_RCC_ClockConfig+0x260>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc0:	f7fc f9f8 	bl	80010b4 <HAL_GetTick>
 8004cc4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc6:	e00a      	b.n	8004cde <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc8:	f7fc f9f4 	bl	80010b4 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e061      	b.n	8004da2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cde:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <HAL_RCC_ClockConfig+0x260>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 020c 	and.w	r2, r3, #12
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d1eb      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_RCC_ClockConfig+0x25c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d214      	bcs.n	8004d28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <HAL_RCC_ClockConfig+0x25c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 0207 	bic.w	r2, r3, #7
 8004d06:	4906      	ldr	r1, [pc, #24]	; (8004d20 <HAL_RCC_ClockConfig+0x25c>)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <HAL_RCC_ClockConfig+0x25c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e040      	b.n	8004da2 <HAL_RCC_ClockConfig+0x2de>
 8004d20:	40022000 	.word	0x40022000
 8004d24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d34:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <HAL_RCC_ClockConfig+0x2e8>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	491a      	ldr	r1, [pc, #104]	; (8004dac <HAL_RCC_ClockConfig+0x2e8>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d009      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d52:	4b16      	ldr	r3, [pc, #88]	; (8004dac <HAL_RCC_ClockConfig+0x2e8>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4912      	ldr	r1, [pc, #72]	; (8004dac <HAL_RCC_ClockConfig+0x2e8>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004d66:	f000 f829 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <HAL_RCC_ClockConfig+0x2e8>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d74:	22f0      	movs	r2, #240	; 0xf0
 8004d76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	fa92 f2a2 	rbit	r2, r2
 8004d7e:	60fa      	str	r2, [r7, #12]
  return result;
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	fab2 f282 	clz	r2, r2
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	40d3      	lsrs	r3, r2
 8004d8a:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <HAL_RCC_ClockConfig+0x2ec>)
 8004d8c:	5cd3      	ldrb	r3, [r2, r3]
 8004d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8004d92:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <HAL_RCC_ClockConfig+0x2f0>)
 8004d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004d96:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <HAL_RCC_ClockConfig+0x2f4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fc f946 	bl	800102c <HAL_InitTick>
  
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3778      	adds	r7, #120	; 0x78
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	08006eb4 	.word	0x08006eb4
 8004db4:	20000004 	.word	0x20000004
 8004db8:	20000008 	.word	0x20000008

08004dbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b08b      	sub	sp, #44	; 0x2c
 8004dc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004dd6:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f003 030c 	and.w	r3, r3, #12
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d002      	beq.n	8004dec <HAL_RCC_GetSysClockFreq+0x30>
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d003      	beq.n	8004df2 <HAL_RCC_GetSysClockFreq+0x36>
 8004dea:	e03c      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dec:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004dee:	623b      	str	r3, [r7, #32]
      break;
 8004df0:	e03c      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004df8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004dfc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	fa92 f2a2 	rbit	r2, r2
 8004e04:	607a      	str	r2, [r7, #4]
  return result;
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	fab2 f282 	clz	r2, r2
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	40d3      	lsrs	r3, r2
 8004e10:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004e12:	5cd3      	ldrb	r3, [r2, r3]
 8004e14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004e16:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	220f      	movs	r2, #15
 8004e20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	fa92 f2a2 	rbit	r2, r2
 8004e28:	60fa      	str	r2, [r7, #12]
  return result;
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	fab2 f282 	clz	r2, r2
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	40d3      	lsrs	r3, r2
 8004e34:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e36:	5cd3      	ldrb	r3, [r2, r3]
 8004e38:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e44:	4a0e      	ldr	r2, [pc, #56]	; (8004e80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
 8004e54:	e004      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	4a0c      	ldr	r2, [pc, #48]	; (8004e8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	623b      	str	r3, [r7, #32]
      break;
 8004e64:	e002      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e68:	623b      	str	r3, [r7, #32]
      break;
 8004e6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	372c      	adds	r7, #44	; 0x2c
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	007a1200 	.word	0x007a1200
 8004e84:	08006ecc 	.word	0x08006ecc
 8004e88:	08006edc 	.word	0x08006edc
 8004e8c:	003d0900 	.word	0x003d0900

08004e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e94:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e96:	681b      	ldr	r3, [r3, #0]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000004 	.word	0x20000004

08004ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004eae:	f7ff ffef 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ebc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ec0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	fa92 f2a2 	rbit	r2, r2
 8004ec8:	603a      	str	r2, [r7, #0]
  return result;
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	fab2 f282 	clz	r2, r2
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	40d3      	lsrs	r3, r2
 8004ed4:	4a04      	ldr	r2, [pc, #16]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004ed6:	5cd3      	ldrb	r3, [r2, r3]
 8004ed8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	08006ec4 	.word	0x08006ec4

08004eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004ef2:	f7ff ffcd 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8004ef6:	4601      	mov	r1, r0
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004f00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004f04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	fa92 f2a2 	rbit	r2, r2
 8004f0c:	603a      	str	r2, [r7, #0]
  return result;
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	fab2 f282 	clz	r2, r2
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	40d3      	lsrs	r3, r2
 8004f18:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004f1a:	5cd3      	ldrb	r3, [r2, r3]
 8004f1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	08006ec4 	.word	0x08006ec4

08004f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b092      	sub	sp, #72	; 0x48
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 80cd 	beq.w	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f54:	4b86      	ldr	r3, [pc, #536]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10e      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f60:	4b83      	ldr	r3, [pc, #524]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	4a82      	ldr	r2, [pc, #520]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	61d3      	str	r3, [r2, #28]
 8004f6c:	4b80      	ldr	r3, [pc, #512]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7e:	4b7d      	ldr	r3, [pc, #500]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d118      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f8a:	4b7a      	ldr	r3, [pc, #488]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a79      	ldr	r2, [pc, #484]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f96:	f7fc f88d 	bl	80010b4 <HAL_GetTick>
 8004f9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9e:	f7fc f889 	bl	80010b4 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b64      	cmp	r3, #100	; 0x64
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e0db      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb0:	4b70      	ldr	r3, [pc, #448]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fbc:	4b6c      	ldr	r3, [pc, #432]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d07d      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d076      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fda:	4b65      	ldr	r3, [pc, #404]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fe8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	fa93 f3a3 	rbit	r3, r3
 8004ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ff4:	fab3 f383 	clz	r3, r3
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4b5e      	ldr	r3, [pc, #376]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	461a      	mov	r2, r3
 8005004:	2301      	movs	r3, #1
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800500c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	fa93 f3a3 	rbit	r3, r3
 8005014:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005018:	fab3 f383 	clz	r3, r3
 800501c:	b2db      	uxtb	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	4b55      	ldr	r3, [pc, #340]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	461a      	mov	r2, r3
 8005028:	2300      	movs	r3, #0
 800502a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800502c:	4a50      	ldr	r2, [pc, #320]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d045      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503c:	f7fc f83a 	bl	80010b4 <HAL_GetTick>
 8005040:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005042:	e00a      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005044:	f7fc f836 	bl	80010b4 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e086      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800505a:	2302      	movs	r3, #2
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	fa93 f3a3 	rbit	r3, r3
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
 8005066:	2302      	movs	r3, #2
 8005068:	623b      	str	r3, [r7, #32]
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	fa93 f3a3 	rbit	r3, r3
 8005070:	61fb      	str	r3, [r7, #28]
  return result;
 8005072:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005074:	fab3 f383 	clz	r3, r3
 8005078:	b2db      	uxtb	r3, r3
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f043 0302 	orr.w	r3, r3, #2
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d102      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005088:	4b39      	ldr	r3, [pc, #228]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	e007      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800508e:	2302      	movs	r3, #2
 8005090:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	fa93 f3a3 	rbit	r3, r3
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	4b35      	ldr	r3, [pc, #212]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	2202      	movs	r2, #2
 80050a0:	613a      	str	r2, [r7, #16]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	fa92 f2a2 	rbit	r2, r2
 80050a8:	60fa      	str	r2, [r7, #12]
  return result;
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	fab2 f282 	clz	r2, r2
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	f002 021f 	and.w	r2, r2, #31
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f202 	lsl.w	r2, r1, r2
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0bd      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80050c8:	4b29      	ldr	r3, [pc, #164]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	4926      	ldr	r1, [pc, #152]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d105      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e2:	4b23      	ldr	r3, [pc, #140]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	4a22      	ldr	r2, [pc, #136]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	f023 0203 	bic.w	r2, r3, #3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	491a      	ldr	r1, [pc, #104]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005108:	4313      	orrs	r3, r2
 800510a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005118:	4b15      	ldr	r3, [pc, #84]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	f023 0210 	bic.w	r2, r3, #16
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4912      	ldr	r1, [pc, #72]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005126:	4313      	orrs	r3, r2
 8005128:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005136:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	490b      	ldr	r1, [pc, #44]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005144:	4313      	orrs	r3, r2
 8005146:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005154:	4b06      	ldr	r3, [pc, #24]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	4903      	ldr	r1, [pc, #12]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005162:	4313      	orrs	r3, r2
 8005164:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3748      	adds	r7, #72	; 0x48
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000
 8005174:	40007000 	.word	0x40007000
 8005178:	10908100 	.word	0x10908100

0800517c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e049      	b.n	8005222 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fb fe18 	bl	8000dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3304      	adds	r3, #4
 80051b8:	4619      	mov	r1, r3
 80051ba:	4610      	mov	r0, r2
 80051bc:	f000 fc86 	bl	8005acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	d001      	beq.n	8005244 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e038      	b.n	80052b6 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1c      	ldr	r2, [pc, #112]	; (80052c4 <HAL_TIM_Base_Start+0x98>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00e      	beq.n	8005274 <HAL_TIM_Base_Start+0x48>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525e:	d009      	beq.n	8005274 <HAL_TIM_Base_Start+0x48>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <HAL_TIM_Base_Start+0x9c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d004      	beq.n	8005274 <HAL_TIM_Base_Start+0x48>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a17      	ldr	r2, [pc, #92]	; (80052cc <HAL_TIM_Base_Start+0xa0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d115      	bne.n	80052a0 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <HAL_TIM_Base_Start+0xa4>)
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b06      	cmp	r3, #6
 8005284:	d015      	beq.n	80052b2 <HAL_TIM_Base_Start+0x86>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528c:	d011      	beq.n	80052b2 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0201 	orr.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529e:	e008      	b.n	80052b2 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	e000      	b.n	80052b4 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40014000 	.word	0x40014000
 80052d0:	00010007 	.word	0x00010007

080052d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d001      	beq.n	80052ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e040      	b.n	800536e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1c      	ldr	r2, [pc, #112]	; (800537c <HAL_TIM_Base_Start_IT+0xa8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00e      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x58>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005316:	d009      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x58>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a18      	ldr	r2, [pc, #96]	; (8005380 <HAL_TIM_Base_Start_IT+0xac>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d004      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x58>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a17      	ldr	r2, [pc, #92]	; (8005384 <HAL_TIM_Base_Start_IT+0xb0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d115      	bne.n	8005358 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <HAL_TIM_Base_Start_IT+0xb4>)
 8005334:	4013      	ands	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b06      	cmp	r3, #6
 800533c:	d015      	beq.n	800536a <HAL_TIM_Base_Start_IT+0x96>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005344:	d011      	beq.n	800536a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005356:	e008      	b.n	800536a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	e000      	b.n	800536c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40000400 	.word	0x40000400
 8005384:	40014000 	.word	0x40014000
 8005388:	00010007 	.word	0x00010007

0800538c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e049      	b.n	8005432 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fb fcea 	bl	8000d8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3304      	adds	r3, #4
 80053c8:	4619      	mov	r1, r3
 80053ca:	4610      	mov	r0, r2
 80053cc:	f000 fb7e 	bl	8005acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d109      	bne.n	8005460 <HAL_TIM_PWM_Start+0x24>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b01      	cmp	r3, #1
 8005456:	bf14      	ite	ne
 8005458:	2301      	movne	r3, #1
 800545a:	2300      	moveq	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	e03c      	b.n	80054da <HAL_TIM_PWM_Start+0x9e>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b04      	cmp	r3, #4
 8005464:	d109      	bne.n	800547a <HAL_TIM_PWM_Start+0x3e>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b01      	cmp	r3, #1
 8005470:	bf14      	ite	ne
 8005472:	2301      	movne	r3, #1
 8005474:	2300      	moveq	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	e02f      	b.n	80054da <HAL_TIM_PWM_Start+0x9e>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b08      	cmp	r3, #8
 800547e:	d109      	bne.n	8005494 <HAL_TIM_PWM_Start+0x58>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	bf14      	ite	ne
 800548c:	2301      	movne	r3, #1
 800548e:	2300      	moveq	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	e022      	b.n	80054da <HAL_TIM_PWM_Start+0x9e>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b0c      	cmp	r3, #12
 8005498:	d109      	bne.n	80054ae <HAL_TIM_PWM_Start+0x72>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	bf14      	ite	ne
 80054a6:	2301      	movne	r3, #1
 80054a8:	2300      	moveq	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	e015      	b.n	80054da <HAL_TIM_PWM_Start+0x9e>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	d109      	bne.n	80054c8 <HAL_TIM_PWM_Start+0x8c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	bf14      	ite	ne
 80054c0:	2301      	movne	r3, #1
 80054c2:	2300      	moveq	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	e008      	b.n	80054da <HAL_TIM_PWM_Start+0x9e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e088      	b.n	80055f4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_PWM_Start+0xb6>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f0:	e023      	b.n	800553a <HAL_TIM_PWM_Start+0xfe>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_PWM_Start+0xc6>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005500:	e01b      	b.n	800553a <HAL_TIM_PWM_Start+0xfe>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d104      	bne.n	8005512 <HAL_TIM_PWM_Start+0xd6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005510:	e013      	b.n	800553a <HAL_TIM_PWM_Start+0xfe>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b0c      	cmp	r3, #12
 8005516:	d104      	bne.n	8005522 <HAL_TIM_PWM_Start+0xe6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005520:	e00b      	b.n	800553a <HAL_TIM_PWM_Start+0xfe>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b10      	cmp	r3, #16
 8005526:	d104      	bne.n	8005532 <HAL_TIM_PWM_Start+0xf6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005530:	e003      	b.n	800553a <HAL_TIM_PWM_Start+0xfe>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2201      	movs	r2, #1
 8005540:	6839      	ldr	r1, [r7, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fde0 	bl	8006108 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a2b      	ldr	r2, [pc, #172]	; (80055fc <HAL_TIM_PWM_Start+0x1c0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00e      	beq.n	8005570 <HAL_TIM_PWM_Start+0x134>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <HAL_TIM_PWM_Start+0x1c4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d009      	beq.n	8005570 <HAL_TIM_PWM_Start+0x134>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a28      	ldr	r2, [pc, #160]	; (8005604 <HAL_TIM_PWM_Start+0x1c8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_TIM_PWM_Start+0x134>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a27      	ldr	r2, [pc, #156]	; (8005608 <HAL_TIM_PWM_Start+0x1cc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d101      	bne.n	8005574 <HAL_TIM_PWM_Start+0x138>
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <HAL_TIM_PWM_Start+0x13a>
 8005574:	2300      	movs	r3, #0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005588:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1b      	ldr	r2, [pc, #108]	; (80055fc <HAL_TIM_PWM_Start+0x1c0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_TIM_PWM_Start+0x176>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559c:	d009      	beq.n	80055b2 <HAL_TIM_PWM_Start+0x176>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1a      	ldr	r2, [pc, #104]	; (800560c <HAL_TIM_PWM_Start+0x1d0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_TIM_PWM_Start+0x176>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a14      	ldr	r2, [pc, #80]	; (8005600 <HAL_TIM_PWM_Start+0x1c4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d115      	bne.n	80055de <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <HAL_TIM_PWM_Start+0x1d4>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b06      	cmp	r3, #6
 80055c2:	d015      	beq.n	80055f0 <HAL_TIM_PWM_Start+0x1b4>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ca:	d011      	beq.n	80055f0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055dc:	e008      	b.n	80055f0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0201 	orr.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	e000      	b.n	80055f2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40014000 	.word	0x40014000
 8005604:	40014400 	.word	0x40014400
 8005608:	40014800 	.word	0x40014800
 800560c:	40000400 	.word	0x40000400
 8005610:	00010007 	.word	0x00010007

08005614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b02      	cmp	r3, #2
 8005628:	d122      	bne.n	8005670 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b02      	cmp	r3, #2
 8005636:	d11b      	bne.n	8005670 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0202 	mvn.w	r2, #2
 8005640:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa1a 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa0c 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa1d 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b04      	cmp	r3, #4
 800567c:	d122      	bne.n	80056c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b04      	cmp	r3, #4
 800568a:	d11b      	bne.n	80056c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0204 	mvn.w	r2, #4
 8005694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f9f0 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
 80056b0:	e005      	b.n	80056be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f9e2 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f9f3 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d122      	bne.n	8005718 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d11b      	bne.n	8005718 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0208 	mvn.w	r2, #8
 80056e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2204      	movs	r2, #4
 80056ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f9c6 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
 8005704:	e005      	b.n	8005712 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f9b8 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f9c9 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b10      	cmp	r3, #16
 8005724:	d122      	bne.n	800576c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	2b10      	cmp	r3, #16
 8005732:	d11b      	bne.n	800576c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0210 	mvn.w	r2, #16
 800573c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2208      	movs	r2, #8
 8005742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f99c 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
 8005758:	e005      	b.n	8005766 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f98e 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f99f 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b01      	cmp	r3, #1
 8005778:	d10e      	bne.n	8005798 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b01      	cmp	r3, #1
 8005786:	d107      	bne.n	8005798 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0201 	mvn.w	r2, #1
 8005790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fb f8a4 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a2:	2b80      	cmp	r3, #128	; 0x80
 80057a4:	d10e      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b0:	2b80      	cmp	r3, #128	; 0x80
 80057b2:	d107      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fe5e 	bl	8006480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d2:	d10e      	bne.n	80057f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057de:	2b80      	cmp	r3, #128	; 0x80
 80057e0:	d107      	bne.n	80057f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fe51 	bl	8006494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	d10e      	bne.n	800581e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580a:	2b40      	cmp	r3, #64	; 0x40
 800580c:	d107      	bne.n	800581e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f94d 	bl	8005ab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b20      	cmp	r3, #32
 800582a:	d10e      	bne.n	800584a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b20      	cmp	r3, #32
 8005838:	d107      	bne.n	800584a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f06f 0220 	mvn.w	r2, #32
 8005842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fe11 	bl	800646c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800584a:	bf00      	nop
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800586e:	2302      	movs	r3, #2
 8005870:	e0ff      	b.n	8005a72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b14      	cmp	r3, #20
 800587e:	f200 80f0 	bhi.w	8005a62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058dd 	.word	0x080058dd
 800588c:	08005a63 	.word	0x08005a63
 8005890:	08005a63 	.word	0x08005a63
 8005894:	08005a63 	.word	0x08005a63
 8005898:	0800591d 	.word	0x0800591d
 800589c:	08005a63 	.word	0x08005a63
 80058a0:	08005a63 	.word	0x08005a63
 80058a4:	08005a63 	.word	0x08005a63
 80058a8:	0800595f 	.word	0x0800595f
 80058ac:	08005a63 	.word	0x08005a63
 80058b0:	08005a63 	.word	0x08005a63
 80058b4:	08005a63 	.word	0x08005a63
 80058b8:	0800599f 	.word	0x0800599f
 80058bc:	08005a63 	.word	0x08005a63
 80058c0:	08005a63 	.word	0x08005a63
 80058c4:	08005a63 	.word	0x08005a63
 80058c8:	080059e1 	.word	0x080059e1
 80058cc:	08005a63 	.word	0x08005a63
 80058d0:	08005a63 	.word	0x08005a63
 80058d4:	08005a63 	.word	0x08005a63
 80058d8:	08005a21 	.word	0x08005a21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 f96a 	bl	8005bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0208 	orr.w	r2, r2, #8
 80058f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0204 	bic.w	r2, r2, #4
 8005906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6999      	ldr	r1, [r3, #24]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	619a      	str	r2, [r3, #24]
      break;
 800591a:	e0a5      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 f9d0 	bl	8005cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6999      	ldr	r1, [r3, #24]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	021a      	lsls	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	619a      	str	r2, [r3, #24]
      break;
 800595c:	e084      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fa2f 	bl	8005dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0208 	orr.w	r2, r2, #8
 8005978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0204 	bic.w	r2, r2, #4
 8005988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69d9      	ldr	r1, [r3, #28]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	61da      	str	r2, [r3, #28]
      break;
 800599c:	e064      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fa8d 	bl	8005ec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69da      	ldr	r2, [r3, #28]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69d9      	ldr	r1, [r3, #28]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	021a      	lsls	r2, r3, #8
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	61da      	str	r2, [r3, #28]
      break;
 80059de:	e043      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fad0 	bl	8005f8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0208 	orr.w	r2, r2, #8
 80059fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0204 	bic.w	r2, r2, #4
 8005a0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a1e:	e023      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fb0e 	bl	8006048 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	021a      	lsls	r2, r3, #8
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a60:	e002      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	75fb      	strb	r3, [r7, #23]
      break;
 8005a66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop

08005a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a32      	ldr	r2, [pc, #200]	; (8005ba8 <TIM_Base_SetConfig+0xdc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d007      	beq.n	8005af4 <TIM_Base_SetConfig+0x28>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aea:	d003      	beq.n	8005af4 <TIM_Base_SetConfig+0x28>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a2f      	ldr	r2, [pc, #188]	; (8005bac <TIM_Base_SetConfig+0xe0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d108      	bne.n	8005b06 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a27      	ldr	r2, [pc, #156]	; (8005ba8 <TIM_Base_SetConfig+0xdc>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <TIM_Base_SetConfig+0x6a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b14:	d00f      	beq.n	8005b36 <TIM_Base_SetConfig+0x6a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a24      	ldr	r2, [pc, #144]	; (8005bac <TIM_Base_SetConfig+0xe0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00b      	beq.n	8005b36 <TIM_Base_SetConfig+0x6a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a23      	ldr	r2, [pc, #140]	; (8005bb0 <TIM_Base_SetConfig+0xe4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d007      	beq.n	8005b36 <TIM_Base_SetConfig+0x6a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <TIM_Base_SetConfig+0xe8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_Base_SetConfig+0x6a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a21      	ldr	r2, [pc, #132]	; (8005bb8 <TIM_Base_SetConfig+0xec>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d108      	bne.n	8005b48 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a0e      	ldr	r2, [pc, #56]	; (8005ba8 <TIM_Base_SetConfig+0xdc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_Base_SetConfig+0xc0>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a0e      	ldr	r2, [pc, #56]	; (8005bb0 <TIM_Base_SetConfig+0xe4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_Base_SetConfig+0xc0>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a0d      	ldr	r2, [pc, #52]	; (8005bb4 <TIM_Base_SetConfig+0xe8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_Base_SetConfig+0xc0>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a0c      	ldr	r2, [pc, #48]	; (8005bb8 <TIM_Base_SetConfig+0xec>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d103      	bne.n	8005b94 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	615a      	str	r2, [r3, #20]
}
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40014000 	.word	0x40014000
 8005bb4:	40014400 	.word	0x40014400
 8005bb8:	40014800 	.word	0x40014800

08005bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f023 0201 	bic.w	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0303 	bic.w	r3, r3, #3
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f023 0302 	bic.w	r3, r3, #2
 8005c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a28      	ldr	r2, [pc, #160]	; (8005cb8 <TIM_OC1_SetConfig+0xfc>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00b      	beq.n	8005c34 <TIM_OC1_SetConfig+0x78>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a27      	ldr	r2, [pc, #156]	; (8005cbc <TIM_OC1_SetConfig+0x100>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d007      	beq.n	8005c34 <TIM_OC1_SetConfig+0x78>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <TIM_OC1_SetConfig+0x104>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_OC1_SetConfig+0x78>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a25      	ldr	r2, [pc, #148]	; (8005cc4 <TIM_OC1_SetConfig+0x108>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d10c      	bne.n	8005c4e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 0308 	bic.w	r3, r3, #8
 8005c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 0304 	bic.w	r3, r3, #4
 8005c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a19      	ldr	r2, [pc, #100]	; (8005cb8 <TIM_OC1_SetConfig+0xfc>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00b      	beq.n	8005c6e <TIM_OC1_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a18      	ldr	r2, [pc, #96]	; (8005cbc <TIM_OC1_SetConfig+0x100>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d007      	beq.n	8005c6e <TIM_OC1_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a17      	ldr	r2, [pc, #92]	; (8005cc0 <TIM_OC1_SetConfig+0x104>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_OC1_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a16      	ldr	r2, [pc, #88]	; (8005cc4 <TIM_OC1_SetConfig+0x108>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d111      	bne.n	8005c92 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	621a      	str	r2, [r3, #32]
}
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	40012c00 	.word	0x40012c00
 8005cbc:	40014000 	.word	0x40014000
 8005cc0:	40014400 	.word	0x40014400
 8005cc4:	40014800 	.word	0x40014800

08005cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f023 0210 	bic.w	r2, r3, #16
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0320 	bic.w	r3, r3, #32
 8005d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a24      	ldr	r2, [pc, #144]	; (8005db8 <TIM_OC2_SetConfig+0xf0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10d      	bne.n	8005d48 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <TIM_OC2_SetConfig+0xf0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00b      	beq.n	8005d68 <TIM_OC2_SetConfig+0xa0>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <TIM_OC2_SetConfig+0xf4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d007      	beq.n	8005d68 <TIM_OC2_SetConfig+0xa0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <TIM_OC2_SetConfig+0xf8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC2_SetConfig+0xa0>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a18      	ldr	r2, [pc, #96]	; (8005dc4 <TIM_OC2_SetConfig+0xfc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d113      	bne.n	8005d90 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d6e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d76:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40014400 	.word	0x40014400
 8005dc4:	40014800 	.word	0x40014800

08005dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	021b      	lsls	r3, r3, #8
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a23      	ldr	r2, [pc, #140]	; (8005eb4 <TIM_OC3_SetConfig+0xec>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d10d      	bne.n	8005e46 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e44:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a1a      	ldr	r2, [pc, #104]	; (8005eb4 <TIM_OC3_SetConfig+0xec>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00b      	beq.n	8005e66 <TIM_OC3_SetConfig+0x9e>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a19      	ldr	r2, [pc, #100]	; (8005eb8 <TIM_OC3_SetConfig+0xf0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d007      	beq.n	8005e66 <TIM_OC3_SetConfig+0x9e>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a18      	ldr	r2, [pc, #96]	; (8005ebc <TIM_OC3_SetConfig+0xf4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d003      	beq.n	8005e66 <TIM_OC3_SetConfig+0x9e>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <TIM_OC3_SetConfig+0xf8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d113      	bne.n	8005e8e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	621a      	str	r2, [r3, #32]
}
 8005ea8:	bf00      	nop
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800

08005ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	031b      	lsls	r3, r3, #12
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <TIM_OC4_SetConfig+0xb8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00b      	beq.n	8005f40 <TIM_OC4_SetConfig+0x7c>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <TIM_OC4_SetConfig+0xbc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d007      	beq.n	8005f40 <TIM_OC4_SetConfig+0x7c>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a14      	ldr	r2, [pc, #80]	; (8005f84 <TIM_OC4_SetConfig+0xc0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_OC4_SetConfig+0x7c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <TIM_OC4_SetConfig+0xc4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d109      	bne.n	8005f54 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	019b      	lsls	r3, r3, #6
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	40014000 	.word	0x40014000
 8005f84:	40014400 	.word	0x40014400
 8005f88:	40014800 	.word	0x40014800

08005f8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	041b      	lsls	r3, r3, #16
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a15      	ldr	r2, [pc, #84]	; (8006038 <TIM_OC5_SetConfig+0xac>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00b      	beq.n	8005ffe <TIM_OC5_SetConfig+0x72>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a14      	ldr	r2, [pc, #80]	; (800603c <TIM_OC5_SetConfig+0xb0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d007      	beq.n	8005ffe <TIM_OC5_SetConfig+0x72>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a13      	ldr	r2, [pc, #76]	; (8006040 <TIM_OC5_SetConfig+0xb4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d003      	beq.n	8005ffe <TIM_OC5_SetConfig+0x72>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a12      	ldr	r2, [pc, #72]	; (8006044 <TIM_OC5_SetConfig+0xb8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d109      	bne.n	8006012 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006004:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	021b      	lsls	r3, r3, #8
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	621a      	str	r2, [r3, #32]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	40012c00 	.word	0x40012c00
 800603c:	40014000 	.word	0x40014000
 8006040:	40014400 	.word	0x40014400
 8006044:	40014800 	.word	0x40014800

08006048 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800608e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	051b      	lsls	r3, r3, #20
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a16      	ldr	r2, [pc, #88]	; (80060f8 <TIM_OC6_SetConfig+0xb0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00b      	beq.n	80060bc <TIM_OC6_SetConfig+0x74>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a15      	ldr	r2, [pc, #84]	; (80060fc <TIM_OC6_SetConfig+0xb4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d007      	beq.n	80060bc <TIM_OC6_SetConfig+0x74>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a14      	ldr	r2, [pc, #80]	; (8006100 <TIM_OC6_SetConfig+0xb8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC6_SetConfig+0x74>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a13      	ldr	r2, [pc, #76]	; (8006104 <TIM_OC6_SetConfig+0xbc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d109      	bne.n	80060d0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	029b      	lsls	r3, r3, #10
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40014000 	.word	0x40014000
 8006100:	40014400 	.word	0x40014400
 8006104:	40014800 	.word	0x40014800

08006108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	2201      	movs	r2, #1
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a1a      	ldr	r2, [r3, #32]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	43db      	mvns	r3, r3
 800612a:	401a      	ands	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a1a      	ldr	r2, [r3, #32]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f003 031f 	and.w	r3, r3, #31
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	fa01 f303 	lsl.w	r3, r1, r3
 8006140:	431a      	orrs	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <HAL_TIMEx_PWMN_Start+0x24>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b01      	cmp	r3, #1
 800616e:	bf14      	ite	ne
 8006170:	2301      	movne	r3, #1
 8006172:	2300      	moveq	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	e022      	b.n	80061be <HAL_TIMEx_PWMN_Start+0x6a>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b04      	cmp	r3, #4
 800617c:	d109      	bne.n	8006192 <HAL_TIMEx_PWMN_Start+0x3e>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b01      	cmp	r3, #1
 8006188:	bf14      	ite	ne
 800618a:	2301      	movne	r3, #1
 800618c:	2300      	moveq	r3, #0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	e015      	b.n	80061be <HAL_TIMEx_PWMN_Start+0x6a>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b08      	cmp	r3, #8
 8006196:	d109      	bne.n	80061ac <HAL_TIMEx_PWMN_Start+0x58>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	bf14      	ite	ne
 80061a4:	2301      	movne	r3, #1
 80061a6:	2300      	moveq	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	e008      	b.n	80061be <HAL_TIMEx_PWMN_Start+0x6a>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	bf14      	ite	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	2300      	moveq	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e05f      	b.n	8006286 <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d104      	bne.n	80061d6 <HAL_TIMEx_PWMN_Start+0x82>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d4:	e013      	b.n	80061fe <HAL_TIMEx_PWMN_Start+0xaa>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d104      	bne.n	80061e6 <HAL_TIMEx_PWMN_Start+0x92>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061e4:	e00b      	b.n	80061fe <HAL_TIMEx_PWMN_Start+0xaa>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d104      	bne.n	80061f6 <HAL_TIMEx_PWMN_Start+0xa2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061f4:	e003      	b.n	80061fe <HAL_TIMEx_PWMN_Start+0xaa>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2202      	movs	r2, #2
 80061fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2204      	movs	r2, #4
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	4618      	mov	r0, r3
 8006208:	f000 f94e 	bl	80064a8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800621a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <HAL_TIMEx_PWMN_Start+0x13c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00e      	beq.n	8006244 <HAL_TIMEx_PWMN_Start+0xf0>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622e:	d009      	beq.n	8006244 <HAL_TIMEx_PWMN_Start+0xf0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a17      	ldr	r2, [pc, #92]	; (8006294 <HAL_TIMEx_PWMN_Start+0x140>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_TIMEx_PWMN_Start+0xf0>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a16      	ldr	r2, [pc, #88]	; (8006298 <HAL_TIMEx_PWMN_Start+0x144>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d115      	bne.n	8006270 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	4b14      	ldr	r3, [pc, #80]	; (800629c <HAL_TIMEx_PWMN_Start+0x148>)
 800624c:	4013      	ands	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b06      	cmp	r3, #6
 8006254:	d015      	beq.n	8006282 <HAL_TIMEx_PWMN_Start+0x12e>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800625c:	d011      	beq.n	8006282 <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0201 	orr.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626e:	e008      	b.n	8006282 <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e000      	b.n	8006284 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006282:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	40012c00 	.word	0x40012c00
 8006294:	40000400 	.word	0x40000400
 8006298:	40014000 	.word	0x40014000
 800629c:	00010007 	.word	0x00010007

080062a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e054      	b.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a24      	ldr	r2, [pc, #144]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d108      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a17      	ldr	r2, [pc, #92]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00e      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006320:	d009      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a13      	ldr	r2, [pc, #76]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d004      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a11      	ldr	r2, [pc, #68]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d10c      	bne.n	8006350 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800633c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	4313      	orrs	r3, r2
 8006346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40000400 	.word	0x40000400
 8006378:	40014000 	.word	0x40014000

0800637c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006394:	2302      	movs	r3, #2
 8006396:	e060      	b.n	800645a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	041b      	lsls	r3, r3, #16
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a14      	ldr	r2, [pc, #80]	; (8006468 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d115      	bne.n	8006448 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	051b      	lsls	r3, r3, #20
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40012c00 	.word	0x40012c00

0800646c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f003 031f 	and.w	r3, r3, #31
 80064ba:	2204      	movs	r2, #4
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1a      	ldr	r2, [r3, #32]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	43db      	mvns	r3, r3
 80064ca:	401a      	ands	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1a      	ldr	r2, [r3, #32]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	fa01 f303 	lsl.w	r3, r1, r3
 80064e0:	431a      	orrs	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e040      	b.n	8006586 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006508:	2b00      	cmp	r3, #0
 800650a:	d106      	bne.n	800651a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7fa fd05 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2224      	movs	r2, #36	; 0x24
 800651e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f82d 	bl	8006590 <UART_SetConfig>
 8006536:	4603      	mov	r3, r0
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e022      	b.n	8006586 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f957 	bl	80067fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800655c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800656c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0201 	orr.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f9de 	bl	8006940 <UART_CheckIdleState>
 8006584:	4603      	mov	r3, r0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4b8a      	ldr	r3, [pc, #552]	; (80067e4 <UART_SetConfig+0x254>)
 80065bc:	4013      	ands	r3, r2
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	6979      	ldr	r1, [r7, #20]
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	430a      	orrs	r2, r1
 8006600:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a78      	ldr	r2, [pc, #480]	; (80067e8 <UART_SetConfig+0x258>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d120      	bne.n	800664e <UART_SetConfig+0xbe>
 800660c:	4b77      	ldr	r3, [pc, #476]	; (80067ec <UART_SetConfig+0x25c>)
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	f003 0303 	and.w	r3, r3, #3
 8006614:	2b03      	cmp	r3, #3
 8006616:	d817      	bhi.n	8006648 <UART_SetConfig+0xb8>
 8006618:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <UART_SetConfig+0x90>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	08006631 	.word	0x08006631
 8006624:	0800663d 	.word	0x0800663d
 8006628:	08006643 	.word	0x08006643
 800662c:	08006637 	.word	0x08006637
 8006630:	2300      	movs	r3, #0
 8006632:	77fb      	strb	r3, [r7, #31]
 8006634:	e01d      	b.n	8006672 <UART_SetConfig+0xe2>
 8006636:	2302      	movs	r3, #2
 8006638:	77fb      	strb	r3, [r7, #31]
 800663a:	e01a      	b.n	8006672 <UART_SetConfig+0xe2>
 800663c:	2304      	movs	r3, #4
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e017      	b.n	8006672 <UART_SetConfig+0xe2>
 8006642:	2308      	movs	r3, #8
 8006644:	77fb      	strb	r3, [r7, #31]
 8006646:	e014      	b.n	8006672 <UART_SetConfig+0xe2>
 8006648:	2310      	movs	r3, #16
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e011      	b.n	8006672 <UART_SetConfig+0xe2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a67      	ldr	r2, [pc, #412]	; (80067f0 <UART_SetConfig+0x260>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d102      	bne.n	800665e <UART_SetConfig+0xce>
 8006658:	2300      	movs	r3, #0
 800665a:	77fb      	strb	r3, [r7, #31]
 800665c:	e009      	b.n	8006672 <UART_SetConfig+0xe2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a64      	ldr	r2, [pc, #400]	; (80067f4 <UART_SetConfig+0x264>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d102      	bne.n	800666e <UART_SetConfig+0xde>
 8006668:	2300      	movs	r3, #0
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e001      	b.n	8006672 <UART_SetConfig+0xe2>
 800666e:	2310      	movs	r3, #16
 8006670:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800667a:	d15b      	bne.n	8006734 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800667c:	7ffb      	ldrb	r3, [r7, #31]
 800667e:	2b08      	cmp	r3, #8
 8006680:	d827      	bhi.n	80066d2 <UART_SetConfig+0x142>
 8006682:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <UART_SetConfig+0xf8>)
 8006684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006688:	080066ad 	.word	0x080066ad
 800668c:	080066b5 	.word	0x080066b5
 8006690:	080066bd 	.word	0x080066bd
 8006694:	080066d3 	.word	0x080066d3
 8006698:	080066c3 	.word	0x080066c3
 800669c:	080066d3 	.word	0x080066d3
 80066a0:	080066d3 	.word	0x080066d3
 80066a4:	080066d3 	.word	0x080066d3
 80066a8:	080066cb 	.word	0x080066cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ac:	f7fe fbfc 	bl	8004ea8 <HAL_RCC_GetPCLK1Freq>
 80066b0:	61b8      	str	r0, [r7, #24]
        break;
 80066b2:	e013      	b.n	80066dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b4:	f7fe fc1a 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 80066b8:	61b8      	str	r0, [r7, #24]
        break;
 80066ba:	e00f      	b.n	80066dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066bc:	4b4e      	ldr	r3, [pc, #312]	; (80067f8 <UART_SetConfig+0x268>)
 80066be:	61bb      	str	r3, [r7, #24]
        break;
 80066c0:	e00c      	b.n	80066dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066c2:	f7fe fb7b 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
 80066c6:	61b8      	str	r0, [r7, #24]
        break;
 80066c8:	e008      	b.n	80066dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ce:	61bb      	str	r3, [r7, #24]
        break;
 80066d0:	e004      	b.n	80066dc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	77bb      	strb	r3, [r7, #30]
        break;
 80066da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d074      	beq.n	80067cc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	005a      	lsls	r2, r3, #1
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	441a      	add	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b0f      	cmp	r3, #15
 80066fe:	d916      	bls.n	800672e <UART_SetConfig+0x19e>
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006706:	d212      	bcs.n	800672e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f023 030f 	bic.w	r3, r3, #15
 8006710:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	085b      	lsrs	r3, r3, #1
 8006716:	b29b      	uxth	r3, r3
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	b29a      	uxth	r2, r3
 800671e:	89fb      	ldrh	r3, [r7, #14]
 8006720:	4313      	orrs	r3, r2
 8006722:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	89fa      	ldrh	r2, [r7, #14]
 800672a:	60da      	str	r2, [r3, #12]
 800672c:	e04e      	b.n	80067cc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	77bb      	strb	r3, [r7, #30]
 8006732:	e04b      	b.n	80067cc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006734:	7ffb      	ldrb	r3, [r7, #31]
 8006736:	2b08      	cmp	r3, #8
 8006738:	d827      	bhi.n	800678a <UART_SetConfig+0x1fa>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <UART_SetConfig+0x1b0>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006765 	.word	0x08006765
 8006744:	0800676d 	.word	0x0800676d
 8006748:	08006775 	.word	0x08006775
 800674c:	0800678b 	.word	0x0800678b
 8006750:	0800677b 	.word	0x0800677b
 8006754:	0800678b 	.word	0x0800678b
 8006758:	0800678b 	.word	0x0800678b
 800675c:	0800678b 	.word	0x0800678b
 8006760:	08006783 	.word	0x08006783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006764:	f7fe fba0 	bl	8004ea8 <HAL_RCC_GetPCLK1Freq>
 8006768:	61b8      	str	r0, [r7, #24]
        break;
 800676a:	e013      	b.n	8006794 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800676c:	f7fe fbbe 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8006770:	61b8      	str	r0, [r7, #24]
        break;
 8006772:	e00f      	b.n	8006794 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006774:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <UART_SetConfig+0x268>)
 8006776:	61bb      	str	r3, [r7, #24]
        break;
 8006778:	e00c      	b.n	8006794 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800677a:	f7fe fb1f 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
 800677e:	61b8      	str	r0, [r7, #24]
        break;
 8006780:	e008      	b.n	8006794 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006786:	61bb      	str	r3, [r7, #24]
        break;
 8006788:	e004      	b.n	8006794 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	77bb      	strb	r3, [r7, #30]
        break;
 8006792:	bf00      	nop
    }

    if (pclk != 0U)
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d018      	beq.n	80067cc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	085a      	lsrs	r2, r3, #1
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	441a      	add	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b0f      	cmp	r3, #15
 80067b4:	d908      	bls.n	80067c8 <UART_SetConfig+0x238>
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067bc:	d204      	bcs.n	80067c8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	60da      	str	r2, [r3, #12]
 80067c6:	e001      	b.n	80067cc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	efff69f3 	.word	0xefff69f3
 80067e8:	40013800 	.word	0x40013800
 80067ec:	40021000 	.word	0x40021000
 80067f0:	40004400 	.word	0x40004400
 80067f4:	40004800 	.word	0x40004800
 80067f8:	007a1200 	.word	0x007a1200

080067fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00a      	beq.n	8006826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	f003 0308 	and.w	r3, r3, #8
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01a      	beq.n	8006912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068fa:	d10a      	bne.n	8006912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	605a      	str	r2, [r3, #4]
  }
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af02      	add	r7, sp, #8
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006950:	f7fa fbb0 	bl	80010b4 <HAL_GetTick>
 8006954:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0308 	and.w	r3, r3, #8
 8006960:	2b08      	cmp	r3, #8
 8006962:	d10e      	bne.n	8006982 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f82d 	bl	80069d2 <UART_WaitOnFlagUntilTimeout>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e023      	b.n	80069ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b04      	cmp	r3, #4
 800698e:	d10e      	bne.n	80069ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f817 	bl	80069d2 <UART_WaitOnFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e00d      	b.n	80069ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b09c      	sub	sp, #112	; 0x70
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	603b      	str	r3, [r7, #0]
 80069de:	4613      	mov	r3, r2
 80069e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e2:	e0a5      	b.n	8006b30 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	f000 80a1 	beq.w	8006b30 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ee:	f7fa fb61 	bl	80010b4 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d302      	bcc.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x32>
 80069fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d13e      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a18:	667b      	str	r3, [r7, #100]	; 0x64
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e6      	bne.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a56:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e5      	bne.n	8006a36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e067      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d04f      	beq.n	8006b30 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a9e:	d147      	bne.n	8006b30 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aa8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006abe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e6      	bne.n	8006aaa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	613b      	str	r3, [r7, #16]
   return(result);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f023 0301 	bic.w	r3, r3, #1
 8006af2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3308      	adds	r3, #8
 8006afa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006afc:	623a      	str	r2, [r7, #32]
 8006afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	69f9      	ldr	r1, [r7, #28]
 8006b02:	6a3a      	ldr	r2, [r7, #32]
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e5      	bne.n	8006adc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e010      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69da      	ldr	r2, [r3, #28]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	bf0c      	ite	eq
 8006b40:	2301      	moveq	r3, #1
 8006b42:	2300      	movne	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	79fb      	ldrb	r3, [r7, #7]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	f43f af4a 	beq.w	80069e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3770      	adds	r7, #112	; 0x70
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006b5a:	b480      	push	{r7}
 8006b5c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006b5e:	bf00      	nop
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af04      	add	r7, sp, #16
 8006b6e:	4603      	mov	r3, r0
 8006b70:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006b72:	f04f 33ff 	mov.w	r3, #4294967295
 8006b76:	9302      	str	r3, [sp, #8]
 8006b78:	2301      	movs	r3, #1
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	1dfb      	adds	r3, r7, #7
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	2301      	movs	r3, #1
 8006b82:	2200      	movs	r2, #0
 8006b84:	2178      	movs	r1, #120	; 0x78
 8006b86:	4803      	ldr	r0, [pc, #12]	; (8006b94 <ssd1306_WriteCommand+0x2c>)
 8006b88:	f7fc fbda 	bl	8003340 <HAL_I2C_Mem_Write>
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20000118 	.word	0x20000118

08006b98 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af04      	add	r7, sp, #16
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8006baa:	9202      	str	r2, [sp, #8]
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	2240      	movs	r2, #64	; 0x40
 8006bb6:	2178      	movs	r1, #120	; 0x78
 8006bb8:	4803      	ldr	r0, [pc, #12]	; (8006bc8 <ssd1306_WriteData+0x30>)
 8006bba:	f7fc fbc1 	bl	8003340 <HAL_I2C_Mem_Write>
}
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000118 	.word	0x20000118

08006bcc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8006bd0:	f7ff ffc3 	bl	8006b5a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006bd4:	2064      	movs	r0, #100	; 0x64
 8006bd6:	f7fa fa79 	bl	80010cc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006bda:	2000      	movs	r0, #0
 8006bdc:	f000 f914 	bl	8006e08 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8006be0:	2020      	movs	r0, #32
 8006be2:	f7ff ffc1 	bl	8006b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8006be6:	2000      	movs	r0, #0
 8006be8:	f7ff ffbe 	bl	8006b68 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006bec:	20b0      	movs	r0, #176	; 0xb0
 8006bee:	f7ff ffbb 	bl	8006b68 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006bf2:	20c8      	movs	r0, #200	; 0xc8
 8006bf4:	f7ff ffb8 	bl	8006b68 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	f7ff ffb5 	bl	8006b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006bfe:	2010      	movs	r0, #16
 8006c00:	f7ff ffb2 	bl	8006b68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006c04:	2040      	movs	r0, #64	; 0x40
 8006c06:	f7ff ffaf 	bl	8006b68 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8006c0a:	20ff      	movs	r0, #255	; 0xff
 8006c0c:	f000 f8e8 	bl	8006de0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006c10:	20a1      	movs	r0, #161	; 0xa1
 8006c12:	f7ff ffa9 	bl	8006b68 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006c16:	20a6      	movs	r0, #166	; 0xa6
 8006c18:	f7ff ffa6 	bl	8006b68 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006c1c:	20a8      	movs	r0, #168	; 0xa8
 8006c1e:	f7ff ffa3 	bl	8006b68 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8006c22:	203f      	movs	r0, #63	; 0x3f
 8006c24:	f7ff ffa0 	bl	8006b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006c28:	20a4      	movs	r0, #164	; 0xa4
 8006c2a:	f7ff ff9d 	bl	8006b68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8006c2e:	20d3      	movs	r0, #211	; 0xd3
 8006c30:	f7ff ff9a 	bl	8006b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8006c34:	2000      	movs	r0, #0
 8006c36:	f7ff ff97 	bl	8006b68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8006c3a:	20d5      	movs	r0, #213	; 0xd5
 8006c3c:	f7ff ff94 	bl	8006b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006c40:	20f0      	movs	r0, #240	; 0xf0
 8006c42:	f7ff ff91 	bl	8006b68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006c46:	20d9      	movs	r0, #217	; 0xd9
 8006c48:	f7ff ff8e 	bl	8006b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006c4c:	2022      	movs	r0, #34	; 0x22
 8006c4e:	f7ff ff8b 	bl	8006b68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8006c52:	20da      	movs	r0, #218	; 0xda
 8006c54:	f7ff ff88 	bl	8006b68 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8006c58:	2012      	movs	r0, #18
 8006c5a:	f7ff ff85 	bl	8006b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006c5e:	20db      	movs	r0, #219	; 0xdb
 8006c60:	f7ff ff82 	bl	8006b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006c64:	2020      	movs	r0, #32
 8006c66:	f7ff ff7f 	bl	8006b68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8006c6a:	208d      	movs	r0, #141	; 0x8d
 8006c6c:	f7ff ff7c 	bl	8006b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006c70:	2014      	movs	r0, #20
 8006c72:	f7ff ff79 	bl	8006b68 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8006c76:	2001      	movs	r0, #1
 8006c78:	f000 f8c6 	bl	8006e08 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	f000 f80f 	bl	8006ca0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8006c82:	f000 f831 	bl	8006ce8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006c86:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <ssd1306_Init+0xd0>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006c8c:	4b03      	ldr	r3, [pc, #12]	; (8006c9c <ssd1306_Init+0xd0>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8006c92:	4b02      	ldr	r3, [pc, #8]	; (8006c9c <ssd1306_Init+0xd0>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	711a      	strb	r2, [r3, #4]
}
 8006c98:	bf00      	nop
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20000aa4 	.word	0x20000aa4

08006ca0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006caa:	2300      	movs	r3, #0
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	e00d      	b.n	8006ccc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <ssd1306_Fill+0x1a>
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	e000      	b.n	8006cbc <ssd1306_Fill+0x1c>
 8006cba:	21ff      	movs	r1, #255	; 0xff
 8006cbc:	4a09      	ldr	r2, [pc, #36]	; (8006ce4 <ssd1306_Fill+0x44>)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	460a      	mov	r2, r1
 8006cc4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd2:	d3ed      	bcc.n	8006cb0 <ssd1306_Fill+0x10>
    }
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	200006a4 	.word	0x200006a4

08006ce8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006cee:	2300      	movs	r3, #0
 8006cf0:	71fb      	strb	r3, [r7, #7]
 8006cf2:	e016      	b.n	8006d22 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	3b50      	subs	r3, #80	; 0x50
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff ff34 	bl	8006b68 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006d00:	2000      	movs	r0, #0
 8006d02:	f7ff ff31 	bl	8006b68 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8006d06:	2010      	movs	r0, #16
 8006d08:	f7ff ff2e 	bl	8006b68 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	01db      	lsls	r3, r3, #7
 8006d10:	4a08      	ldr	r2, [pc, #32]	; (8006d34 <ssd1306_UpdateScreen+0x4c>)
 8006d12:	4413      	add	r3, r2
 8006d14:	2180      	movs	r1, #128	; 0x80
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff ff3e 	bl	8006b98 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006d1c:	79fb      	ldrb	r3, [r7, #7]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	71fb      	strb	r3, [r7, #7]
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	2b07      	cmp	r3, #7
 8006d26:	d9e5      	bls.n	8006cf4 <ssd1306_UpdateScreen+0xc>
    }
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	200006a4 	.word	0x200006a4

08006d38 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	71fb      	strb	r3, [r7, #7]
 8006d42:	460b      	mov	r3, r1
 8006d44:	71bb      	strb	r3, [r7, #6]
 8006d46:	4613      	mov	r3, r2
 8006d48:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	db3d      	blt.n	8006dce <ssd1306_DrawPixel+0x96>
 8006d52:	79bb      	ldrb	r3, [r7, #6]
 8006d54:	2b3f      	cmp	r3, #63	; 0x3f
 8006d56:	d83a      	bhi.n	8006dce <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8006d58:	797b      	ldrb	r3, [r7, #5]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d11a      	bne.n	8006d94 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006d5e:	79fa      	ldrb	r2, [r7, #7]
 8006d60:	79bb      	ldrb	r3, [r7, #6]
 8006d62:	08db      	lsrs	r3, r3, #3
 8006d64:	b2d8      	uxtb	r0, r3
 8006d66:	4603      	mov	r3, r0
 8006d68:	01db      	lsls	r3, r3, #7
 8006d6a:	4413      	add	r3, r2
 8006d6c:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <ssd1306_DrawPixel+0xa4>)
 8006d6e:	5cd3      	ldrb	r3, [r2, r3]
 8006d70:	b25a      	sxtb	r2, r3
 8006d72:	79bb      	ldrb	r3, [r7, #6]
 8006d74:	f003 0307 	and.w	r3, r3, #7
 8006d78:	2101      	movs	r1, #1
 8006d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7e:	b25b      	sxtb	r3, r3
 8006d80:	4313      	orrs	r3, r2
 8006d82:	b259      	sxtb	r1, r3
 8006d84:	79fa      	ldrb	r2, [r7, #7]
 8006d86:	4603      	mov	r3, r0
 8006d88:	01db      	lsls	r3, r3, #7
 8006d8a:	4413      	add	r3, r2
 8006d8c:	b2c9      	uxtb	r1, r1
 8006d8e:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <ssd1306_DrawPixel+0xa4>)
 8006d90:	54d1      	strb	r1, [r2, r3]
 8006d92:	e01d      	b.n	8006dd0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006d94:	79fa      	ldrb	r2, [r7, #7]
 8006d96:	79bb      	ldrb	r3, [r7, #6]
 8006d98:	08db      	lsrs	r3, r3, #3
 8006d9a:	b2d8      	uxtb	r0, r3
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	01db      	lsls	r3, r3, #7
 8006da0:	4413      	add	r3, r2
 8006da2:	4a0e      	ldr	r2, [pc, #56]	; (8006ddc <ssd1306_DrawPixel+0xa4>)
 8006da4:	5cd3      	ldrb	r3, [r2, r3]
 8006da6:	b25a      	sxtb	r2, r3
 8006da8:	79bb      	ldrb	r3, [r7, #6]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	2101      	movs	r1, #1
 8006db0:	fa01 f303 	lsl.w	r3, r1, r3
 8006db4:	b25b      	sxtb	r3, r3
 8006db6:	43db      	mvns	r3, r3
 8006db8:	b25b      	sxtb	r3, r3
 8006dba:	4013      	ands	r3, r2
 8006dbc:	b259      	sxtb	r1, r3
 8006dbe:	79fa      	ldrb	r2, [r7, #7]
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	01db      	lsls	r3, r3, #7
 8006dc4:	4413      	add	r3, r2
 8006dc6:	b2c9      	uxtb	r1, r1
 8006dc8:	4a04      	ldr	r2, [pc, #16]	; (8006ddc <ssd1306_DrawPixel+0xa4>)
 8006dca:	54d1      	strb	r1, [r2, r3]
 8006dcc:	e000      	b.n	8006dd0 <ssd1306_DrawPixel+0x98>
        return;
 8006dce:	bf00      	nop
    }
}
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	200006a4 	.word	0x200006a4

08006de0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8006dea:	2381      	movs	r3, #129	; 0x81
 8006dec:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff feb9 	bl	8006b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff feb5 	bl	8006b68 <ssd1306_WriteCommand>
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8006e18:	23af      	movs	r3, #175	; 0xaf
 8006e1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8006e1c:	4b08      	ldr	r3, [pc, #32]	; (8006e40 <ssd1306_SetDisplayOn+0x38>)
 8006e1e:	2201      	movs	r2, #1
 8006e20:	715a      	strb	r2, [r3, #5]
 8006e22:	e004      	b.n	8006e2e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8006e24:	23ae      	movs	r3, #174	; 0xae
 8006e26:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8006e28:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <ssd1306_SetDisplayOn+0x38>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff fe99 	bl	8006b68 <ssd1306_WriteCommand>
}
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000aa4 	.word	0x20000aa4

08006e44 <__libc_init_array>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	4d0d      	ldr	r5, [pc, #52]	; (8006e7c <__libc_init_array+0x38>)
 8006e48:	4c0d      	ldr	r4, [pc, #52]	; (8006e80 <__libc_init_array+0x3c>)
 8006e4a:	1b64      	subs	r4, r4, r5
 8006e4c:	10a4      	asrs	r4, r4, #2
 8006e4e:	2600      	movs	r6, #0
 8006e50:	42a6      	cmp	r6, r4
 8006e52:	d109      	bne.n	8006e68 <__libc_init_array+0x24>
 8006e54:	4d0b      	ldr	r5, [pc, #44]	; (8006e84 <__libc_init_array+0x40>)
 8006e56:	4c0c      	ldr	r4, [pc, #48]	; (8006e88 <__libc_init_array+0x44>)
 8006e58:	f000 f820 	bl	8006e9c <_init>
 8006e5c:	1b64      	subs	r4, r4, r5
 8006e5e:	10a4      	asrs	r4, r4, #2
 8006e60:	2600      	movs	r6, #0
 8006e62:	42a6      	cmp	r6, r4
 8006e64:	d105      	bne.n	8006e72 <__libc_init_array+0x2e>
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6c:	4798      	blx	r3
 8006e6e:	3601      	adds	r6, #1
 8006e70:	e7ee      	b.n	8006e50 <__libc_init_array+0xc>
 8006e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e76:	4798      	blx	r3
 8006e78:	3601      	adds	r6, #1
 8006e7a:	e7f2      	b.n	8006e62 <__libc_init_array+0x1e>
 8006e7c:	08006eec 	.word	0x08006eec
 8006e80:	08006eec 	.word	0x08006eec
 8006e84:	08006eec 	.word	0x08006eec
 8006e88:	08006ef0 	.word	0x08006ef0

08006e8c <memset>:
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <memset+0xa>
 8006e94:	4770      	bx	lr
 8006e96:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9a:	e7f9      	b.n	8006e90 <memset+0x4>

08006e9c <_init>:
 8006e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9e:	bf00      	nop
 8006ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea2:	bc08      	pop	{r3}
 8006ea4:	469e      	mov	lr, r3
 8006ea6:	4770      	bx	lr

08006ea8 <_fini>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	bf00      	nop
 8006eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eae:	bc08      	pop	{r3}
 8006eb0:	469e      	mov	lr, r3
 8006eb2:	4770      	bx	lr
