
stm32f303k8_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007cc  08006648  08006648  00016648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e14  08006e14  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08006e14  08006e14  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e14  08006e14  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e18  08006e18  00016e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000674  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000068c  2000068c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a2d  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a24  00000000  00000000  00036a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  000394a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e8  00000000  00000000  0003a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d207  00000000  00000000  0003bba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015bbd  00000000  00000000  00058da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae949  00000000  00000000  0006e964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  0011d2ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005644  00000000  00000000  0011d2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006630 	.word	0x08006630

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08006630 	.word	0x08006630

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fecb 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f8cb 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 fb39 	bl	800084c <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 fb09 	bl	80007f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001de:	f000 fad7 	bl	8000790 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80001e2:	f000 fa27 	bl	8000634 <MX_TIM1_Init>
  MX_I2C1_Init();
 80001e6:	f000 f9e5 	bl	80005b4 <MX_I2C1_Init>
  MX_ADC1_Init();
 80001ea:	f000 f91d 	bl	8000428 <MX_ADC1_Init>
  MX_DAC1_Init();
 80001ee:	f000 f9a9 	bl	8000544 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT( &htim1 );
 80001f2:	485a      	ldr	r0, [pc, #360]	; (800035c <main+0x194>)
 80001f4:	f004 fb16 	bl	8004824 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 80001f8:	2100      	movs	r1, #0
 80001fa:	4858      	ldr	r0, [pc, #352]	; (800035c <main+0x194>)
 80001fc:	f004 fbc6 	bl	800498c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_2 );
 8000200:	2104      	movs	r1, #4
 8000202:	4856      	ldr	r0, [pc, #344]	; (800035c <main+0x194>)
 8000204:	f004 fbc2 	bl	800498c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_3 );
 8000208:	2108      	movs	r1, #8
 800020a:	4854      	ldr	r0, [pc, #336]	; (800035c <main+0x194>)
 800020c:	f004 fbbe 	bl	800498c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_1 );
 8000210:	2100      	movs	r1, #0
 8000212:	4852      	ldr	r0, [pc, #328]	; (800035c <main+0x194>)
 8000214:	f005 fa46 	bl	80056a4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_2 );
 8000218:	2104      	movs	r1, #4
 800021a:	4850      	ldr	r0, [pc, #320]	; (800035c <main+0x194>)
 800021c:	f005 fa42 	bl	80056a4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_3 );
 8000220:	2108      	movs	r1, #8
 8000222:	484e      	ldr	r0, [pc, #312]	; (800035c <main+0x194>)
 8000224:	f005 fa3e 	bl	80056a4 <HAL_TIMEx_PWMN_Start>

  ssd1306_Init();
 8000228:	f005 ff78 	bl	800611c <ssd1306_Init>


	  // HAL_ADC_PollForConversion(&hadc1, 100);
//	  adc_raw = 3.4 * HAL_ADC_GetValue(&hadc1) / 4095;
//	  gcvt((float)adc_raw[0], 5, buffer);
	  HAL_ADC_Start_DMA(&hadc1, adc_raw, 3);
 800022c:	f107 0318 	add.w	r3, r7, #24
 8000230:	2203      	movs	r2, #3
 8000232:	4619      	mov	r1, r3
 8000234:	484a      	ldr	r0, [pc, #296]	; (8000360 <main+0x198>)
 8000236:	f001 f8d1 	bl	80013dc <HAL_ADC_Start_DMA>
    i = 10000; while(i--);
 800023a:	f242 7310 	movw	r3, #10000	; 0x2710
 800023e:	627b      	str	r3, [r7, #36]	; 0x24
 8000240:	bf00      	nop
 8000242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000244:	1e5a      	subs	r2, r3, #1
 8000246:	627a      	str	r2, [r7, #36]	; 0x24
 8000248:	2b00      	cmp	r3, #0
 800024a:	d1fa      	bne.n	8000242 <main+0x7a>

	  HAL_DACEx_DualSetValue(&hdac1, DAC_ALIGN_12B_L, adc_raw[0], adc_raw[1]);
 800024c:	69ba      	ldr	r2, [r7, #24]
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	2104      	movs	r1, #4
 8000252:	4844      	ldr	r0, [pc, #272]	; (8000364 <main+0x19c>)
 8000254:	f001 ff85 	bl	8002162 <HAL_DACEx_DualSetValue>
	  i = 10000; while(i--);
 8000258:	f242 7310 	movw	r3, #10000	; 0x2710
 800025c:	627b      	str	r3, [r7, #36]	; 0x24
 800025e:	bf00      	nop
 8000260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	627a      	str	r2, [r7, #36]	; 0x24
 8000266:	2b00      	cmp	r3, #0
 8000268:	d1fa      	bne.n	8000260 <main+0x98>

    tmp[0] = HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_1);
 800026a:	2100      	movs	r1, #0
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <main+0x19c>)
 800026e:	f001 ffa3 	bl	80021b8 <HAL_DAC_GetValue>
 8000272:	4603      	mov	r3, r0
 8000274:	60bb      	str	r3, [r7, #8]
    tmp[1] = HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8000276:	2110      	movs	r1, #16
 8000278:	483a      	ldr	r0, [pc, #232]	; (8000364 <main+0x19c>)
 800027a:	f001 ff9d 	bl	80021b8 <HAL_DAC_GetValue>
 800027e:	4603      	mov	r3, r0
 8000280:	60fb      	str	r3, [r7, #12]
    ssd1306_Fill(Black);
 8000282:	2000      	movs	r0, #0
 8000284:	f005 ffb4 	bl	80061f0 <ssd1306_Fill>
	  ssd1306_SetCursor(0, 0); itoa(adc_raw[0], buffer, 16); ssd1306_WriteString(buffer, SCREEN_FONT, White);
 8000288:	2100      	movs	r1, #0
 800028a:	2000      	movs	r0, #0
 800028c:	f006 f8fe 	bl	800648c <ssd1306_SetCursor>
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	4618      	mov	r0, r3
 8000294:	463b      	mov	r3, r7
 8000296:	2210      	movs	r2, #16
 8000298:	4619      	mov	r1, r3
 800029a:	f006 f97d 	bl	8006598 <itoa>
 800029e:	4a32      	ldr	r2, [pc, #200]	; (8000368 <main+0x1a0>)
 80002a0:	4638      	mov	r0, r7
 80002a2:	2301      	movs	r3, #1
 80002a4:	ca06      	ldmia	r2, {r1, r2}
 80002a6:	f006 f8cb 	bl	8006440 <ssd1306_WriteString>
	  ssd1306_SetCursor(64, 0); itoa(tmp[0], buffer, 16); ssd1306_WriteString(buffer, SCREEN_FONT, White);
 80002aa:	2100      	movs	r1, #0
 80002ac:	2040      	movs	r0, #64	; 0x40
 80002ae:	f006 f8ed 	bl	800648c <ssd1306_SetCursor>
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	4618      	mov	r0, r3
 80002b6:	463b      	mov	r3, r7
 80002b8:	2210      	movs	r2, #16
 80002ba:	4619      	mov	r1, r3
 80002bc:	f006 f96c 	bl	8006598 <itoa>
 80002c0:	4a29      	ldr	r2, [pc, #164]	; (8000368 <main+0x1a0>)
 80002c2:	4638      	mov	r0, r7
 80002c4:	2301      	movs	r3, #1
 80002c6:	ca06      	ldmia	r2, {r1, r2}
 80002c8:	f006 f8ba 	bl	8006440 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 20); itoa(adc_raw[1], buffer, 16); ssd1306_WriteString(buffer, SCREEN_FONT, White);
 80002cc:	2114      	movs	r1, #20
 80002ce:	2000      	movs	r0, #0
 80002d0:	f006 f8dc 	bl	800648c <ssd1306_SetCursor>
 80002d4:	69fb      	ldr	r3, [r7, #28]
 80002d6:	4618      	mov	r0, r3
 80002d8:	463b      	mov	r3, r7
 80002da:	2210      	movs	r2, #16
 80002dc:	4619      	mov	r1, r3
 80002de:	f006 f95b 	bl	8006598 <itoa>
 80002e2:	4a21      	ldr	r2, [pc, #132]	; (8000368 <main+0x1a0>)
 80002e4:	4638      	mov	r0, r7
 80002e6:	2301      	movs	r3, #1
 80002e8:	ca06      	ldmia	r2, {r1, r2}
 80002ea:	f006 f8a9 	bl	8006440 <ssd1306_WriteString>
    ssd1306_SetCursor(64, 20); itoa(tmp[1], buffer, 16); ssd1306_WriteString(buffer, SCREEN_FONT, White);
 80002ee:	2114      	movs	r1, #20
 80002f0:	2040      	movs	r0, #64	; 0x40
 80002f2:	f006 f8cb 	bl	800648c <ssd1306_SetCursor>
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	4618      	mov	r0, r3
 80002fa:	463b      	mov	r3, r7
 80002fc:	2210      	movs	r2, #16
 80002fe:	4619      	mov	r1, r3
 8000300:	f006 f94a 	bl	8006598 <itoa>
 8000304:	4a18      	ldr	r2, [pc, #96]	; (8000368 <main+0x1a0>)
 8000306:	4638      	mov	r0, r7
 8000308:	2301      	movs	r3, #1
 800030a:	ca06      	ldmia	r2, {r1, r2}
 800030c:	f006 f898 	bl	8006440 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 40); itoa(adc_raw[2], buffer, 16); ssd1306_WriteString(buffer, SCREEN_FONT, White);
 8000310:	2128      	movs	r1, #40	; 0x28
 8000312:	2000      	movs	r0, #0
 8000314:	f006 f8ba 	bl	800648c <ssd1306_SetCursor>
 8000318:	6a3b      	ldr	r3, [r7, #32]
 800031a:	4618      	mov	r0, r3
 800031c:	463b      	mov	r3, r7
 800031e:	2210      	movs	r2, #16
 8000320:	4619      	mov	r1, r3
 8000322:	f006 f939 	bl	8006598 <itoa>
 8000326:	4a10      	ldr	r2, [pc, #64]	; (8000368 <main+0x1a0>)
 8000328:	4638      	mov	r0, r7
 800032a:	2301      	movs	r3, #1
 800032c:	ca06      	ldmia	r2, {r1, r2}
 800032e:	f006 f887 	bl	8006440 <ssd1306_WriteString>
    ssd1306_SetCursor(64, 40); itoa(tmp[2], buffer, 16); ssd1306_WriteString(buffer, SCREEN_FONT, White);
 8000332:	2128      	movs	r1, #40	; 0x28
 8000334:	2040      	movs	r0, #64	; 0x40
 8000336:	f006 f8a9 	bl	800648c <ssd1306_SetCursor>
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	4618      	mov	r0, r3
 800033e:	463b      	mov	r3, r7
 8000340:	2210      	movs	r2, #16
 8000342:	4619      	mov	r1, r3
 8000344:	f006 f928 	bl	8006598 <itoa>
 8000348:	4a07      	ldr	r2, [pc, #28]	; (8000368 <main+0x1a0>)
 800034a:	4638      	mov	r0, r7
 800034c:	2301      	movs	r3, #1
 800034e:	ca06      	ldmia	r2, {r1, r2}
 8000350:	f006 f876 	bl	8006440 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000354:	f005 ff70 	bl	8006238 <ssd1306_UpdateScreen>
	  HAL_ADC_Start_DMA(&hadc1, adc_raw, 3);
 8000358:	e768      	b.n	800022c <main+0x64>
 800035a:	bf00      	nop
 800035c:	200001b0 	.word	0x200001b0
 8000360:	20000034 	.word	0x20000034
 8000364:	200000c8 	.word	0x200000c8
 8000368:	20000010 	.word	0x20000010

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b096      	sub	sp, #88	; 0x58
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000376:	2228      	movs	r2, #40	; 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f006 f90e 	bl	800659c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	f107 031c 	add.w	r3, r7, #28
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]
 800039e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a0:	2302      	movs	r3, #2
 80003a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a4:	2301      	movs	r3, #1
 80003a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a8:	2310      	movs	r3, #16
 80003aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ac:	2302      	movs	r3, #2
 80003ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b0:	2300      	movs	r3, #0
 80003b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80003b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003be:	4618      	mov	r0, r3
 80003c0:	f002 fe96 	bl	80030f0 <HAL_RCC_OscConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003ca:	f000 fb03 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ce:	230f      	movs	r3, #15
 80003d0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d2:	2300      	movs	r3, #0
 80003d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e2:	f107 031c 	add.w	r3, r7, #28
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f003 febf 	bl	800416c <HAL_RCC_ClockConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003f4:	f000 faee 	bl	80009d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 80003f8:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 80003fc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000402:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000404:	2300      	movs	r3, #0
 8000406:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	4618      	mov	r0, r3
 8000410:	f004 f8e2 	bl	80045d8 <HAL_RCCEx_PeriphCLKConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800041a:	f000 fadb 	bl	80009d4 <Error_Handler>
  }
}
 800041e:	bf00      	nop
 8000420:	3758      	adds	r7, #88	; 0x58
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08a      	sub	sp, #40	; 0x28
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800042e:	f107 031c 	add.w	r3, r7, #28
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
 8000448:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800044a:	4b3d      	ldr	r3, [pc, #244]	; (8000540 <MX_ADC1_Init+0x118>)
 800044c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000450:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000452:	4b3b      	ldr	r3, [pc, #236]	; (8000540 <MX_ADC1_Init+0x118>)
 8000454:	2200      	movs	r2, #0
 8000456:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000458:	4b39      	ldr	r3, [pc, #228]	; (8000540 <MX_ADC1_Init+0x118>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800045e:	4b38      	ldr	r3, [pc, #224]	; (8000540 <MX_ADC1_Init+0x118>)
 8000460:	2201      	movs	r2, #1
 8000462:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000464:	4b36      	ldr	r3, [pc, #216]	; (8000540 <MX_ADC1_Init+0x118>)
 8000466:	2201      	movs	r2, #1
 8000468:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800046a:	4b35      	ldr	r3, [pc, #212]	; (8000540 <MX_ADC1_Init+0x118>)
 800046c:	2200      	movs	r2, #0
 800046e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000472:	4b33      	ldr	r3, [pc, #204]	; (8000540 <MX_ADC1_Init+0x118>)
 8000474:	2200      	movs	r2, #0
 8000476:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000478:	4b31      	ldr	r3, [pc, #196]	; (8000540 <MX_ADC1_Init+0x118>)
 800047a:	2201      	movs	r2, #1
 800047c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800047e:	4b30      	ldr	r3, [pc, #192]	; (8000540 <MX_ADC1_Init+0x118>)
 8000480:	2200      	movs	r2, #0
 8000482:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000484:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <MX_ADC1_Init+0x118>)
 8000486:	2203      	movs	r2, #3
 8000488:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800048a:	4b2d      	ldr	r3, [pc, #180]	; (8000540 <MX_ADC1_Init+0x118>)
 800048c:	2200      	movs	r2, #0
 800048e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000492:	4b2b      	ldr	r3, [pc, #172]	; (8000540 <MX_ADC1_Init+0x118>)
 8000494:	2204      	movs	r2, #4
 8000496:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000498:	4b29      	ldr	r3, [pc, #164]	; (8000540 <MX_ADC1_Init+0x118>)
 800049a:	2200      	movs	r2, #0
 800049c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800049e:	4b28      	ldr	r3, [pc, #160]	; (8000540 <MX_ADC1_Init+0x118>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004a4:	4826      	ldr	r0, [pc, #152]	; (8000540 <MX_ADC1_Init+0x118>)
 80004a6:	f000 fe07 	bl	80010b8 <HAL_ADC_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80004b0:	f000 fa90 	bl	80009d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004b8:	f107 031c 	add.w	r3, r7, #28
 80004bc:	4619      	mov	r1, r3
 80004be:	4820      	ldr	r0, [pc, #128]	; (8000540 <MX_ADC1_Init+0x118>)
 80004c0:	f001 fb26 	bl	8001b10 <HAL_ADCEx_MultiModeConfigChannel>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004ca:	f000 fa83 	bl	80009d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004ce:	2301      	movs	r3, #1
 80004d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004d2:	2301      	movs	r3, #1
 80004d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	4619      	mov	r1, r3
 80004ea:	4815      	ldr	r0, [pc, #84]	; (8000540 <MX_ADC1_Init+0x118>)
 80004ec:	f001 f850 	bl	8001590 <HAL_ADC_ConfigChannel>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004f6:	f000 fa6d 	bl	80009d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004fa:	2302      	movs	r3, #2
 80004fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004fe:	2302      	movs	r3, #2
 8000500:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	4619      	mov	r1, r3
 8000506:	480e      	ldr	r0, [pc, #56]	; (8000540 <MX_ADC1_Init+0x118>)
 8000508:	f001 f842 	bl	8001590 <HAL_ADC_ConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000512:	f000 fa5f 	bl	80009d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000516:	2310      	movs	r3, #16
 8000518:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800051a:	2303      	movs	r3, #3
 800051c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800051e:	2307      	movs	r3, #7
 8000520:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4619      	mov	r1, r3
 8000526:	4806      	ldr	r0, [pc, #24]	; (8000540 <MX_ADC1_Init+0x118>)
 8000528:	f001 f832 	bl	8001590 <HAL_ADC_ConfigChannel>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 8000532:	f000 fa4f 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	3728      	adds	r7, #40	; 0x28
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000034 	.word	0x20000034

08000544 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_DAC1_Init+0x68>)
 8000556:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <MX_DAC1_Init+0x6c>)
 8000558:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800055a:	4814      	ldr	r0, [pc, #80]	; (80005ac <MX_DAC1_Init+0x68>)
 800055c:	f001 fddf 	bl	800211e <HAL_DAC_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000566:	f000 fa35 	bl	80009d4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800056a:	233c      	movs	r3, #60	; 0x3c
 800056c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	4619      	mov	r1, r3
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <MX_DAC1_Init+0x68>)
 800057a:	f001 fe33 	bl	80021e4 <HAL_DAC_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000584:	f000 fa26 	bl	80009d4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 8000588:	2302      	movs	r3, #2
 800058a:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2210      	movs	r2, #16
 8000590:	4619      	mov	r1, r3
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <MX_DAC1_Init+0x68>)
 8000594:	f001 fe26 	bl	80021e4 <HAL_DAC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 800059e:	f000 fa19 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000c8 	.word	0x200000c8
 80005b0:	40007400 	.word	0x40007400

080005b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_I2C1_Init+0x74>)
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <MX_I2C1_Init+0x78>)
 80005bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_I2C1_Init+0x74>)
 80005c0:	4a1b      	ldr	r2, [pc, #108]	; (8000630 <MX_I2C1_Init+0x7c>)
 80005c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_I2C1_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_I2C1_Init+0x74>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_I2C1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_I2C1_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_I2C1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <MX_I2C1_Init+0x74>)
 80005f0:	f002 f96a 	bl	80028c8 <HAL_I2C_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005fa:	f000 f9eb 	bl	80009d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005fe:	2100      	movs	r1, #0
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <MX_I2C1_Init+0x74>)
 8000602:	f002 fcdd 	bl	8002fc0 <HAL_I2CEx_ConfigAnalogFilter>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800060c:	f000 f9e2 	bl	80009d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000610:	2100      	movs	r1, #0
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_I2C1_Init+0x74>)
 8000614:	f002 fd1f 	bl	8003056 <HAL_I2CEx_ConfigDigitalFilter>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800061e:	f000 f9d9 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000164 	.word	0x20000164
 800062c:	40005400 	.word	0x40005400
 8000630:	2000090e 	.word	0x2000090e

08000634 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b096      	sub	sp, #88	; 0x58
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000646:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
 8000656:	615a      	str	r2, [r3, #20]
 8000658:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	222c      	movs	r2, #44	; 0x2c
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f005 ff9b 	bl	800659c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000666:	4b48      	ldr	r3, [pc, #288]	; (8000788 <MX_TIM1_Init+0x154>)
 8000668:	4a48      	ldr	r2, [pc, #288]	; (800078c <MX_TIM1_Init+0x158>)
 800066a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800066c:	4b46      	ldr	r3, [pc, #280]	; (8000788 <MX_TIM1_Init+0x154>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000672:	4b45      	ldr	r3, [pc, #276]	; (8000788 <MX_TIM1_Init+0x154>)
 8000674:	2220      	movs	r2, #32
 8000676:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 8000678:	4b43      	ldr	r3, [pc, #268]	; (8000788 <MX_TIM1_Init+0x154>)
 800067a:	f247 5230 	movw	r2, #30000	; 0x7530
 800067e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b41      	ldr	r3, [pc, #260]	; (8000788 <MX_TIM1_Init+0x154>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 3;
 8000686:	4b40      	ldr	r3, [pc, #256]	; (8000788 <MX_TIM1_Init+0x154>)
 8000688:	2203      	movs	r2, #3
 800068a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068c:	4b3e      	ldr	r3, [pc, #248]	; (8000788 <MX_TIM1_Init+0x154>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000692:	483d      	ldr	r0, [pc, #244]	; (8000788 <MX_TIM1_Init+0x154>)
 8000694:	f004 f922 	bl	80048dc <HAL_TIM_PWM_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800069e:	f000 f999 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a2:	2300      	movs	r3, #0
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006a6:	2300      	movs	r3, #0
 80006a8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006b2:	4619      	mov	r1, r3
 80006b4:	4834      	ldr	r0, [pc, #208]	; (8000788 <MX_TIM1_Init+0x154>)
 80006b6:	f005 f89b 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006c0:	f000 f988 	bl	80009d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c4:	2360      	movs	r3, #96	; 0x60
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 7500;
 80006c8:	f641 534c 	movw	r3, #7500	; 0x1d4c
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ce:	2300      	movs	r3, #0
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	4827      	ldr	r0, [pc, #156]	; (8000788 <MX_TIM1_Init+0x154>)
 80006ec:	f004 fb5a 	bl	8004da4 <HAL_TIM_PWM_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80006f6:	f000 f96d 	bl	80009d4 <Error_Handler>
  }
  sConfigOC.Pulse = 15000;
 80006fa:	f643 2398 	movw	r3, #15000	; 0x3a98
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000700:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000704:	2204      	movs	r2, #4
 8000706:	4619      	mov	r1, r3
 8000708:	481f      	ldr	r0, [pc, #124]	; (8000788 <MX_TIM1_Init+0x154>)
 800070a:	f004 fb4b 	bl	8004da4 <HAL_TIM_PWM_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000714:	f000 f95e 	bl	80009d4 <Error_Handler>
  }
  sConfigOC.Pulse = 22500;
 8000718:	f245 73e4 	movw	r3, #22500	; 0x57e4
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800071e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000722:	2208      	movs	r2, #8
 8000724:	4619      	mov	r1, r3
 8000726:	4818      	ldr	r0, [pc, #96]	; (8000788 <MX_TIM1_Init+0x154>)
 8000728:	f004 fb3c 	bl	8004da4 <HAL_TIM_PWM_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000732:	f000 f94f 	bl	80009d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800074a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000758:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4619      	mov	r1, r3
 800076a:	4807      	ldr	r0, [pc, #28]	; (8000788 <MX_TIM1_Init+0x154>)
 800076c:	f005 f8ae 	bl	80058cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000776:	f000 f92d 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <MX_TIM1_Init+0x154>)
 800077c:	f000 facc 	bl	8000d18 <HAL_TIM_MspPostInit>

}
 8000780:	bf00      	nop
 8000782:	3758      	adds	r7, #88	; 0x58
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200001b0 	.word	0x200001b0
 800078c:	40012c00 	.word	0x40012c00

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	; (80007ec <MX_USART2_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 800079c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007d4:	f005 f935 	bl	8005a42 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 f8f9 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200001fc 	.word	0x200001fc
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_DMA_Init+0x58>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a13      	ldr	r2, [pc, #76]	; (8000848 <MX_DMA_Init+0x58>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_DMA_Init+0x58>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	200b      	movs	r0, #11
 8000814:	f001 fc4d 	bl	80020b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000818:	200b      	movs	r0, #11
 800081a:	f001 fc66 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	200d      	movs	r0, #13
 8000824:	f001 fc45 	bl	80020b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000828:	200d      	movs	r0, #13
 800082a:	f001 fc5e 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	200e      	movs	r0, #14
 8000834:	f001 fc3d 	bl	80020b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000838:	200e      	movs	r0, #14
 800083a:	f001 fc56 	bl	80020ea <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_GPIO_Init+0x5c>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <MX_GPIO_Init+0x5c>)
 8000858:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800085c:	6153      	str	r3, [r2, #20]
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_GPIO_Init+0x5c>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_GPIO_Init+0x5c>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <MX_GPIO_Init+0x5c>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_GPIO_Init+0x5c>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_GPIO_Init+0x5c>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <MX_GPIO_Init+0x5c>)
 8000888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_GPIO_Init+0x5c>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if ( timer_ar_value == TIM1_PWM_FREQ_4K )
 80008b4:	4b45      	ldr	r3, [pc, #276]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80008bc:	4293      	cmp	r3, r2
 80008be:	d11c      	bne.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x4e>
  {
    timer_ar_value = TIM1_PWM_FREQ_8K;
 80008c0:	4b42      	ldr	r3, [pc, #264]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008c2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80008c6:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD( &htim1, TIM1_PWM_FREQ_8K );
 80008c8:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f643 2298 	movw	r2, #15000	; 0x3a98
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d2:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008d4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80008d8:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, TIM1_PWM_8K_25DUTY );
 80008da:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f640 62a6 	movw	r2, #3750	; 0xea6
 80008e2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, TIM1_PWM_8K_50DUTY );
 80008e4:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80008ec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, TIM1_PWM_8K_75DUTY );
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f642 32f2 	movw	r2, #11250	; 0x2bf2
 80008f6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_AUTORELOAD( &htim1, TIM1_PWM_FREQ_4K );
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, TIM1_PWM_4K_25DUTY );
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, TIM1_PWM_4K_50DUTY );
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, TIM1_PWM_4K_75DUTY );
  }
}
 80008f8:	e061      	b.n	80009be <HAL_TIM_PeriodElapsedCallback+0x112>
  else if ( timer_ar_value == TIM1_PWM_FREQ_8K )
 80008fa:	4b34      	ldr	r3, [pc, #208]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000902:	4293      	cmp	r3, r2
 8000904:	d11c      	bne.n	8000940 <HAL_TIM_PeriodElapsedCallback+0x94>
    timer_ar_value = TIM1_PWM_FREQ_16K;
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000908:	f247 5230 	movw	r2, #30000	; 0x7530
 800090c:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD( &htim1, TIM1_PWM_FREQ_16K );
 800090e:	4b30      	ldr	r3, [pc, #192]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f247 5230 	movw	r2, #30000	; 0x7530
 8000916:	62da      	str	r2, [r3, #44]	; 0x2c
 8000918:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800091a:	f247 5230 	movw	r2, #30000	; 0x7530
 800091e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, TIM1_PWM_16K_25DUTY );
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, TIM1_PWM_16K_50DUTY );
 800092a:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000932:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, TIM1_PWM_16K_75DUTY );
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f245 72e4 	movw	r2, #22500	; 0x57e4
 800093c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800093e:	e03e      	b.n	80009be <HAL_TIM_PeriodElapsedCallback+0x112>
  else if ( timer_ar_value == TIM1_PWM_FREQ_16K )
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f247 5230 	movw	r2, #30000	; 0x7530
 8000948:	4293      	cmp	r3, r2
 800094a:	d11c      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0xda>
    timer_ar_value = TIM1_PWM_FREQ_4K;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x120>)
 800094e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000952:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD( &htim1, TIM1_PWM_FREQ_4K );
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000960:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000964:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, TIM1_PWM_4K_25DUTY );
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f240 7253 	movw	r2, #1875	; 0x753
 800096e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, TIM1_PWM_4K_50DUTY );
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f640 62a6 	movw	r2, #3750	; 0xea6
 8000978:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, TIM1_PWM_4K_75DUTY );
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f241 52f9 	movw	r2, #5625	; 0x15f9
 8000982:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000984:	e01b      	b.n	80009be <HAL_TIM_PeriodElapsedCallback+0x112>
    timer_ar_value = TIM1_PWM_FREQ_4K;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000988:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800098c:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD( &htim1, TIM1_PWM_FREQ_4K );
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800099a:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800099e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, TIM1_PWM_4K_25DUTY );
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f240 7253 	movw	r2, #1875	; 0x753
 80009a8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, TIM1_PWM_4K_50DUTY );
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f640 62a6 	movw	r2, #3750	; 0xea6
 80009b2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, TIM1_PWM_4K_75DUTY );
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f241 52f9 	movw	r2, #5625	; 0x15f9
 80009bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000000 	.word	0x20000000
 80009d0:	200001b0 	.word	0x200001b0

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_MspInit+0x44>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_MspInit+0x44>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6193      	str	r3, [r2, #24]
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_MspInit+0x44>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x44>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x44>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	61d3      	str	r3, [r2, #28]
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x44>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a48:	d14c      	bne.n	8000ae4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a4a:	4b28      	ldr	r3, [pc, #160]	; (8000aec <HAL_ADC_MspInit+0xc4>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a27      	ldr	r2, [pc, #156]	; (8000aec <HAL_ADC_MspInit+0xc4>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6153      	str	r3, [r2, #20]
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <HAL_ADC_MspInit+0xc4>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_ADC_MspInit+0xc4>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	4a21      	ldr	r2, [pc, #132]	; (8000aec <HAL_ADC_MspInit+0xc4>)
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	6153      	str	r3, [r2, #20]
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_ADC_MspInit+0xc4>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f001 fda8 	bl	80025e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <HAL_ADC_MspInit+0xc8>)
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_ADC_MspInit+0xcc>)
 8000a98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_ADC_MspInit+0xc8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <HAL_ADC_MspInit+0xc8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_ADC_MspInit+0xc8>)
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_ADC_MspInit+0xc8>)
 8000aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_ADC_MspInit+0xc8>)
 8000ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_ADC_MspInit+0xc8>)
 8000abe:	2220      	movs	r2, #32
 8000ac0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_ADC_MspInit+0xc8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <HAL_ADC_MspInit+0xc8>)
 8000aca:	f001 fbf3 	bl	80022b4 <HAL_DMA_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000ad4:	f7ff ff7e 	bl	80009d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <HAL_ADC_MspInit+0xc8>)
 8000adc:	639a      	str	r2, [r3, #56]	; 0x38
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_ADC_MspInit+0xc8>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000
 8000af0:	20000084 	.word	0x20000084
 8000af4:	40020008 	.word	0x40020008

08000af8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a44      	ldr	r2, [pc, #272]	; (8000c28 <HAL_DAC_MspInit+0x130>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	f040 8081 	bne.w	8000c1e <HAL_DAC_MspInit+0x126>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b1c:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <HAL_DAC_MspInit+0x134>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	4a42      	ldr	r2, [pc, #264]	; (8000c2c <HAL_DAC_MspInit+0x134>)
 8000b22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b26:	61d3      	str	r3, [r2, #28]
 8000b28:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <HAL_DAC_MspInit+0x134>)
 8000b2a:	69db      	ldr	r3, [r3, #28]
 8000b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b3d      	ldr	r3, [pc, #244]	; (8000c2c <HAL_DAC_MspInit+0x134>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	4a3c      	ldr	r2, [pc, #240]	; (8000c2c <HAL_DAC_MspInit+0x134>)
 8000b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3e:	6153      	str	r3, [r2, #20]
 8000b40:	4b3a      	ldr	r3, [pc, #232]	; (8000c2c <HAL_DAC_MspInit+0x134>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b4c:	2330      	movs	r3, #48	; 0x30
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b50:	2303      	movs	r3, #3
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f001 fd3f 	bl	80025e4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000b66:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <HAL_DAC_MspInit+0x138>)
 8000b68:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <HAL_DAC_MspInit+0x13c>)
 8000b6a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b6c:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <HAL_DAC_MspInit+0x138>)
 8000b6e:	2210      	movs	r2, #16
 8000b70:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b72:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <HAL_DAC_MspInit+0x138>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <HAL_DAC_MspInit+0x138>)
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <HAL_DAC_MspInit+0x138>)
 8000b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b84:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <HAL_DAC_MspInit+0x138>)
 8000b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b8c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000b8e:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <HAL_DAC_MspInit+0x138>)
 8000b90:	2220      	movs	r2, #32
 8000b92:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b94:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <HAL_DAC_MspInit+0x138>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <HAL_DAC_MspInit+0x138>)
 8000b9c:	f001 fb8a 	bl	80022b4 <HAL_DMA_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8000ba6:	f7ff ff15 	bl	80009d4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <HAL_DAC_MspInit+0x140>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <HAL_DAC_MspInit+0x140>)
 8000bb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bb4:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	; (8000c30 <HAL_DAC_MspInit+0x138>)
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <HAL_DAC_MspInit+0x138>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel4;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <HAL_DAC_MspInit+0x144>)
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <HAL_DAC_MspInit+0x148>)
 8000bc6:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_DAC_MspInit+0x144>)
 8000bca:	2210      	movs	r2, #16
 8000bcc:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <HAL_DAC_MspInit+0x144>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_DAC_MspInit+0x144>)
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_DAC_MspInit+0x144>)
 8000bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_DAC_MspInit+0x144>)
 8000be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000be8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_DAC_MspInit+0x144>)
 8000bec:	2220      	movs	r2, #32
 8000bee:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_DAC_MspInit+0x144>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8000bf6:	4811      	ldr	r0, [pc, #68]	; (8000c3c <HAL_DAC_MspInit+0x144>)
 8000bf8:	f001 fb5c 	bl	80022b4 <HAL_DMA_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_DAC_MspInit+0x10e>
    {
      Error_Handler();
 8000c02:	f7ff fee7 	bl	80009d4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_DAC_MspInit+0x140>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <HAL_DAC_MspInit+0x140>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c10:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <HAL_DAC_MspInit+0x144>)
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_DAC_MspInit+0x144>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40007400 	.word	0x40007400
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	200000dc 	.word	0x200000dc
 8000c34:	40020030 	.word	0x40020030
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	20000120 	.word	0x20000120
 8000c40:	40020044 	.word	0x40020044

08000c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_I2C_MspInit+0x7c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d127      	bne.n	8000cb6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_I2C_MspInit+0x80>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <HAL_I2C_MspInit+0x80>)
 8000c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c70:	6153      	str	r3, [r2, #20]
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_I2C_MspInit+0x80>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c7e:	23c0      	movs	r3, #192	; 0xc0
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c82:	2312      	movs	r3, #18
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <HAL_I2C_MspInit+0x84>)
 8000c9a:	f001 fca3 	bl	80025e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_I2C_MspInit+0x80>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_I2C_MspInit+0x80>)
 8000ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_I2C_MspInit+0x80>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48000400 	.word	0x48000400

08000ccc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_TIM_PWM_MspInit+0x44>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d113      	bne.n	8000d06 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_TIM_PWM_MspInit+0x48>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a0c      	ldr	r2, [pc, #48]	; (8000d14 <HAL_TIM_PWM_MspInit+0x48>)
 8000ce4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_TIM_PWM_MspInit+0x48>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2019      	movs	r0, #25
 8000cfc:	f001 f9d9 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d00:	2019      	movs	r0, #25
 8000d02:	f001 f9f2 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40012c00 	.word	0x40012c00
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <HAL_TIM_MspPostInit+0xa0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d139      	bne.n	8000dae <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <HAL_TIM_MspPostInit+0xa4>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <HAL_TIM_MspPostInit+0xa4>)
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	6153      	str	r3, [r2, #20]
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_TIM_MspPostInit+0xa4>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <HAL_TIM_MspPostInit+0xa4>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_TIM_MspPostInit+0xa4>)
 8000d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5c:	6153      	str	r3, [r2, #20]
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_TIM_MspPostInit+0xa4>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d6a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d7c:	2306      	movs	r3, #6
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8a:	f001 fc2b 	bl	80025e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_TIM_MspPostInit+0xa8>)
 8000daa:	f001 fc1b 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40012c00 	.word	0x40012c00
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48000400 	.word	0x48000400

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d129      	bne.n	8000e3a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_UART_MspInit+0x84>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_UART_MspInit+0x84>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_UART_MspInit+0x84>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_UART_MspInit+0x84>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <HAL_UART_MspInit+0x84>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	6153      	str	r3, [r2, #20]
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_UART_MspInit+0x84>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000e16:	f248 0304 	movw	r3, #32772	; 0x8004
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e28:	2307      	movs	r3, #7
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f001 fbd5 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40004400 	.word	0x40004400
 8000e48:	40021000 	.word	0x40021000

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f8ac 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ea6:	f001 faab 	bl	8002400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000084 	.word	0x20000084

08000eb4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <DMA1_Channel3_IRQHandler+0x10>)
 8000eba:	f001 faa1 	bl	8002400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000dc 	.word	0x200000dc

08000ec8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <DMA1_Channel4_IRQHandler+0x10>)
 8000ece:	f001 fa97 	bl	8002400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000120 	.word	0x20000120

08000edc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ee2:	f003 fe3f 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200001b0 	.word	0x200001b0

08000ef0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f1a:	490e      	ldr	r1, [pc, #56]	; (8000f54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <LoopForever+0xe>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f30:	4c0b      	ldr	r4, [pc, #44]	; (8000f60 <LoopForever+0x16>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f3e:	f7ff ffd7 	bl	8000ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f005 faed 	bl	8006520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f46:	f7ff f93f 	bl	80001c8 <main>

08000f4a <LoopForever>:

LoopForever:
    b LoopForever
 8000f4a:	e7fe      	b.n	8000f4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f4c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f58:	08006e1c 	.word	0x08006e1c
  ldr r2, =_sbss
 8000f5c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f60:	2000068c 	.word	0x2000068c

08000f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC1_2_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x28>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x28>)
 8000f72:	f043 0310 	orr.w	r3, r3, #16
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f001 f88f 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f808 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fd2c 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40022000 	.word	0x40022000

08000f94 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 f8a7 	bl	8002106 <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f001 f86f 	bl	80020b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000004 	.word	0x20000004
 8000fec:	2000000c 	.word	0x2000000c
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	2000000c 	.word	0x2000000c
 8001018:	20000280 	.word	0x20000280

0800101c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000280 	.word	0x20000280

08001034 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff ffee 	bl	800101c <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffde 	bl	800101c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000000c 	.word	0x2000000c

0800107c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b09a      	sub	sp, #104	; 0x68
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e172      	b.n	80013be <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d176      	bne.n	80011d8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d152      	bne.n	8001198 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fc8b 	bl	8000a28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d13b      	bne.n	8001198 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 fe85 	bl	8001e30 <ADC_Disable>
 8001126:	4603      	mov	r3, r0
 8001128:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2b00      	cmp	r3, #0
 8001136:	d12f      	bne.n	8001198 <HAL_ADC_Init+0xe0>
 8001138:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800113c:	2b00      	cmp	r3, #0
 800113e:	d12b      	bne.n	8001198 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001148:	f023 0302 	bic.w	r3, r3, #2
 800114c:	f043 0202 	orr.w	r2, r3, #2
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001162:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001172:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001174:	4b94      	ldr	r3, [pc, #592]	; (80013c8 <HAL_ADC_Init+0x310>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a94      	ldr	r2, [pc, #592]	; (80013cc <HAL_ADC_Init+0x314>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	0c9a      	lsrs	r2, r3, #18
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800118a:	e002      	b.n	8001192 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3b01      	subs	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f9      	bne.n	800118c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011b4:	d110      	bne.n	80011d8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f023 0312 	bic.w	r3, r3, #18
 80011be:	f043 0210 	orr.w	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f043 0201 	orr.w	r2, r3, #1
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f040 80df 	bne.w	80013a4 <HAL_ADC_Init+0x2ec>
 80011e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 80da 	bne.w	80013a4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 80d2 	bne.w	80013a4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001208:	f043 0202 	orr.w	r2, r3, #2
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001210:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <HAL_ADC_Init+0x318>)
 8001212:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800121c:	d102      	bne.n	8001224 <HAL_ADC_Init+0x16c>
 800121e:	4b6d      	ldr	r3, [pc, #436]	; (80013d4 <HAL_ADC_Init+0x31c>)
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	e002      	b.n	800122a <HAL_ADC_Init+0x172>
 8001224:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001228:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d108      	bne.n	800124a <HAL_ADC_Init+0x192>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_ADC_Init+0x192>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_ADC_Init+0x194>
 800124a:	2300      	movs	r3, #0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d11c      	bne.n	800128a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001250:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001252:	2b00      	cmp	r3, #0
 8001254:	d010      	beq.n	8001278 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	2b01      	cmp	r3, #1
 8001260:	d107      	bne.n	8001272 <HAL_ADC_Init+0x1ba>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_ADC_Init+0x1ba>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_ADC_Init+0x1bc>
 8001272:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001274:	2b00      	cmp	r3, #0
 8001276:	d108      	bne.n	800128a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	431a      	orrs	r2, r3
 8001286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001288:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7e5b      	ldrb	r3, [r3, #25]
 800128e:	035b      	lsls	r3, r3, #13
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001294:	2a01      	cmp	r2, #1
 8001296:	d002      	beq.n	800129e <HAL_ADC_Init+0x1e6>
 8001298:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800129c:	e000      	b.n	80012a0 <HAL_ADC_Init+0x1e8>
 800129e:	2200      	movs	r2, #0
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012b0:	4313      	orrs	r3, r2
 80012b2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d11b      	bne.n	80012f6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7e5b      	ldrb	r3, [r3, #25]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	3b01      	subs	r3, #1
 80012cc:	045a      	lsls	r2, r3, #17
 80012ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012d0:	4313      	orrs	r3, r2
 80012d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d6:	663b      	str	r3, [r7, #96]	; 0x60
 80012d8:	e00d      	b.n	80012f6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80012e2:	f043 0220 	orr.w	r2, r3, #32
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d007      	beq.n	800130e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	4313      	orrs	r3, r2
 8001308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800130a:	4313      	orrs	r3, r2
 800130c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b00      	cmp	r3, #0
 800131a:	d114      	bne.n	8001346 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800132a:	f023 0302 	bic.w	r3, r3, #2
 800132e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7e1b      	ldrb	r3, [r3, #24]
 8001334:	039a      	lsls	r2, r3, #14
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4313      	orrs	r3, r2
 8001340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001342:	4313      	orrs	r3, r2
 8001344:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_ADC_Init+0x320>)
 800134e:	4013      	ands	r3, r2
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001356:	430b      	orrs	r3, r1
 8001358:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d10c      	bne.n	800137c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	f023 010f 	bic.w	r1, r3, #15
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	1e5a      	subs	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
 800137a:	e007      	b.n	800138c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 020f 	bic.w	r2, r2, #15
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f023 0303 	bic.w	r3, r3, #3
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
 80013a2:	e00a      	b.n	80013ba <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f023 0312 	bic.w	r3, r3, #18
 80013ac:	f043 0210 	orr.w	r2, r3, #16
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80013b4:	2301      	movs	r3, #1
 80013b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80013ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3768      	adds	r7, #104	; 0x68
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000004 	.word	0x20000004
 80013cc:	431bde83 	.word	0x431bde83
 80013d0:	50000300 	.word	0x50000300
 80013d4:	50000100 	.word	0x50000100
 80013d8:	fff0c007 	.word	0xfff0c007

080013dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 80b9 	bne.w	800156e <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_ADC_Start_DMA+0x2e>
 8001406:	2302      	movs	r3, #2
 8001408:	e0b4      	b.n	8001574 <HAL_ADC_Start_DMA+0x198>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001412:	4b5a      	ldr	r3, [pc, #360]	; (800157c <HAL_ADC_Start_DMA+0x1a0>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 80a0 	bne.w	8001560 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 fca1 	bl	8001d68 <ADC_Enable>
 8001426:	4603      	mov	r3, r0
 8001428:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b00      	cmp	r3, #0
 800142e:	f040 8092 	bne.w	8001556 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001446:	4b4d      	ldr	r3, [pc, #308]	; (800157c <HAL_ADC_Start_DMA+0x1a0>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 031f 	and.w	r3, r3, #31
 800144e:	2b00      	cmp	r3, #0
 8001450:	d004      	beq.n	800145c <HAL_ADC_Start_DMA+0x80>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800145a:	d115      	bne.n	8001488 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d027      	beq.n	80014c6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800147e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001486:	e01e      	b.n	80014c6 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800149c:	d004      	beq.n	80014a8 <HAL_ADC_Start_DMA+0xcc>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a37      	ldr	r2, [pc, #220]	; (8001580 <HAL_ADC_Start_DMA+0x1a4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d10e      	bne.n	80014c6 <HAL_ADC_Start_DMA+0xea>
 80014a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d007      	beq.n	80014c6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014d2:	d106      	bne.n	80014e2 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	f023 0206 	bic.w	r2, r3, #6
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	645a      	str	r2, [r3, #68]	; 0x44
 80014e0:	e002      	b.n	80014e8 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f4:	4a23      	ldr	r2, [pc, #140]	; (8001584 <HAL_ADC_Start_DMA+0x1a8>)
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fc:	4a22      	ldr	r2, [pc, #136]	; (8001588 <HAL_ADC_Start_DMA+0x1ac>)
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001504:	4a21      	ldr	r2, [pc, #132]	; (800158c <HAL_ADC_Start_DMA+0x1b0>)
 8001506:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	221c      	movs	r2, #28
 800150e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0210 	orr.w	r2, r2, #16
 800151e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3340      	adds	r3, #64	; 0x40
 800153a:	4619      	mov	r1, r3
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f000 feff 	bl	8002342 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0204 	orr.w	r2, r2, #4
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	e00d      	b.n	8001572 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800155e:	e008      	b.n	8001572 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800156c:	e001      	b.n	8001572 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800156e:	2302      	movs	r3, #2
 8001570:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001572:	7dfb      	ldrb	r3, [r7, #23]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	50000300 	.word	0x50000300
 8001580:	50000100 	.word	0x50000100
 8001584:	08001c9d 	.word	0x08001c9d
 8001588:	08001d17 	.word	0x08001d17
 800158c:	08001d33 	.word	0x08001d33

08001590 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001590:	b480      	push	{r7}
 8001592:	b09b      	sub	sp, #108	; 0x6c
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x22>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e2a4      	b.n	8001afc <HAL_ADC_ConfigChannel+0x56c>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f040 8288 	bne.w	8001ada <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d81c      	bhi.n	800160c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	461a      	mov	r2, r3
 80015e6:	231f      	movs	r3, #31
 80015e8:	4093      	lsls	r3, r2
 80015ea:	43db      	mvns	r3, r3
 80015ec:	4019      	ands	r1, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
 800160a:	e063      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b09      	cmp	r3, #9
 8001612:	d81e      	bhi.n	8001652 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	3b1e      	subs	r3, #30
 8001628:	221f      	movs	r2, #31
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	4019      	ands	r1, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	3b1e      	subs	r3, #30
 8001644:	fa00 f203 	lsl.w	r2, r0, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	635a      	str	r2, [r3, #52]	; 0x34
 8001650:	e040      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b0e      	cmp	r3, #14
 8001658:	d81e      	bhi.n	8001698 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	3b3c      	subs	r3, #60	; 0x3c
 800166e:	221f      	movs	r2, #31
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	4019      	ands	r1, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	3b3c      	subs	r3, #60	; 0x3c
 800168a:	fa00 f203 	lsl.w	r2, r0, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	639a      	str	r2, [r3, #56]	; 0x38
 8001696:	e01d      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	3b5a      	subs	r3, #90	; 0x5a
 80016ac:	221f      	movs	r2, #31
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	4019      	ands	r1, r3
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	3b5a      	subs	r3, #90	; 0x5a
 80016c8:	fa00 f203 	lsl.w	r2, r0, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 80e5 	bne.w	80018ae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b09      	cmp	r3, #9
 80016ea:	d91c      	bls.n	8001726 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6999      	ldr	r1, [r3, #24]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	3b1e      	subs	r3, #30
 80016fe:	2207      	movs	r2, #7
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	4019      	ands	r1, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	6898      	ldr	r0, [r3, #8]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	3b1e      	subs	r3, #30
 8001718:	fa00 f203 	lsl.w	r2, r0, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	619a      	str	r2, [r3, #24]
 8001724:	e019      	b.n	800175a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6959      	ldr	r1, [r3, #20]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	2207      	movs	r2, #7
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4019      	ands	r1, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6898      	ldr	r0, [r3, #8]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	fa00 f203 	lsl.w	r2, r0, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	695a      	ldr	r2, [r3, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	3b01      	subs	r3, #1
 8001778:	2b03      	cmp	r3, #3
 800177a:	d84f      	bhi.n	800181c <HAL_ADC_ConfigChannel+0x28c>
 800177c:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <HAL_ADC_ConfigChannel+0x1f4>)
 800177e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001782:	bf00      	nop
 8001784:	08001795 	.word	0x08001795
 8001788:	080017b7 	.word	0x080017b7
 800178c:	080017d9 	.word	0x080017d9
 8001790:	080017fb 	.word	0x080017fb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800179a:	4b94      	ldr	r3, [pc, #592]	; (80019ec <HAL_ADC_ConfigChannel+0x45c>)
 800179c:	4013      	ands	r3, r2
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	0691      	lsls	r1, r2, #26
 80017a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017a6:	430a      	orrs	r2, r1
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017b2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017b4:	e07e      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017bc:	4b8b      	ldr	r3, [pc, #556]	; (80019ec <HAL_ADC_ConfigChannel+0x45c>)
 80017be:	4013      	ands	r3, r2
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	0691      	lsls	r1, r2, #26
 80017c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017c8:	430a      	orrs	r2, r1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017d4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017d6:	e06d      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017de:	4b83      	ldr	r3, [pc, #524]	; (80019ec <HAL_ADC_ConfigChannel+0x45c>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	0691      	lsls	r1, r2, #26
 80017e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017ea:	430a      	orrs	r2, r1
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017f6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017f8:	e05c      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001800:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <HAL_ADC_ConfigChannel+0x45c>)
 8001802:	4013      	ands	r3, r2
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	0691      	lsls	r1, r2, #26
 800180a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800180c:	430a      	orrs	r2, r1
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001818:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800181a:	e04b      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	069b      	lsls	r3, r3, #26
 800182c:	429a      	cmp	r2, r3
 800182e:	d107      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800183e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001846:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	069b      	lsls	r3, r3, #26
 8001850:	429a      	cmp	r2, r3
 8001852:	d107      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001862:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800186a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	069b      	lsls	r3, r3, #26
 8001874:	429a      	cmp	r2, r3
 8001876:	d107      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001886:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800188e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	069b      	lsls	r3, r3, #26
 8001898:	429a      	cmp	r2, r3
 800189a:	d10a      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018aa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018ac:	e001      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018ae:	bf00      	nop
 80018b0:	e000      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80018b2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d108      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x344>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x344>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x346>
 80018d4:	2300      	movs	r3, #0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 810a 	bne.w	8001af0 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d00f      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	400a      	ands	r2, r1
 80018fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001902:	e049      	b.n	8001998 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	409a      	lsls	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b09      	cmp	r3, #9
 8001924:	d91c      	bls.n	8001960 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6999      	ldr	r1, [r3, #24]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	3b1b      	subs	r3, #27
 8001938:	2207      	movs	r2, #7
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	4019      	ands	r1, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	6898      	ldr	r0, [r3, #8]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	3b1b      	subs	r3, #27
 8001952:	fa00 f203 	lsl.w	r2, r0, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	619a      	str	r2, [r3, #24]
 800195e:	e01b      	b.n	8001998 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6959      	ldr	r1, [r3, #20]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	2207      	movs	r2, #7
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	4019      	ands	r1, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6898      	ldr	r0, [r3, #8]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	fa00 f203 	lsl.w	r2, r0, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_ADC_ConfigChannel+0x460>)
 800199a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b10      	cmp	r3, #16
 80019a2:	d105      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d015      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019b4:	2b11      	cmp	r3, #17
 80019b6:	d105      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00b      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019c8:	2b12      	cmp	r3, #18
 80019ca:	f040 8091 	bne.w	8001af0 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80019ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 808a 	bne.w	8001af0 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e4:	d108      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x468>
 80019e6:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_ADC_ConfigChannel+0x464>)
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e008      	b.n	80019fe <HAL_ADC_ConfigChannel+0x46e>
 80019ec:	83fff000 	.word	0x83fff000
 80019f0:	50000300 	.word	0x50000300
 80019f4:	50000100 	.word	0x50000100
 80019f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019fc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d108      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x48e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x48e>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x490>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d150      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a24:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d010      	beq.n	8001a4c <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x4b6>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x4b6>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x4b8>
 8001a46:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d13c      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b10      	cmp	r3, #16
 8001a52:	d11d      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x500>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a5c:	d118      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a68:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6a:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <HAL_ADC_ConfigChannel+0x578>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a27      	ldr	r2, [pc, #156]	; (8001b0c <HAL_ADC_ConfigChannel+0x57c>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9a      	lsrs	r2, r3, #18
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a80:	e002      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f9      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a8e:	e02e      	b.n	8001aee <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b11      	cmp	r3, #17
 8001a96:	d10b      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x520>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aa0:	d106      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aac:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aae:	e01e      	b.n	8001aee <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b12      	cmp	r3, #18
 8001ab6:	d11a      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ac4:	e013      	b.n	8001aee <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f043 0220 	orr.w	r2, r3, #32
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ad8:	e00a      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f043 0220 	orr.w	r2, r3, #32
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001aec:	e000      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aee:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001af8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	376c      	adds	r7, #108	; 0x6c
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	20000004 	.word	0x20000004
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b099      	sub	sp, #100	; 0x64
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b28:	d102      	bne.n	8001b30 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001b2a:	4b5a      	ldr	r3, [pc, #360]	; (8001c94 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	e002      	b.n	8001b36 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001b30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b34:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0a2      	b.n	8001c86 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e09b      	b.n	8001c86 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d17f      	bne.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d179      	bne.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b70:	4b49      	ldr	r3, [pc, #292]	; (8001c98 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001b72:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d040      	beq.n	8001bfe <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b8e:	035b      	lsls	r3, r3, #13
 8001b90:	430b      	orrs	r3, r1
 8001b92:	431a      	orrs	r2, r3
 8001b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b96:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d108      	bne.n	8001bb8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d15c      	bne.n	8001c78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d107      	bne.n	8001bda <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001bda:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d14b      	bne.n	8001c78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001be8:	f023 030f 	bic.w	r3, r3, #15
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	6811      	ldr	r1, [r2, #0]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	6892      	ldr	r2, [r2, #8]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bfa:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bfc:	e03c      	b.n	8001c78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c08:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d108      	bne.n	8001c2a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d123      	bne.n	8001c78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d107      	bne.n	8001c4c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001c4c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d112      	bne.n	8001c78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c5a:	f023 030f 	bic.w	r3, r3, #15
 8001c5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c60:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c62:	e009      	b.n	8001c78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f043 0220 	orr.w	r2, r3, #32
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001c76:	e000      	b.n	8001c7a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c78:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001c86:	4618      	mov	r0, r3
 8001c88:	3764      	adds	r7, #100	; 0x64
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	50000100 	.word	0x50000100
 8001c98:	50000300 	.word	0x50000300

08001c9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d126      	bne.n	8001d04 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d115      	bne.n	8001cfc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d111      	bne.n	8001cfc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f7ff f9bd 	bl	800107c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001d02:	e004      	b.n	8001d0e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f7ff f9b3 	bl	8001090 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d50:	f043 0204 	orr.w	r2, r3, #4
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f7ff f9a3 	bl	80010a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d108      	bne.n	8001d94 <ADC_Enable+0x2c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <ADC_Enable+0x2c>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <ADC_Enable+0x2e>
 8001d94:	2300      	movs	r3, #0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d143      	bne.n	8001e22 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <ADC_Enable+0xc4>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00d      	beq.n	8001dc4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f043 0210 	orr.w	r2, r3, #16
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e02f      	b.n	8001e24 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001dd4:	f7ff f922 	bl	800101c <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dda:	e01b      	b.n	8001e14 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ddc:	f7ff f91e 	bl	800101c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d914      	bls.n	8001e14 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d00d      	beq.n	8001e14 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f043 0210 	orr.w	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e007      	b.n	8001e24 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d1dc      	bne.n	8001ddc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	8000003f 	.word	0x8000003f

08001e30 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d108      	bne.n	8001e5c <ADC_Disable+0x2c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <ADC_Disable+0x2c>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <ADC_Disable+0x2e>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d047      	beq.n	8001ef2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 030d 	and.w	r3, r3, #13
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d10f      	bne.n	8001e90 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0202 	orr.w	r2, r2, #2
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2203      	movs	r2, #3
 8001e86:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e88:	f7ff f8c8 	bl	800101c <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e8e:	e029      	b.n	8001ee4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f043 0210 	orr.w	r2, r3, #16
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e023      	b.n	8001ef4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001eac:	f7ff f8b6 	bl	800101c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d914      	bls.n	8001ee4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d10d      	bne.n	8001ee4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f043 0210 	orr.w	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	f043 0201 	orr.w	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e007      	b.n	8001ef4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d0dc      	beq.n	8001eac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db0b      	blt.n	8001f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4907      	ldr	r1, [pc, #28]	; (8001f98 <__NVIC_EnableIRQ+0x38>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	; (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002068:	d301      	bcc.n	800206e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <SysTick_Config+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002076:	210f      	movs	r1, #15
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f7ff ff8e 	bl	8001f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <SysTick_Config+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <SysTick_Config+0x40>)
 8002088:	2207      	movs	r2, #7
 800208a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff29 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c4:	f7ff ff3e 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 80020c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff ff8e 	bl	8001ff0 <NVIC_EncodePriority>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff5d 	bl	8001f9c <__NVIC_SetPriority>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff31 	bl	8001f60 <__NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffa2 	bl	8002058 <SysTick_Config>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e014      	b.n	800215a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	791b      	ldrb	r3, [r3, #4]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d105      	bne.n	8002146 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7fe fcd9 	bl	8000af8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef* hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 8002162:	b480      	push	{r7}
 8002164:	b087      	sub	sp, #28
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	603b      	str	r3, [r7, #0]
  uint32_t data = 0U, tmp = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b08      	cmp	r3, #8
 800217c:	d105      	bne.n	800218a <HAL_DACEx_DualSetValue+0x28>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e004      	b.n	8002194 <HAL_DACEx_DualSetValue+0x32>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	041b      	lsls	r3, r3, #16
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
  }

    tmp = (uint32_t) (hdac->Instance);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	613b      	str	r3, [r7, #16]
    tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	3320      	adds	r3, #32
 80021a2:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Returns the DAC channel data output register value */
  if(Channel == DAC_CHANNEL_1) 
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d103      	bne.n	80021d0 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	e002      	b.n	80021d6 <HAL_DAC_GetValue+0x1e>
  }
  else /* channel = DAC_CHANNEL_2  */
  {
    return hdac->Instance->DOR2;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	795b      	ldrb	r3, [r3, #5]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_DAC_ConfigChannel+0x20>
 8002200:	2302      	movs	r3, #2
 8002202:	e04e      	b.n	80022a2 <HAL_DAC_ConfigChannel+0xbe>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2202      	movs	r2, #2
 800220e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <HAL_DAC_ConfigChannel+0xcc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d112      	bne.n	8002248 <HAL_DAC_ConfigChannel+0x64>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10f      	bne.n	8002248 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002228:	f640 72fe 	movw	r2, #4094	; 0xffe
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4013      	ands	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e00e      	b.n	8002266 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8002248:	f640 72fe 	movw	r2, #4094	; 0xffe
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	4013      	ands	r3, r2
 8002258:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6819      	ldr	r1, [r3, #0]
 8002282:	22c0      	movs	r2, #192	; 0xc0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40007400 	.word	0x40007400

080022b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e037      	b.n	800233a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2202      	movs	r2, #2
 80022ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022e0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022e4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f941 	bl	80025a4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}  
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_DMA_Start_IT+0x20>
 800235e:	2302      	movs	r3, #2
 8002360:	e04a      	b.n	80023f8 <HAL_DMA_Start_IT+0xb6>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002370:	2b01      	cmp	r3, #1
 8002372:	d13a      	bne.n	80023ea <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f8d4 	bl	8002546 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 020e 	orr.w	r2, r2, #14
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	e00f      	b.n	80023d8 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 020a 	orr.w	r2, r2, #10
 80023c6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0204 	bic.w	r2, r2, #4
 80023d6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e005      	b.n	80023f6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
 80023f4:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80023f6:	7dfb      	ldrb	r3, [r7, #23]
} 
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	2204      	movs	r2, #4
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d024      	beq.n	8002472 <HAL_DMA_IRQHandler+0x72>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01f      	beq.n	8002472 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	d107      	bne.n	8002450 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0204 	bic.w	r2, r2, #4
 800244e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002458:	2104      	movs	r1, #4
 800245a:	fa01 f202 	lsl.w	r2, r1, r2
 800245e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d06a      	beq.n	800253e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002470:	e065      	b.n	800253e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	2202      	movs	r2, #2
 8002478:	409a      	lsls	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d02c      	beq.n	80024dc <HAL_DMA_IRQHandler+0xdc>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d027      	beq.n	80024dc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10b      	bne.n	80024b2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 020a 	bic.w	r2, r2, #10
 80024a8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ba:	2102      	movs	r1, #2
 80024bc:	fa01 f202 	lsl.w	r2, r1, r2
 80024c0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d035      	beq.n	800253e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80024da:	e030      	b.n	800253e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2208      	movs	r2, #8
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d028      	beq.n	800253e <HAL_DMA_IRQHandler+0x13e>
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d023      	beq.n	800253e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 020e 	bic.w	r2, r2, #14
 8002504:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
    }
  }
}  
 800253c:	e7ff      	b.n	800253e <HAL_DMA_IRQHandler+0x13e>
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	2101      	movs	r1, #1
 800255e:	fa01 f202 	lsl.w	r2, r1, r2
 8002562:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b10      	cmp	r3, #16
 8002572:	d108      	bne.n	8002586 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002584:	e007      	b.n	8002596 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	60da      	str	r2, [r3, #12]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <DMA_CalcBaseAndBitshift+0x34>)
 80025b4:	4413      	add	r3, r2
 80025b6:	4a09      	ldr	r2, [pc, #36]	; (80025dc <DMA_CalcBaseAndBitshift+0x38>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	009a      	lsls	r2, r3, #2
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a06      	ldr	r2, [pc, #24]	; (80025e0 <DMA_CalcBaseAndBitshift+0x3c>)
 80025c8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	bffdfff8 	.word	0xbffdfff8
 80025dc:	cccccccd 	.word	0xcccccccd
 80025e0:	40020000 	.word	0x40020000

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f2:	e14e      	b.n	8002892 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2101      	movs	r1, #1
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8140 	beq.w	800288c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d005      	beq.n	8002624 <HAL_GPIO_Init+0x40>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d130      	bne.n	8002686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265a:	2201      	movs	r2, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 0201 	and.w	r2, r3, #1
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b03      	cmp	r3, #3
 8002690:	d017      	beq.n	80026c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d123      	bne.n	8002716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	08da      	lsrs	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3208      	adds	r2, #8
 80026d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	08da      	lsrs	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3208      	adds	r2, #8
 8002710:	6939      	ldr	r1, [r7, #16]
 8002712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0203 	and.w	r2, r3, #3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 809a 	beq.w	800288c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002758:	4b55      	ldr	r3, [pc, #340]	; (80028b0 <HAL_GPIO_Init+0x2cc>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4a54      	ldr	r2, [pc, #336]	; (80028b0 <HAL_GPIO_Init+0x2cc>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6193      	str	r3, [r2, #24]
 8002764:	4b52      	ldr	r3, [pc, #328]	; (80028b0 <HAL_GPIO_Init+0x2cc>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002770:	4a50      	ldr	r2, [pc, #320]	; (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	220f      	movs	r2, #15
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800279a:	d013      	beq.n	80027c4 <HAL_GPIO_Init+0x1e0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a46      	ldr	r2, [pc, #280]	; (80028b8 <HAL_GPIO_Init+0x2d4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00d      	beq.n	80027c0 <HAL_GPIO_Init+0x1dc>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a45      	ldr	r2, [pc, #276]	; (80028bc <HAL_GPIO_Init+0x2d8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <HAL_GPIO_Init+0x1d8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a44      	ldr	r2, [pc, #272]	; (80028c0 <HAL_GPIO_Init+0x2dc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_GPIO_Init+0x1d4>
 80027b4:	2303      	movs	r3, #3
 80027b6:	e006      	b.n	80027c6 <HAL_GPIO_Init+0x1e2>
 80027b8:	2305      	movs	r3, #5
 80027ba:	e004      	b.n	80027c6 <HAL_GPIO_Init+0x1e2>
 80027bc:	2302      	movs	r3, #2
 80027be:	e002      	b.n	80027c6 <HAL_GPIO_Init+0x1e2>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_GPIO_Init+0x1e2>
 80027c4:	2300      	movs	r3, #0
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	f002 0203 	and.w	r2, r2, #3
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	4093      	lsls	r3, r2
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027d6:	4937      	ldr	r1, [pc, #220]	; (80028b4 <HAL_GPIO_Init+0x2d0>)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e4:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <HAL_GPIO_Init+0x2e0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002808:	4a2e      	ldr	r2, [pc, #184]	; (80028c4 <HAL_GPIO_Init+0x2e0>)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800280e:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_GPIO_Init+0x2e0>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002832:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <HAL_GPIO_Init+0x2e0>)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002838:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_GPIO_Init+0x2e0>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800285c:	4a19      	ldr	r2, [pc, #100]	; (80028c4 <HAL_GPIO_Init+0x2e0>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002862:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_GPIO_Init+0x2e0>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002886:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_GPIO_Init+0x2e0>)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	f47f aea9 	bne.w	80025f4 <HAL_GPIO_Init+0x10>
  }
}
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010000 	.word	0x40010000
 80028b8:	48000400 	.word	0x48000400
 80028bc:	48000800 	.word	0x48000800
 80028c0:	48000c00 	.word	0x48000c00
 80028c4:	40010400 	.word	0x40010400

080028c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e081      	b.n	80029de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe f9a8 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	; 0x24
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002918:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002928:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d107      	bne.n	8002942 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	e006      	b.n	8002950 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800294e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d104      	bne.n	8002962 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002960:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002974:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002984:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69d9      	ldr	r1, [r3, #28]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1a      	ldr	r2, [r3, #32]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	4608      	mov	r0, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	817b      	strh	r3, [r7, #10]
 80029fa:	460b      	mov	r3, r1
 80029fc:	813b      	strh	r3, [r7, #8]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	f040 80f9 	bne.w	8002c02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_I2C_Mem_Write+0x34>
 8002a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d105      	bne.n	8002a28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0ed      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_I2C_Mem_Write+0x4e>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e0e6      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a3e:	f7fe faed 	bl	800101c <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2319      	movs	r3, #25
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f955 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0d1      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2221      	movs	r2, #33	; 0x21
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a3a      	ldr	r2, [r7, #32]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a88:	88f8      	ldrh	r0, [r7, #6]
 8002a8a:	893a      	ldrh	r2, [r7, #8]
 8002a8c:	8979      	ldrh	r1, [r7, #10]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4603      	mov	r3, r0
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f8b9 	bl	8002c10 <I2C_RequestMemoryWrite>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0a9      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2bff      	cmp	r3, #255	; 0xff
 8002ab8:	d90e      	bls.n	8002ad8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	22ff      	movs	r2, #255	; 0xff
 8002abe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	8979      	ldrh	r1, [r7, #10]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fa47 	bl	8002f64 <I2C_TransferConfig>
 8002ad6:	e00f      	b.n	8002af8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	8979      	ldrh	r1, [r7, #10]
 8002aea:	2300      	movs	r3, #0
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fa36 	bl	8002f64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f93f 	bl	8002d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e07b      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d034      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x1c8>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d130      	bne.n	8002bb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	2200      	movs	r2, #0
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f8d1 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e04d      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2bff      	cmp	r3, #255	; 0xff
 8002b70:	d90e      	bls.n	8002b90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	22ff      	movs	r2, #255	; 0xff
 8002b76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	8979      	ldrh	r1, [r7, #10]
 8002b80:	2300      	movs	r3, #0
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f9eb 	bl	8002f64 <I2C_TransferConfig>
 8002b8e:	e00f      	b.n	8002bb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f9da 	bl	8002f64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d19e      	bne.n	8002af8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f91e 	bl	8002e00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e01a      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <HAL_I2C_Mem_Write+0x224>)
 8002be2:	400b      	ands	r3, r1
 8002be4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	fe00e800 	.word	0xfe00e800

08002c10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	4608      	mov	r0, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	817b      	strh	r3, [r7, #10]
 8002c22:	460b      	mov	r3, r1
 8002c24:	813b      	strh	r3, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	8979      	ldrh	r1, [r7, #10]
 8002c30:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <I2C_RequestMemoryWrite+0xa4>)
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f993 	bl	8002f64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	69b9      	ldr	r1, [r7, #24]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f89c 	bl	8002d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e02c      	b.n	8002cac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d105      	bne.n	8002c64 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c58:	893b      	ldrh	r3, [r7, #8]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
 8002c62:	e015      	b.n	8002c90 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c64:	893b      	ldrh	r3, [r7, #8]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	69b9      	ldr	r1, [r7, #24]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f882 	bl	8002d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e012      	b.n	8002cac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c86:	893b      	ldrh	r3, [r7, #8]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2200      	movs	r2, #0
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f830 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	80002000 	.word	0x80002000

08002cb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d103      	bne.n	8002cd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d007      	beq.n	8002cf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	619a      	str	r2, [r3, #24]
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d10:	e022      	b.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d01e      	beq.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1a:	f7fe f97f 	bl	800101c <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d302      	bcc.n	8002d30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d113      	bne.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d34:	f043 0220 	orr.w	r2, r3, #32
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e00f      	b.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4013      	ands	r3, r2
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d0cd      	beq.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d8c:	e02c      	b.n	8002de8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f870 	bl	8002e78 <I2C_IsAcknowledgeFailed>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e02a      	b.n	8002df8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d01e      	beq.n	8002de8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7fe f937 	bl	800101c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d113      	bne.n	8002de8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e007      	b.n	8002df8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d1cb      	bne.n	8002d8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e0c:	e028      	b.n	8002e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f830 	bl	8002e78 <I2C_IsAcknowledgeFailed>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e026      	b.n	8002e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e22:	f7fe f8fb 	bl	800101c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d302      	bcc.n	8002e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d113      	bne.n	8002e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3c:	f043 0220 	orr.w	r2, r3, #32
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e007      	b.n	8002e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d1cf      	bne.n	8002e0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b10      	cmp	r3, #16
 8002e90:	d161      	bne.n	8002f56 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ea0:	d02b      	beq.n	8002efa <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eb0:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb2:	e022      	b.n	8002efa <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d01e      	beq.n	8002efa <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebc:	f7fe f8ae 	bl	800101c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d302      	bcc.n	8002ed2 <I2C_IsAcknowledgeFailed+0x5a>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d113      	bne.n	8002efa <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f043 0220 	orr.w	r2, r3, #32
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e02e      	b.n	8002f58 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d1d5      	bne.n	8002eb4 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2220      	movs	r2, #32
 8002f16:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7ff fecd 	bl	8002cb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <I2C_IsAcknowledgeFailed+0xe8>)
 8002f2a:	400b      	ands	r3, r1
 8002f2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	f043 0204 	orr.w	r2, r3, #4
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	fe00e800 	.word	0xfe00e800

08002f64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	817b      	strh	r3, [r7, #10]
 8002f72:	4613      	mov	r3, r2
 8002f74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	0d5b      	lsrs	r3, r3, #21
 8002f80:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f84:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <I2C_TransferConfig+0x58>)
 8002f86:	430b      	orrs	r3, r1
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	ea02 0103 	and.w	r1, r2, r3
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f94:	7a7b      	ldrb	r3, [r7, #9]
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	03ff63ff 	.word	0x03ff63ff

08002fc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d138      	bne.n	8003048 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e032      	b.n	800304a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	; 0x24
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003012:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6819      	ldr	r1, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e000      	b.n	800304a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003048:	2302      	movs	r3, #2
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003056:	b480      	push	{r7}
 8003058:	b085      	sub	sp, #20
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b20      	cmp	r3, #32
 800306a:	d139      	bne.n	80030e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003076:	2302      	movs	r3, #2
 8003078:	e033      	b.n	80030e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2224      	movs	r2, #36	; 0x24
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	e000      	b.n	80030e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
  }
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003100:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f001 b823 	b.w	800415c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 817d 	beq.w	8003426 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800312c:	4bbc      	ldr	r3, [pc, #752]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b04      	cmp	r3, #4
 8003136:	d00c      	beq.n	8003152 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003138:	4bb9      	ldr	r3, [pc, #740]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d15c      	bne.n	80031fe <HAL_RCC_OscConfig+0x10e>
 8003144:	4bb6      	ldr	r3, [pc, #728]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003150:	d155      	bne.n	80031fe <HAL_RCC_OscConfig+0x10e>
 8003152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003156:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003166:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_RCC_OscConfig+0x94>
 800317e:	4ba8      	ldr	r3, [pc, #672]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	e015      	b.n	80031b0 <HAL_RCC_OscConfig+0xc0>
 8003184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003188:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800319c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80031a0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80031ac:	4b9c      	ldr	r3, [pc, #624]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031b4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80031b8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80031bc:	fa92 f2a2 	rbit	r2, r2
 80031c0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80031c4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80031c8:	fab2 f282 	clz	r2, r2
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	f042 0220 	orr.w	r2, r2, #32
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f002 021f 	and.w	r2, r2, #31
 80031d8:	2101      	movs	r1, #1
 80031da:	fa01 f202 	lsl.w	r2, r1, r2
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 811f 	beq.w	8003424 <HAL_RCC_OscConfig+0x334>
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f040 8116 	bne.w	8003424 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f000 bfaf 	b.w	800415c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x12e>
 8003210:	4b83      	ldr	r3, [pc, #524]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a82      	ldr	r2, [pc, #520]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	e036      	b.n	800328c <HAL_RCC_OscConfig+0x19c>
 800321e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x158>
 800322e:	4b7c      	ldr	r3, [pc, #496]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a7b      	ldr	r2, [pc, #492]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4b79      	ldr	r3, [pc, #484]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a78      	ldr	r2, [pc, #480]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e021      	b.n	800328c <HAL_RCC_OscConfig+0x19c>
 8003248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x184>
 800325a:	4b71      	ldr	r3, [pc, #452]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a70      	ldr	r2, [pc, #448]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b6e      	ldr	r3, [pc, #440]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6d      	ldr	r2, [pc, #436]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0x19c>
 8003274:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a69      	ldr	r2, [pc, #420]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 800327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b67      	ldr	r3, [pc, #412]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a66      	ldr	r2, [pc, #408]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800328c:	4b64      	ldr	r3, [pc, #400]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f023 020f 	bic.w	r2, r3, #15
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	495f      	ldr	r1, [pc, #380]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d059      	beq.n	800336a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fd feb1 	bl	800101c <HAL_GetTick>
 80032ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fd feac 	bl	800101c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b64      	cmp	r3, #100	; 0x64
 80032ce:	d902      	bls.n	80032d6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	f000 bf43 	b.w	800415c <HAL_RCC_OscConfig+0x106c>
 80032d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032da:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80032ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <HAL_RCC_OscConfig+0x218>
 8003302:	4b47      	ldr	r3, [pc, #284]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	e015      	b.n	8003334 <HAL_RCC_OscConfig+0x244>
 8003308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800331c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003320:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003324:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003330:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003338:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800333c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003340:	fa92 f2a2 	rbit	r2, r2
 8003344:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003348:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f002 021f 	and.w	r2, r2, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ab      	beq.n	80032c0 <HAL_RCC_OscConfig+0x1d0>
 8003368:	e05d      	b.n	8003426 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7fd fe57 	bl	800101c <HAL_GetTick>
 800336e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	e00a      	b.n	800338a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003374:	f7fd fe52 	bl	800101c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b64      	cmp	r3, #100	; 0x64
 8003382:	d902      	bls.n	800338a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	f000 bee9 	b.w	800415c <HAL_RCC_OscConfig+0x106c>
 800338a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800338e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800339e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d102      	bne.n	80033bc <HAL_RCC_OscConfig+0x2cc>
 80033b6:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	e015      	b.n	80033e8 <HAL_RCC_OscConfig+0x2f8>
 80033bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80033d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033d8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_RCC_OscConfig+0x330>)
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80033f0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80033f4:	fa92 f2a2 	rbit	r2, r2
 80033f8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80033fc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003400:	fab2 f282 	clz	r2, r2
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	f042 0220 	orr.w	r2, r2, #32
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	f002 021f 	and.w	r2, r2, #31
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f202 	lsl.w	r2, r1, r2
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1ab      	bne.n	8003374 <HAL_RCC_OscConfig+0x284>
 800341c:	e003      	b.n	8003426 <HAL_RCC_OscConfig+0x336>
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 817d 	beq.w	8003736 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800343c:	4ba6      	ldr	r3, [pc, #664]	; (80036d8 <HAL_RCC_OscConfig+0x5e8>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003448:	4ba3      	ldr	r3, [pc, #652]	; (80036d8 <HAL_RCC_OscConfig+0x5e8>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b08      	cmp	r3, #8
 8003452:	d172      	bne.n	800353a <HAL_RCC_OscConfig+0x44a>
 8003454:	4ba0      	ldr	r3, [pc, #640]	; (80036d8 <HAL_RCC_OscConfig+0x5e8>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d16c      	bne.n	800353a <HAL_RCC_OscConfig+0x44a>
 8003460:	2302      	movs	r3, #2
 8003462:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003472:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d102      	bne.n	8003490 <HAL_RCC_OscConfig+0x3a0>
 800348a:	4b93      	ldr	r3, [pc, #588]	; (80036d8 <HAL_RCC_OscConfig+0x5e8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	e013      	b.n	80034b8 <HAL_RCC_OscConfig+0x3c8>
 8003490:	2302      	movs	r3, #2
 8003492:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80034a2:	2302      	movs	r3, #2
 80034a4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80034a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80034b4:	4b88      	ldr	r3, [pc, #544]	; (80036d8 <HAL_RCC_OscConfig+0x5e8>)
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	2202      	movs	r2, #2
 80034ba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80034be:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80034c2:	fa92 f2a2 	rbit	r2, r2
 80034c6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80034ca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80034ce:	fab2 f282 	clz	r2, r2
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	f042 0220 	orr.w	r2, r2, #32
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f002 021f 	and.w	r2, r2, #31
 80034de:	2101      	movs	r1, #1
 80034e0:	fa01 f202 	lsl.w	r2, r1, r2
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCC_OscConfig+0x410>
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f000 be2e 	b.w	800415c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4b75      	ldr	r3, [pc, #468]	; (80036d8 <HAL_RCC_OscConfig+0x5e8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	21f8      	movs	r1, #248	; 0xf8
 8003516:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800351e:	fa91 f1a1 	rbit	r1, r1
 8003522:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003526:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800352a:	fab1 f181 	clz	r1, r1
 800352e:	b2c9      	uxtb	r1, r1
 8003530:	408b      	lsls	r3, r1
 8003532:	4969      	ldr	r1, [pc, #420]	; (80036d8 <HAL_RCC_OscConfig+0x5e8>)
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003538:	e0fd      	b.n	8003736 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800353a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8088 	beq.w	800365c <HAL_RCC_OscConfig+0x56c>
 800354c:	2301      	movs	r3, #1
 800354e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800355e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800356c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	461a      	mov	r2, r3
 8003574:	2301      	movs	r3, #1
 8003576:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fd fd50 	bl	800101c <HAL_GetTick>
 800357c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003582:	f7fd fd4b 	bl	800101c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	f000 bde2 	b.w	800415c <HAL_RCC_OscConfig+0x106c>
 8003598:	2302      	movs	r3, #2
 800359a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80035aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d102      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4d8>
 80035c2:	4b45      	ldr	r3, [pc, #276]	; (80036d8 <HAL_RCC_OscConfig+0x5e8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	e013      	b.n	80035f0 <HAL_RCC_OscConfig+0x500>
 80035c8:	2302      	movs	r3, #2
 80035ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035da:	2302      	movs	r3, #2
 80035dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80035ec:	4b3a      	ldr	r3, [pc, #232]	; (80036d8 <HAL_RCC_OscConfig+0x5e8>)
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	2202      	movs	r2, #2
 80035f2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80035f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80035fa:	fa92 f2a2 	rbit	r2, r2
 80035fe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003602:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003606:	fab2 f282 	clz	r2, r2
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	f042 0220 	orr.w	r2, r2, #32
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	f002 021f 	and.w	r2, r2, #31
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f202 	lsl.w	r2, r1, r2
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0af      	beq.n	8003582 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003622:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <HAL_RCC_OscConfig+0x5e8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	21f8      	movs	r1, #248	; 0xf8
 8003638:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003640:	fa91 f1a1 	rbit	r1, r1
 8003644:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003648:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800364c:	fab1 f181 	clz	r1, r1
 8003650:	b2c9      	uxtb	r1, r1
 8003652:	408b      	lsls	r3, r1
 8003654:	4920      	ldr	r1, [pc, #128]	; (80036d8 <HAL_RCC_OscConfig+0x5e8>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
 800365a:	e06c      	b.n	8003736 <HAL_RCC_OscConfig+0x646>
 800365c:	2301      	movs	r3, #1
 800365e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800366e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800367c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	461a      	mov	r2, r3
 8003684:	2300      	movs	r3, #0
 8003686:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fd fcc8 	bl	800101c <HAL_GetTick>
 800368c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003690:	e00a      	b.n	80036a8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003692:	f7fd fcc3 	bl	800101c <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d902      	bls.n	80036a8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	f000 bd5a 	b.w	800415c <HAL_RCC_OscConfig+0x106c>
 80036a8:	2302      	movs	r3, #2
 80036aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80036ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d104      	bne.n	80036dc <HAL_RCC_OscConfig+0x5ec>
 80036d2:	4b01      	ldr	r3, [pc, #4]	; (80036d8 <HAL_RCC_OscConfig+0x5e8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	e015      	b.n	8003704 <HAL_RCC_OscConfig+0x614>
 80036d8:	40021000 	.word	0x40021000
 80036dc:	2302      	movs	r3, #2
 80036de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036ee:	2302      	movs	r3, #2
 80036f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003700:	4bc8      	ldr	r3, [pc, #800]	; (8003a24 <HAL_RCC_OscConfig+0x934>)
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	2202      	movs	r2, #2
 8003706:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800370a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800370e:	fa92 f2a2 	rbit	r2, r2
 8003712:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003716:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800371a:	fab2 f282 	clz	r2, r2
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	f042 0220 	orr.w	r2, r2, #32
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	f002 021f 	and.w	r2, r2, #31
 800372a:	2101      	movs	r1, #1
 800372c:	fa01 f202 	lsl.w	r2, r1, r2
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1ad      	bne.n	8003692 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8110 	beq.w	800396c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d079      	beq.n	8003850 <HAL_RCC_OscConfig+0x760>
 800375c:	2301      	movs	r3, #1
 800375e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800376e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	4bab      	ldr	r3, [pc, #684]	; (8003a28 <HAL_RCC_OscConfig+0x938>)
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	461a      	mov	r2, r3
 8003782:	2301      	movs	r3, #1
 8003784:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003786:	f7fd fc49 	bl	800101c <HAL_GetTick>
 800378a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003790:	f7fd fc44 	bl	800101c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d902      	bls.n	80037a6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	f000 bcdb 	b.w	800415c <HAL_RCC_OscConfig+0x106c>
 80037a6:	2302      	movs	r3, #2
 80037a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037c0:	2202      	movs	r2, #2
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	fa93 f2a3 	rbit	r2, r3
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037e4:	2202      	movs	r2, #2
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	fa93 f2a3 	rbit	r2, r3
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003800:	4b88      	ldr	r3, [pc, #544]	; (8003a24 <HAL_RCC_OscConfig+0x934>)
 8003802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003808:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800380c:	2102      	movs	r1, #2
 800380e:	6019      	str	r1, [r3, #0]
 8003810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003814:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fa93 f1a3 	rbit	r1, r3
 800381e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003822:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003826:	6019      	str	r1, [r3, #0]
  return result;
 8003828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2101      	movs	r1, #1
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0a0      	beq.n	8003790 <HAL_RCC_OscConfig+0x6a0>
 800384e:	e08d      	b.n	800396c <HAL_RCC_OscConfig+0x87c>
 8003850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003854:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003860:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	fa93 f2a3 	rbit	r2, r3
 800386a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003872:	601a      	str	r2, [r3, #0]
  return result;
 8003874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003878:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800387c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	4b68      	ldr	r3, [pc, #416]	; (8003a28 <HAL_RCC_OscConfig+0x938>)
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	461a      	mov	r2, r3
 800388e:	2300      	movs	r3, #0
 8003890:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003892:	f7fd fbc3 	bl	800101c <HAL_GetTick>
 8003896:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389a:	e00a      	b.n	80038b2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389c:	f7fd fbbe 	bl	800101c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d902      	bls.n	80038b2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	f000 bc55 	b.w	800415c <HAL_RCC_OscConfig+0x106c>
 80038b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80038ba:	2202      	movs	r2, #2
 80038bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f2a3 	rbit	r2, r3
 80038cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038de:	2202      	movs	r2, #2
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	fa93 f2a3 	rbit	r2, r3
 80038f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003902:	2202      	movs	r2, #2
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	fa93 f2a3 	rbit	r2, r3
 8003914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003918:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800391c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800391e:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <HAL_RCC_OscConfig+0x934>)
 8003920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003926:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800392a:	2102      	movs	r1, #2
 800392c:	6019      	str	r1, [r3, #0]
 800392e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003932:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	fa93 f1a3 	rbit	r1, r3
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003944:	6019      	str	r1, [r3, #0]
  return result;
 8003946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	fab3 f383 	clz	r3, r3
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	2101      	movs	r1, #1
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d197      	bne.n	800389c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 81a1 	beq.w	8003cc4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003982:	2300      	movs	r3, #0
 8003984:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003988:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <HAL_RCC_OscConfig+0x934>)
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d116      	bne.n	80039c2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003994:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <HAL_RCC_OscConfig+0x934>)
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	4a22      	ldr	r2, [pc, #136]	; (8003a24 <HAL_RCC_OscConfig+0x934>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399e:	61d3      	str	r3, [r2, #28]
 80039a0:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_RCC_OscConfig+0x934>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80039a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80039ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <HAL_RCC_OscConfig+0x93c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d11a      	bne.n	8003a04 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ce:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <HAL_RCC_OscConfig+0x93c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a16      	ldr	r2, [pc, #88]	; (8003a2c <HAL_RCC_OscConfig+0x93c>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039da:	f7fd fb1f 	bl	800101c <HAL_GetTick>
 80039de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	e009      	b.n	80039f8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e4:	f7fd fb1a 	bl	800101c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b64      	cmp	r3, #100	; 0x64
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e3b1      	b.n	800415c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_RCC_OscConfig+0x93c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ef      	beq.n	80039e4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d10d      	bne.n	8003a30 <HAL_RCC_OscConfig+0x940>
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_OscConfig+0x934>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4a02      	ldr	r2, [pc, #8]	; (8003a24 <HAL_RCC_OscConfig+0x934>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6213      	str	r3, [r2, #32]
 8003a20:	e03c      	b.n	8003a9c <HAL_RCC_OscConfig+0x9ac>
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	10908120 	.word	0x10908120
 8003a2c:	40007000 	.word	0x40007000
 8003a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCC_OscConfig+0x96a>
 8003a40:	4bc1      	ldr	r3, [pc, #772]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4ac0      	ldr	r2, [pc, #768]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	6213      	str	r3, [r2, #32]
 8003a4c:	4bbe      	ldr	r3, [pc, #760]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4abd      	ldr	r2, [pc, #756]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003a52:	f023 0304 	bic.w	r3, r3, #4
 8003a56:	6213      	str	r3, [r2, #32]
 8003a58:	e020      	b.n	8003a9c <HAL_RCC_OscConfig+0x9ac>
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x994>
 8003a6a:	4bb7      	ldr	r3, [pc, #732]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4ab6      	ldr	r2, [pc, #728]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	6213      	str	r3, [r2, #32]
 8003a76:	4bb4      	ldr	r3, [pc, #720]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4ab3      	ldr	r2, [pc, #716]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6213      	str	r3, [r2, #32]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0x9ac>
 8003a84:	4bb0      	ldr	r3, [pc, #704]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	4aaf      	ldr	r2, [pc, #700]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	6213      	str	r3, [r2, #32]
 8003a90:	4bad      	ldr	r3, [pc, #692]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4aac      	ldr	r2, [pc, #688]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003a96:	f023 0304 	bic.w	r3, r3, #4
 8003a9a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8081 	beq.w	8003bb0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aae:	f7fd fab5 	bl	800101c <HAL_GetTick>
 8003ab2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fd fab0 	bl	800101c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e345      	b.n	800415c <HAL_RCC_OscConfig+0x106c>
 8003ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ad8:	2202      	movs	r2, #2
 8003ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	fa93 f2a3 	rbit	r2, r3
 8003aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003afc:	2202      	movs	r2, #2
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b04:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	fa93 f2a3 	rbit	r2, r3
 8003b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b12:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b16:	601a      	str	r2, [r3, #0]
  return result;
 8003b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f043 0302 	orr.w	r3, r3, #2
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d102      	bne.n	8003b3c <HAL_RCC_OscConfig+0xa4c>
 8003b36:	4b84      	ldr	r3, [pc, #528]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	e013      	b.n	8003b64 <HAL_RCC_OscConfig+0xa74>
 8003b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b44:	2202      	movs	r2, #2
 8003b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	fa93 f2a3 	rbit	r2, r3
 8003b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	4b79      	ldr	r3, [pc, #484]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b68:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b6c:	2102      	movs	r1, #2
 8003b6e:	6011      	str	r1, [r2, #0]
 8003b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b74:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	fa92 f1a2 	rbit	r1, r2
 8003b7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b82:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b86:	6011      	str	r1, [r2, #0]
  return result;
 8003b88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b8c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	fab2 f282 	clz	r2, r2
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	f002 021f 	and.w	r2, r2, #31
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d084      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x9c8>
 8003bae:	e07f      	b.n	8003cb0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb0:	f7fd fa34 	bl	800101c <HAL_GetTick>
 8003bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb8:	e00b      	b.n	8003bd2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fd fa2f 	bl	800101c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e2c4      	b.n	800415c <HAL_RCC_OscConfig+0x106c>
 8003bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003bda:	2202      	movs	r2, #2
 8003bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f2a3 	rbit	r2, r3
 8003bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bfe:	2202      	movs	r2, #2
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	fa93 f2a3 	rbit	r2, r3
 8003c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c14:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c18:	601a      	str	r2, [r3, #0]
  return result;
 8003c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c22:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c24:	fab3 f383 	clz	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f043 0302 	orr.w	r3, r3, #2
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d102      	bne.n	8003c3e <HAL_RCC_OscConfig+0xb4e>
 8003c38:	4b43      	ldr	r3, [pc, #268]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	e013      	b.n	8003c66 <HAL_RCC_OscConfig+0xb76>
 8003c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c46:	2202      	movs	r2, #2
 8003c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	fa93 f2a3 	rbit	r2, r3
 8003c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	4b39      	ldr	r3, [pc, #228]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c6a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c6e:	2102      	movs	r1, #2
 8003c70:	6011      	str	r1, [r2, #0]
 8003c72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c76:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	fa92 f1a2 	rbit	r1, r2
 8003c80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c88:	6011      	str	r1, [r2, #0]
  return result;
 8003c8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c8e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	fab2 f282 	clz	r2, r2
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	f002 021f 	and.w	r2, r2, #31
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d184      	bne.n	8003bba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d105      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb8:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8242 	beq.w	800415a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd6:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <HAL_RCC_OscConfig+0xc58>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	f000 8213 	beq.w	800410a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	f040 8162 	bne.w	8003fba <HAL_RCC_OscConfig+0xeca>
 8003cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003cfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d08:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	fa93 f2a3 	rbit	r2, r3
 8003d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d16:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d1a:	601a      	str	r2, [r3, #0]
  return result;
 8003d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d20:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d24:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	461a      	mov	r2, r3
 8003d38:	2300      	movs	r3, #0
 8003d3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fd f96e 	bl	800101c <HAL_GetTick>
 8003d40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d44:	e00c      	b.n	8003d60 <HAL_RCC_OscConfig+0xc70>
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fd f966 	bl	800101c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e1fd      	b.n	800415c <HAL_RCC_OscConfig+0x106c>
 8003d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d64:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d72:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	fa93 f2a3 	rbit	r2, r3
 8003d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d80:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d84:	601a      	str	r2, [r3, #0]
  return result;
 8003d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d90:	fab3 f383 	clz	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d102      	bne.n	8003daa <HAL_RCC_OscConfig+0xcba>
 8003da4:	4bb0      	ldr	r3, [pc, #704]	; (8004068 <HAL_RCC_OscConfig+0xf78>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	e027      	b.n	8003dfa <HAL_RCC_OscConfig+0xd0a>
 8003daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	fa93 f2a3 	rbit	r2, r3
 8003dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003dd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	fa93 f2a3 	rbit	r2, r3
 8003dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	4b9c      	ldr	r3, [pc, #624]	; (8004068 <HAL_RCC_OscConfig+0xf78>)
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dfe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003e02:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e06:	6011      	str	r1, [r2, #0]
 8003e08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e0c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	fa92 f1a2 	rbit	r1, r2
 8003e16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e1a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e1e:	6011      	str	r1, [r2, #0]
  return result;
 8003e20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e24:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	fab2 f282 	clz	r2, r2
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	f042 0220 	orr.w	r2, r2, #32
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	f002 021f 	and.w	r2, r2, #31
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d182      	bne.n	8003d4c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e46:	4b88      	ldr	r3, [pc, #544]	; (8004068 <HAL_RCC_OscConfig+0xf78>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	430b      	orrs	r3, r1
 8003e68:	497f      	ldr	r1, [pc, #508]	; (8004068 <HAL_RCC_OscConfig+0xf78>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
 8003e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e72:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	fa93 f2a3 	rbit	r2, r3
 8003e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e92:	601a      	str	r2, [r3, #0]
  return result;
 8003e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e98:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e9c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ea8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fd f8b2 	bl	800101c <HAL_GetTick>
 8003eb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ebc:	e009      	b.n	8003ed2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7fd f8ad 	bl	800101c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e144      	b.n	800415c <HAL_RCC_OscConfig+0x106c>
 8003ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	fa93 f2a3 	rbit	r2, r3
 8003eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ef6:	601a      	str	r2, [r3, #0]
  return result;
 8003ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d102      	bne.n	8003f1c <HAL_RCC_OscConfig+0xe2c>
 8003f16:	4b54      	ldr	r3, [pc, #336]	; (8004068 <HAL_RCC_OscConfig+0xf78>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	e027      	b.n	8003f6c <HAL_RCC_OscConfig+0xe7c>
 8003f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f20:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	fa93 f2a3 	rbit	r2, r3
 8003f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f46:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f54:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	fa93 f2a3 	rbit	r2, r3
 8003f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f62:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	4b3f      	ldr	r3, [pc, #252]	; (8004068 <HAL_RCC_OscConfig+0xf78>)
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f70:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f78:	6011      	str	r1, [r2, #0]
 8003f7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f7e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	fa92 f1a2 	rbit	r1, r2
 8003f88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f8c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f90:	6011      	str	r1, [r2, #0]
  return result;
 8003f92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f96:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	fab2 f282 	clz	r2, r2
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	f042 0220 	orr.w	r2, r2, #32
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	f002 021f 	and.w	r2, r2, #31
 8003fac:	2101      	movs	r1, #1
 8003fae:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d082      	beq.n	8003ebe <HAL_RCC_OscConfig+0xdce>
 8003fb8:	e0cf      	b.n	800415a <HAL_RCC_OscConfig+0x106a>
 8003fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003fc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fcc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	fa93 f2a3 	rbit	r2, r3
 8003fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fda:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fde:	601a      	str	r2, [r3, #0]
  return result;
 8003fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fe8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ff4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fd f80c 	bl	800101c <HAL_GetTick>
 8004004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004008:	e009      	b.n	800401e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400a:	f7fd f807 	bl	800101c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e09e      	b.n	800415c <HAL_RCC_OscConfig+0x106c>
 800401e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004022:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004026:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800402a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004030:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	fa93 f2a3 	rbit	r2, r3
 800403a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004042:	601a      	str	r2, [r3, #0]
  return result;
 8004044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004048:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800404c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404e:	fab3 f383 	clz	r3, r3
 8004052:	b2db      	uxtb	r3, r3
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d104      	bne.n	800406c <HAL_RCC_OscConfig+0xf7c>
 8004062:	4b01      	ldr	r3, [pc, #4]	; (8004068 <HAL_RCC_OscConfig+0xf78>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	e029      	b.n	80040bc <HAL_RCC_OscConfig+0xfcc>
 8004068:	40021000 	.word	0x40021000
 800406c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004070:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	fa93 f2a3 	rbit	r2, r3
 8004088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004096:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800409a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	fa93 f2a3 	rbit	r2, r3
 80040ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCC_OscConfig+0x1078>)
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040c0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80040c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040c8:	6011      	str	r1, [r2, #0]
 80040ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ce:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	fa92 f1a2 	rbit	r1, r2
 80040d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040e0:	6011      	str	r1, [r2, #0]
  return result;
 80040e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040e6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	fab2 f282 	clz	r2, r2
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	f042 0220 	orr.w	r2, r2, #32
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	f002 021f 	and.w	r2, r2, #31
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d180      	bne.n	800400a <HAL_RCC_OscConfig+0xf1a>
 8004108:	e027      	b.n	800415a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800410a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e01e      	b.n	800415c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_RCC_OscConfig+0x1078>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004126:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800412a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800412e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	429a      	cmp	r2, r3
 800413c:	d10b      	bne.n	8004156 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800413e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004142:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004152:	429a      	cmp	r2, r3
 8004154:	d001      	beq.n	800415a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000

0800416c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b09e      	sub	sp, #120	; 0x78
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e162      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004184:	4b90      	ldr	r3, [pc, #576]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d910      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b8d      	ldr	r3, [pc, #564]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 0207 	bic.w	r2, r3, #7
 800419a:	498b      	ldr	r1, [pc, #556]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b89      	ldr	r3, [pc, #548]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e14a      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c0:	4b82      	ldr	r3, [pc, #520]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	497f      	ldr	r1, [pc, #508]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80dc 	beq.w	8004398 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d13c      	bne.n	8004262 <HAL_RCC_ClockConfig+0xf6>
 80041e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f8:	fab3 f383 	clz	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d102      	bne.n	8004212 <HAL_RCC_ClockConfig+0xa6>
 800420c:	4b6f      	ldr	r3, [pc, #444]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	e00f      	b.n	8004232 <HAL_RCC_ClockConfig+0xc6>
 8004212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004216:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	667b      	str	r3, [r7, #100]	; 0x64
 8004220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004224:	663b      	str	r3, [r7, #96]	; 0x60
 8004226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004228:	fa93 f3a3 	rbit	r3, r3
 800422c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800422e:	4b67      	ldr	r3, [pc, #412]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004236:	65ba      	str	r2, [r7, #88]	; 0x58
 8004238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800423a:	fa92 f2a2 	rbit	r2, r2
 800423e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004242:	fab2 f282 	clz	r2, r2
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	f042 0220 	orr.w	r2, r2, #32
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	f002 021f 	and.w	r2, r2, #31
 8004252:	2101      	movs	r1, #1
 8004254:	fa01 f202 	lsl.w	r2, r1, r2
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d17b      	bne.n	8004356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e0f3      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d13c      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x178>
 800426a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800426e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004272:	fa93 f3a3 	rbit	r3, r3
 8004276:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b01      	cmp	r3, #1
 800428c:	d102      	bne.n	8004294 <HAL_RCC_ClockConfig+0x128>
 800428e:	4b4f      	ldr	r3, [pc, #316]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	e00f      	b.n	80042b4 <HAL_RCC_ClockConfig+0x148>
 8004294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004298:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	647b      	str	r3, [r7, #68]	; 0x44
 80042a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a6:	643b      	str	r3, [r7, #64]	; 0x40
 80042a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042aa:	fa93 f3a3 	rbit	r3, r3
 80042ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b0:	4b46      	ldr	r3, [pc, #280]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80042ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042bc:	fa92 f2a2 	rbit	r2, r2
 80042c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c4:	fab2 f282 	clz	r2, r2
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	f042 0220 	orr.w	r2, r2, #32
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	f002 021f 	and.w	r2, r2, #31
 80042d4:	2101      	movs	r1, #1
 80042d6:	fa01 f202 	lsl.w	r2, r1, r2
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d13a      	bne.n	8004356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0b2      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
 80042e4:	2302      	movs	r3, #2
 80042e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d102      	bne.n	800430c <HAL_RCC_ClockConfig+0x1a0>
 8004306:	4b31      	ldr	r3, [pc, #196]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	e00d      	b.n	8004328 <HAL_RCC_ClockConfig+0x1bc>
 800430c:	2302      	movs	r3, #2
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
 8004318:	2302      	movs	r3, #2
 800431a:	623b      	str	r3, [r7, #32]
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	4b29      	ldr	r3, [pc, #164]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2202      	movs	r2, #2
 800432a:	61ba      	str	r2, [r7, #24]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	fa92 f2a2 	rbit	r2, r2
 8004332:	617a      	str	r2, [r7, #20]
  return result;
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	fab2 f282 	clz	r2, r2
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	f042 0220 	orr.w	r2, r2, #32
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	f002 021f 	and.w	r2, r2, #31
 8004346:	2101      	movs	r1, #1
 8004348:	fa01 f202 	lsl.w	r2, r1, r2
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e079      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004356:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f023 0203 	bic.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	491a      	ldr	r1, [pc, #104]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004364:	4313      	orrs	r3, r2
 8004366:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004368:	f7fc fe58 	bl	800101c <HAL_GetTick>
 800436c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	e00a      	b.n	8004386 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004370:	f7fc fe54 	bl	800101c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e061      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 020c 	and.w	r2, r3, #12
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	429a      	cmp	r2, r3
 8004396:	d1eb      	bne.n	8004370 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d214      	bcs.n	80043d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 0207 	bic.w	r2, r3, #7
 80043ae:	4906      	ldr	r1, [pc, #24]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e040      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
 80043c8:	40022000 	.word	0x40022000
 80043cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043dc:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_RCC_ClockConfig+0x2e8>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	491a      	ldr	r1, [pc, #104]	; (8004454 <HAL_RCC_ClockConfig+0x2e8>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_RCC_ClockConfig+0x2e8>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4912      	ldr	r1, [pc, #72]	; (8004454 <HAL_RCC_ClockConfig+0x2e8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800440e:	f000 f829 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8004412:	4601      	mov	r1, r0
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <HAL_RCC_ClockConfig+0x2e8>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441c:	22f0      	movs	r2, #240	; 0xf0
 800441e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	fa92 f2a2 	rbit	r2, r2
 8004426:	60fa      	str	r2, [r7, #12]
  return result;
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	fab2 f282 	clz	r2, r2
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	40d3      	lsrs	r3, r2
 8004432:	4a09      	ldr	r2, [pc, #36]	; (8004458 <HAL_RCC_ClockConfig+0x2ec>)
 8004434:	5cd3      	ldrb	r3, [r2, r3]
 8004436:	fa21 f303 	lsr.w	r3, r1, r3
 800443a:	4a08      	ldr	r2, [pc, #32]	; (800445c <HAL_RCC_ClockConfig+0x2f0>)
 800443c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_RCC_ClockConfig+0x2f4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fc fda6 	bl	8000f94 <HAL_InitTick>
  
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3778      	adds	r7, #120	; 0x78
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	08006648 	.word	0x08006648
 800445c:	20000004 	.word	0x20000004
 8004460:	20000008 	.word	0x20000008

08004464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b08b      	sub	sp, #44	; 0x2c
 8004468:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	2300      	movs	r3, #0
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800447e:	4b29      	ldr	r3, [pc, #164]	; (8004524 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	2b04      	cmp	r3, #4
 800448c:	d002      	beq.n	8004494 <HAL_RCC_GetSysClockFreq+0x30>
 800448e:	2b08      	cmp	r3, #8
 8004490:	d003      	beq.n	800449a <HAL_RCC_GetSysClockFreq+0x36>
 8004492:	e03c      	b.n	800450e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004494:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004496:	623b      	str	r3, [r7, #32]
      break;
 8004498:	e03c      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	fa92 f2a2 	rbit	r2, r2
 80044ac:	607a      	str	r2, [r7, #4]
  return result;
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	fab2 f282 	clz	r2, r2
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	40d3      	lsrs	r3, r2
 80044b8:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_RCC_GetSysClockFreq+0xc8>)
 80044ba:	5cd3      	ldrb	r3, [r2, r3]
 80044bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044be:	4b19      	ldr	r3, [pc, #100]	; (8004524 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	220f      	movs	r2, #15
 80044c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	fa92 f2a2 	rbit	r2, r2
 80044d0:	60fa      	str	r2, [r7, #12]
  return result;
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	fab2 f282 	clz	r2, r2
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	40d3      	lsrs	r3, r2
 80044dc:	4a14      	ldr	r2, [pc, #80]	; (8004530 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044de:	5cd3      	ldrb	r3, [r2, r3]
 80044e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044ec:	4a0e      	ldr	r2, [pc, #56]	; (8004528 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	e004      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	4a0c      	ldr	r2, [pc, #48]	; (8004534 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	623b      	str	r3, [r7, #32]
      break;
 800450c:	e002      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004510:	623b      	str	r3, [r7, #32]
      break;
 8004512:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004514:	6a3b      	ldr	r3, [r7, #32]
}
 8004516:	4618      	mov	r0, r3
 8004518:	372c      	adds	r7, #44	; 0x2c
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	007a1200 	.word	0x007a1200
 800452c:	08006660 	.word	0x08006660
 8004530:	08006670 	.word	0x08006670
 8004534:	003d0900 	.word	0x003d0900

08004538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <HAL_RCC_GetHCLKFreq+0x14>)
 800453e:	681b      	ldr	r3, [r3, #0]
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	20000004 	.word	0x20000004

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004556:	f7ff ffef 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 800455a:	4601      	mov	r1, r0
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004564:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004568:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	fa92 f2a2 	rbit	r2, r2
 8004570:	603a      	str	r2, [r7, #0]
  return result;
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	fab2 f282 	clz	r2, r2
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	40d3      	lsrs	r3, r2
 800457c:	4a04      	ldr	r2, [pc, #16]	; (8004590 <HAL_RCC_GetPCLK1Freq+0x40>)
 800457e:	5cd3      	ldrb	r3, [r2, r3]
 8004580:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	08006658 	.word	0x08006658

08004594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800459a:	f7ff ffcd 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 800459e:	4601      	mov	r1, r0
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80045a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	fa92 f2a2 	rbit	r2, r2
 80045b4:	603a      	str	r2, [r7, #0]
  return result;
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	fab2 f282 	clz	r2, r2
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	40d3      	lsrs	r3, r2
 80045c0:	4a04      	ldr	r2, [pc, #16]	; (80045d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045c2:	5cd3      	ldrb	r3, [r2, r3]
 80045c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	08006658 	.word	0x08006658

080045d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b092      	sub	sp, #72	; 0x48
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80cd 	beq.w	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fc:	4b86      	ldr	r3, [pc, #536]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10e      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004608:	4b83      	ldr	r3, [pc, #524]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	4a82      	ldr	r2, [pc, #520]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800460e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004612:	61d3      	str	r3, [r2, #28]
 8004614:	4b80      	ldr	r3, [pc, #512]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	4b7d      	ldr	r3, [pc, #500]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d118      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004632:	4b7a      	ldr	r3, [pc, #488]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a79      	ldr	r2, [pc, #484]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463e:	f7fc fced 	bl	800101c <HAL_GetTick>
 8004642:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	e008      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004646:	f7fc fce9 	bl	800101c <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b64      	cmp	r3, #100	; 0x64
 8004652:	d901      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e0db      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	4b70      	ldr	r3, [pc, #448]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004664:	4b6c      	ldr	r3, [pc, #432]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800466e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d07d      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800467e:	429a      	cmp	r2, r3
 8004680:	d076      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004682:	4b65      	ldr	r3, [pc, #404]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004690:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	fa93 f3a3 	rbit	r3, r3
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800469c:	fab3 f383 	clz	r3, r3
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b5e      	ldr	r3, [pc, #376]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	461a      	mov	r2, r3
 80046ac:	2301      	movs	r3, #1
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b8:	fa93 f3a3 	rbit	r3, r3
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c0:	fab3 f383 	clz	r3, r3
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	4b55      	ldr	r3, [pc, #340]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	461a      	mov	r2, r3
 80046d0:	2300      	movs	r3, #0
 80046d2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046d4:	4a50      	ldr	r2, [pc, #320]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d045      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fc fc9a 	bl	800101c <HAL_GetTick>
 80046e8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ea:	e00a      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ec:	f7fc fc96 	bl	800101c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e086      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004702:	2302      	movs	r3, #2
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	fa93 f3a3 	rbit	r3, r3
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
 800470e:	2302      	movs	r3, #2
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	61fb      	str	r3, [r7, #28]
  return result;
 800471a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471c:	fab3 f383 	clz	r3, r3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	b2db      	uxtb	r3, r3
 8004726:	f043 0302 	orr.w	r3, r3, #2
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d102      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004730:	4b39      	ldr	r3, [pc, #228]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	e007      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004736:	2302      	movs	r3, #2
 8004738:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	fa93 f3a3 	rbit	r3, r3
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	4b35      	ldr	r3, [pc, #212]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	2202      	movs	r2, #2
 8004748:	613a      	str	r2, [r7, #16]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	fa92 f2a2 	rbit	r2, r2
 8004750:	60fa      	str	r2, [r7, #12]
  return result;
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	fab2 f282 	clz	r2, r2
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	f002 021f 	and.w	r2, r2, #31
 8004764:	2101      	movs	r1, #1
 8004766:	fa01 f202 	lsl.w	r2, r1, r2
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0bd      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004770:	4b29      	ldr	r3, [pc, #164]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4926      	ldr	r1, [pc, #152]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800477e:	4313      	orrs	r3, r2
 8004780:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004782:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004786:	2b01      	cmp	r3, #1
 8004788:	d105      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478a:	4b23      	ldr	r3, [pc, #140]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4a22      	ldr	r2, [pc, #136]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004794:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047a2:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	f023 0203 	bic.w	r2, r3, #3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	491a      	ldr	r1, [pc, #104]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c0:	4b15      	ldr	r3, [pc, #84]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	f023 0210 	bic.w	r2, r3, #16
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4912      	ldr	r1, [pc, #72]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047de:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	490b      	ldr	r1, [pc, #44]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	4903      	ldr	r1, [pc, #12]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800480a:	4313      	orrs	r3, r2
 800480c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3748      	adds	r7, #72	; 0x48
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000
 800481c:	40007000 	.word	0x40007000
 8004820:	10908100 	.word	0x10908100

08004824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d001      	beq.n	800483c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e040      	b.n	80048be <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <HAL_TIM_Base_Start_IT+0xa8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00e      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x58>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004866:	d009      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x58>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <HAL_TIM_Base_Start_IT+0xac>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x58>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d115      	bne.n	80048a8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004884:	4013      	ands	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b06      	cmp	r3, #6
 800488c:	d015      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x96>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004894:	d011      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a6:	e008      	b.n	80048ba <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	e000      	b.n	80048bc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40012c00 	.word	0x40012c00
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40014000 	.word	0x40014000
 80048d8:	00010007 	.word	0x00010007

080048dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e049      	b.n	8004982 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fc f9e2 	bl	8000ccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 fb7e 	bl	800501c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <HAL_TIM_PWM_Start+0x24>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	bf14      	ite	ne
 80049a8:	2301      	movne	r3, #1
 80049aa:	2300      	moveq	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e03c      	b.n	8004a2a <HAL_TIM_PWM_Start+0x9e>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d109      	bne.n	80049ca <HAL_TIM_PWM_Start+0x3e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	bf14      	ite	ne
 80049c2:	2301      	movne	r3, #1
 80049c4:	2300      	moveq	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	e02f      	b.n	8004a2a <HAL_TIM_PWM_Start+0x9e>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d109      	bne.n	80049e4 <HAL_TIM_PWM_Start+0x58>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e022      	b.n	8004a2a <HAL_TIM_PWM_Start+0x9e>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b0c      	cmp	r3, #12
 80049e8:	d109      	bne.n	80049fe <HAL_TIM_PWM_Start+0x72>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	bf14      	ite	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2300      	moveq	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	e015      	b.n	8004a2a <HAL_TIM_PWM_Start+0x9e>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d109      	bne.n	8004a18 <HAL_TIM_PWM_Start+0x8c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e008      	b.n	8004a2a <HAL_TIM_PWM_Start+0x9e>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e088      	b.n	8004b44 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Start+0xb6>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a40:	e023      	b.n	8004a8a <HAL_TIM_PWM_Start+0xfe>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start+0xc6>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a50:	e01b      	b.n	8004a8a <HAL_TIM_PWM_Start+0xfe>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start+0xd6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a60:	e013      	b.n	8004a8a <HAL_TIM_PWM_Start+0xfe>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b0c      	cmp	r3, #12
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start+0xe6>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a70:	e00b      	b.n	8004a8a <HAL_TIM_PWM_Start+0xfe>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start+0xf6>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	e003      	b.n	8004a8a <HAL_TIM_PWM_Start+0xfe>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	6839      	ldr	r1, [r7, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fde0 	bl	8005658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a2b      	ldr	r2, [pc, #172]	; (8004b4c <HAL_TIM_PWM_Start+0x1c0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0x134>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <HAL_TIM_PWM_Start+0x1c4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0x134>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a28      	ldr	r2, [pc, #160]	; (8004b54 <HAL_TIM_PWM_Start+0x1c8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0x134>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a27      	ldr	r2, [pc, #156]	; (8004b58 <HAL_TIM_PWM_Start+0x1cc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIM_PWM_Start+0x138>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_TIM_PWM_Start+0x13a>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_TIM_PWM_Start+0x1c0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x176>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aec:	d009      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x176>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1a      	ldr	r2, [pc, #104]	; (8004b5c <HAL_TIM_PWM_Start+0x1d0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x176>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <HAL_TIM_PWM_Start+0x1c4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d115      	bne.n	8004b2e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <HAL_TIM_PWM_Start+0x1d4>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b06      	cmp	r3, #6
 8004b12:	d015      	beq.n	8004b40 <HAL_TIM_PWM_Start+0x1b4>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1a:	d011      	beq.n	8004b40 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2c:	e008      	b.n	8004b40 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0201 	orr.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e000      	b.n	8004b42 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	00010007 	.word	0x00010007

08004b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d122      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d11b      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0202 	mvn.w	r2, #2
 8004b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa1a 	bl	8004fe0 <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa0c 	bl	8004fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fa1d 	bl	8004ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d122      	bne.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d11b      	bne.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0204 	mvn.w	r2, #4
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f9f0 	bl	8004fe0 <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f9e2 	bl	8004fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f9f3 	bl	8004ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d122      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d11b      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0208 	mvn.w	r2, #8
 8004c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9c6 	bl	8004fe0 <HAL_TIM_IC_CaptureCallback>
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f9b8 	bl	8004fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f9c9 	bl	8004ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d122      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d11b      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0210 	mvn.w	r2, #16
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2208      	movs	r2, #8
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f99c 	bl	8004fe0 <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f98e 	bl	8004fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f99f 	bl	8004ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d10e      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d107      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0201 	mvn.w	r2, #1
 8004ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fb fde2 	bl	80008ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	2b80      	cmp	r3, #128	; 0x80
 8004cf4:	d10e      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d107      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fe5e 	bl	80059d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d22:	d10e      	bne.n	8004d42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2e:	2b80      	cmp	r3, #128	; 0x80
 8004d30:	d107      	bne.n	8004d42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fe51 	bl	80059e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d10e      	bne.n	8004d6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b40      	cmp	r3, #64	; 0x40
 8004d5c:	d107      	bne.n	8004d6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f94d 	bl	8005008 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d10e      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d107      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f06f 0220 	mvn.w	r2, #32
 8004d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fe11 	bl	80059bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e0ff      	b.n	8004fc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b14      	cmp	r3, #20
 8004dce:	f200 80f0 	bhi.w	8004fb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dd2:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004fb3 	.word	0x08004fb3
 8004de0:	08004fb3 	.word	0x08004fb3
 8004de4:	08004fb3 	.word	0x08004fb3
 8004de8:	08004e6d 	.word	0x08004e6d
 8004dec:	08004fb3 	.word	0x08004fb3
 8004df0:	08004fb3 	.word	0x08004fb3
 8004df4:	08004fb3 	.word	0x08004fb3
 8004df8:	08004eaf 	.word	0x08004eaf
 8004dfc:	08004fb3 	.word	0x08004fb3
 8004e00:	08004fb3 	.word	0x08004fb3
 8004e04:	08004fb3 	.word	0x08004fb3
 8004e08:	08004eef 	.word	0x08004eef
 8004e0c:	08004fb3 	.word	0x08004fb3
 8004e10:	08004fb3 	.word	0x08004fb3
 8004e14:	08004fb3 	.word	0x08004fb3
 8004e18:	08004f31 	.word	0x08004f31
 8004e1c:	08004fb3 	.word	0x08004fb3
 8004e20:	08004fb3 	.word	0x08004fb3
 8004e24:	08004fb3 	.word	0x08004fb3
 8004e28:	08004f71 	.word	0x08004f71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f96a 	bl	800510c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0208 	orr.w	r2, r2, #8
 8004e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0204 	bic.w	r2, r2, #4
 8004e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6999      	ldr	r1, [r3, #24]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	619a      	str	r2, [r3, #24]
      break;
 8004e6a:	e0a5      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f9d0 	bl	8005218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6999      	ldr	r1, [r3, #24]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	021a      	lsls	r2, r3, #8
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	619a      	str	r2, [r3, #24]
      break;
 8004eac:	e084      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fa2f 	bl	8005318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0208 	orr.w	r2, r2, #8
 8004ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0204 	bic.w	r2, r2, #4
 8004ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69d9      	ldr	r1, [r3, #28]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	61da      	str	r2, [r3, #28]
      break;
 8004eec:	e064      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fa8d 	bl	8005414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69d9      	ldr	r1, [r3, #28]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	021a      	lsls	r2, r3, #8
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	61da      	str	r2, [r3, #28]
      break;
 8004f2e:	e043      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fad0 	bl	80054dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0208 	orr.w	r2, r2, #8
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0204 	bic.w	r2, r2, #4
 8004f5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f6e:	e023      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fb0e 	bl	8005598 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	021a      	lsls	r2, r3, #8
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fb0:	e002      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop

08004fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a32      	ldr	r2, [pc, #200]	; (80050f8 <TIM_Base_SetConfig+0xdc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d007      	beq.n	8005044 <TIM_Base_SetConfig+0x28>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503a:	d003      	beq.n	8005044 <TIM_Base_SetConfig+0x28>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a2f      	ldr	r2, [pc, #188]	; (80050fc <TIM_Base_SetConfig+0xe0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d108      	bne.n	8005056 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a27      	ldr	r2, [pc, #156]	; (80050f8 <TIM_Base_SetConfig+0xdc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <TIM_Base_SetConfig+0x6a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005064:	d00f      	beq.n	8005086 <TIM_Base_SetConfig+0x6a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a24      	ldr	r2, [pc, #144]	; (80050fc <TIM_Base_SetConfig+0xe0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00b      	beq.n	8005086 <TIM_Base_SetConfig+0x6a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a23      	ldr	r2, [pc, #140]	; (8005100 <TIM_Base_SetConfig+0xe4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d007      	beq.n	8005086 <TIM_Base_SetConfig+0x6a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a22      	ldr	r2, [pc, #136]	; (8005104 <TIM_Base_SetConfig+0xe8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d003      	beq.n	8005086 <TIM_Base_SetConfig+0x6a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a21      	ldr	r2, [pc, #132]	; (8005108 <TIM_Base_SetConfig+0xec>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d108      	bne.n	8005098 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a0e      	ldr	r2, [pc, #56]	; (80050f8 <TIM_Base_SetConfig+0xdc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00b      	beq.n	80050dc <TIM_Base_SetConfig+0xc0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a0e      	ldr	r2, [pc, #56]	; (8005100 <TIM_Base_SetConfig+0xe4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_Base_SetConfig+0xc0>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a0d      	ldr	r2, [pc, #52]	; (8005104 <TIM_Base_SetConfig+0xe8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0xc0>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a0c      	ldr	r2, [pc, #48]	; (8005108 <TIM_Base_SetConfig+0xec>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d103      	bne.n	80050e4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	615a      	str	r2, [r3, #20]
}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40012c00 	.word	0x40012c00
 80050fc:	40000400 	.word	0x40000400
 8005100:	40014000 	.word	0x40014000
 8005104:	40014400 	.word	0x40014400
 8005108:	40014800 	.word	0x40014800

0800510c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f023 0201 	bic.w	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0303 	bic.w	r3, r3, #3
 8005146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f023 0302 	bic.w	r3, r3, #2
 8005158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a28      	ldr	r2, [pc, #160]	; (8005208 <TIM_OC1_SetConfig+0xfc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00b      	beq.n	8005184 <TIM_OC1_SetConfig+0x78>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a27      	ldr	r2, [pc, #156]	; (800520c <TIM_OC1_SetConfig+0x100>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d007      	beq.n	8005184 <TIM_OC1_SetConfig+0x78>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a26      	ldr	r2, [pc, #152]	; (8005210 <TIM_OC1_SetConfig+0x104>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_OC1_SetConfig+0x78>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a25      	ldr	r2, [pc, #148]	; (8005214 <TIM_OC1_SetConfig+0x108>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d10c      	bne.n	800519e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0308 	bic.w	r3, r3, #8
 800518a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f023 0304 	bic.w	r3, r3, #4
 800519c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <TIM_OC1_SetConfig+0xfc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_OC1_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <TIM_OC1_SetConfig+0x100>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_OC1_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a17      	ldr	r2, [pc, #92]	; (8005210 <TIM_OC1_SetConfig+0x104>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_OC1_SetConfig+0xb2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a16      	ldr	r2, [pc, #88]	; (8005214 <TIM_OC1_SetConfig+0x108>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d111      	bne.n	80051e2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	621a      	str	r2, [r3, #32]
}
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	40012c00 	.word	0x40012c00
 800520c:	40014000 	.word	0x40014000
 8005210:	40014400 	.word	0x40014400
 8005214:	40014800 	.word	0x40014800

08005218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0210 	bic.w	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f023 0320 	bic.w	r3, r3, #32
 8005266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a24      	ldr	r2, [pc, #144]	; (8005308 <TIM_OC2_SetConfig+0xf0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d10d      	bne.n	8005298 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <TIM_OC2_SetConfig+0xf0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00b      	beq.n	80052b8 <TIM_OC2_SetConfig+0xa0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a1a      	ldr	r2, [pc, #104]	; (800530c <TIM_OC2_SetConfig+0xf4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d007      	beq.n	80052b8 <TIM_OC2_SetConfig+0xa0>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a19      	ldr	r2, [pc, #100]	; (8005310 <TIM_OC2_SetConfig+0xf8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_OC2_SetConfig+0xa0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a18      	ldr	r2, [pc, #96]	; (8005314 <TIM_OC2_SetConfig+0xfc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d113      	bne.n	80052e0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052be:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052c6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40014000 	.word	0x40014000
 8005310:	40014400 	.word	0x40014400
 8005314:	40014800 	.word	0x40014800

08005318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a23      	ldr	r2, [pc, #140]	; (8005404 <TIM_OC3_SetConfig+0xec>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d10d      	bne.n	8005396 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005394:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <TIM_OC3_SetConfig+0xec>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00b      	beq.n	80053b6 <TIM_OC3_SetConfig+0x9e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a19      	ldr	r2, [pc, #100]	; (8005408 <TIM_OC3_SetConfig+0xf0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d007      	beq.n	80053b6 <TIM_OC3_SetConfig+0x9e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a18      	ldr	r2, [pc, #96]	; (800540c <TIM_OC3_SetConfig+0xf4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d003      	beq.n	80053b6 <TIM_OC3_SetConfig+0x9e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a17      	ldr	r2, [pc, #92]	; (8005410 <TIM_OC3_SetConfig+0xf8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d113      	bne.n	80053de <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	621a      	str	r2, [r3, #32]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40014000 	.word	0x40014000
 800540c:	40014400 	.word	0x40014400
 8005410:	40014800 	.word	0x40014800

08005414 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	031b      	lsls	r3, r3, #12
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a16      	ldr	r2, [pc, #88]	; (80054cc <TIM_OC4_SetConfig+0xb8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00b      	beq.n	8005490 <TIM_OC4_SetConfig+0x7c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <TIM_OC4_SetConfig+0xbc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d007      	beq.n	8005490 <TIM_OC4_SetConfig+0x7c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC4_SetConfig+0xc0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_OC4_SetConfig+0x7c>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a13      	ldr	r2, [pc, #76]	; (80054d8 <TIM_OC4_SetConfig+0xc4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d109      	bne.n	80054a4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	019b      	lsls	r3, r3, #6
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	40014000 	.word	0x40014000
 80054d4:	40014400 	.word	0x40014400
 80054d8:	40014800 	.word	0x40014800

080054dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005520:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	041b      	lsls	r3, r3, #16
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a15      	ldr	r2, [pc, #84]	; (8005588 <TIM_OC5_SetConfig+0xac>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00b      	beq.n	800554e <TIM_OC5_SetConfig+0x72>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a14      	ldr	r2, [pc, #80]	; (800558c <TIM_OC5_SetConfig+0xb0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d007      	beq.n	800554e <TIM_OC5_SetConfig+0x72>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a13      	ldr	r2, [pc, #76]	; (8005590 <TIM_OC5_SetConfig+0xb4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d003      	beq.n	800554e <TIM_OC5_SetConfig+0x72>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a12      	ldr	r2, [pc, #72]	; (8005594 <TIM_OC5_SetConfig+0xb8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d109      	bne.n	8005562 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005554:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	621a      	str	r2, [r3, #32]
}
 800557c:	bf00      	nop
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40012c00 	.word	0x40012c00
 800558c:	40014000 	.word	0x40014000
 8005590:	40014400 	.word	0x40014400
 8005594:	40014800 	.word	0x40014800

08005598 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	051b      	lsls	r3, r3, #20
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a16      	ldr	r2, [pc, #88]	; (8005648 <TIM_OC6_SetConfig+0xb0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_OC6_SetConfig+0x74>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a15      	ldr	r2, [pc, #84]	; (800564c <TIM_OC6_SetConfig+0xb4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_OC6_SetConfig+0x74>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a14      	ldr	r2, [pc, #80]	; (8005650 <TIM_OC6_SetConfig+0xb8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC6_SetConfig+0x74>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a13      	ldr	r2, [pc, #76]	; (8005654 <TIM_OC6_SetConfig+0xbc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005612:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	029b      	lsls	r3, r3, #10
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400
 8005654:	40014800 	.word	0x40014800

08005658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	2201      	movs	r2, #1
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a1a      	ldr	r2, [r3, #32]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	43db      	mvns	r3, r3
 800567a:	401a      	ands	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a1a      	ldr	r2, [r3, #32]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	fa01 f303 	lsl.w	r3, r1, r3
 8005690:	431a      	orrs	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
	...

080056a4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d109      	bne.n	80056c8 <HAL_TIMEx_PWMN_Start+0x24>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b01      	cmp	r3, #1
 80056be:	bf14      	ite	ne
 80056c0:	2301      	movne	r3, #1
 80056c2:	2300      	moveq	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	e022      	b.n	800570e <HAL_TIMEx_PWMN_Start+0x6a>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d109      	bne.n	80056e2 <HAL_TIMEx_PWMN_Start+0x3e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	bf14      	ite	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	2300      	moveq	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	e015      	b.n	800570e <HAL_TIMEx_PWMN_Start+0x6a>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d109      	bne.n	80056fc <HAL_TIMEx_PWMN_Start+0x58>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	e008      	b.n	800570e <HAL_TIMEx_PWMN_Start+0x6a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e05f      	b.n	80057d6 <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d104      	bne.n	8005726 <HAL_TIMEx_PWMN_Start+0x82>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005724:	e013      	b.n	800574e <HAL_TIMEx_PWMN_Start+0xaa>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b04      	cmp	r3, #4
 800572a:	d104      	bne.n	8005736 <HAL_TIMEx_PWMN_Start+0x92>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005734:	e00b      	b.n	800574e <HAL_TIMEx_PWMN_Start+0xaa>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b08      	cmp	r3, #8
 800573a:	d104      	bne.n	8005746 <HAL_TIMEx_PWMN_Start+0xa2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005744:	e003      	b.n	800574e <HAL_TIMEx_PWMN_Start+0xaa>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2202      	movs	r2, #2
 800574a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2204      	movs	r2, #4
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f94e 	bl	80059f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800576a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1b      	ldr	r2, [pc, #108]	; (80057e0 <HAL_TIMEx_PWMN_Start+0x13c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00e      	beq.n	8005794 <HAL_TIMEx_PWMN_Start+0xf0>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577e:	d009      	beq.n	8005794 <HAL_TIMEx_PWMN_Start+0xf0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a17      	ldr	r2, [pc, #92]	; (80057e4 <HAL_TIMEx_PWMN_Start+0x140>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <HAL_TIMEx_PWMN_Start+0xf0>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <HAL_TIMEx_PWMN_Start+0x144>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d115      	bne.n	80057c0 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	4b14      	ldr	r3, [pc, #80]	; (80057ec <HAL_TIMEx_PWMN_Start+0x148>)
 800579c:	4013      	ands	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b06      	cmp	r3, #6
 80057a4:	d015      	beq.n	80057d2 <HAL_TIMEx_PWMN_Start+0x12e>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ac:	d011      	beq.n	80057d2 <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0201 	orr.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057be:	e008      	b.n	80057d2 <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	e000      	b.n	80057d4 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40014000 	.word	0x40014000
 80057ec:	00010007 	.word	0x00010007

080057f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005804:	2302      	movs	r3, #2
 8005806:	e054      	b.n	80058b2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a24      	ldr	r2, [pc, #144]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d108      	bne.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005838:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a17      	ldr	r2, [pc, #92]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00e      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005870:	d009      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a11      	ldr	r2, [pc, #68]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d10c      	bne.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800588c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	4313      	orrs	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40012c00 	.word	0x40012c00
 80058c4:	40000400 	.word	0x40000400
 80058c8:	40014000 	.word	0x40014000

080058cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e060      	b.n	80059aa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a14      	ldr	r2, [pc, #80]	; (80059b8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d115      	bne.n	8005998 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	051b      	lsls	r3, r3, #20
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40012c00 	.word	0x40012c00

080059bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6a1a      	ldr	r2, [r3, #32]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	401a      	ands	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a1a      	ldr	r2, [r3, #32]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 031f 	and.w	r3, r3, #31
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a30:	431a      	orrs	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e040      	b.n	8005ad6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d106      	bne.n	8005a6a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7fb f9ad 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2224      	movs	r2, #36	; 0x24
 8005a6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0201 	bic.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f82d 	bl	8005ae0 <UART_SetConfig>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e022      	b.n	8005ad6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f957 	bl	8005d4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005abc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0201 	orr.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f9de 	bl	8005e90 <UART_CheckIdleState>
 8005ad4:	4603      	mov	r3, r0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b8a      	ldr	r3, [pc, #552]	; (8005d34 <UART_SetConfig+0x254>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	6979      	ldr	r1, [r7, #20]
 8005b14:	430b      	orrs	r3, r1
 8005b16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a78      	ldr	r2, [pc, #480]	; (8005d38 <UART_SetConfig+0x258>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d120      	bne.n	8005b9e <UART_SetConfig+0xbe>
 8005b5c:	4b77      	ldr	r3, [pc, #476]	; (8005d3c <UART_SetConfig+0x25c>)
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	f003 0303 	and.w	r3, r3, #3
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d817      	bhi.n	8005b98 <UART_SetConfig+0xb8>
 8005b68:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <UART_SetConfig+0x90>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b81 	.word	0x08005b81
 8005b74:	08005b8d 	.word	0x08005b8d
 8005b78:	08005b93 	.word	0x08005b93
 8005b7c:	08005b87 	.word	0x08005b87
 8005b80:	2300      	movs	r3, #0
 8005b82:	77fb      	strb	r3, [r7, #31]
 8005b84:	e01d      	b.n	8005bc2 <UART_SetConfig+0xe2>
 8005b86:	2302      	movs	r3, #2
 8005b88:	77fb      	strb	r3, [r7, #31]
 8005b8a:	e01a      	b.n	8005bc2 <UART_SetConfig+0xe2>
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	77fb      	strb	r3, [r7, #31]
 8005b90:	e017      	b.n	8005bc2 <UART_SetConfig+0xe2>
 8005b92:	2308      	movs	r3, #8
 8005b94:	77fb      	strb	r3, [r7, #31]
 8005b96:	e014      	b.n	8005bc2 <UART_SetConfig+0xe2>
 8005b98:	2310      	movs	r3, #16
 8005b9a:	77fb      	strb	r3, [r7, #31]
 8005b9c:	e011      	b.n	8005bc2 <UART_SetConfig+0xe2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a67      	ldr	r2, [pc, #412]	; (8005d40 <UART_SetConfig+0x260>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d102      	bne.n	8005bae <UART_SetConfig+0xce>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e009      	b.n	8005bc2 <UART_SetConfig+0xe2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a64      	ldr	r2, [pc, #400]	; (8005d44 <UART_SetConfig+0x264>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d102      	bne.n	8005bbe <UART_SetConfig+0xde>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e001      	b.n	8005bc2 <UART_SetConfig+0xe2>
 8005bbe:	2310      	movs	r3, #16
 8005bc0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bca:	d15b      	bne.n	8005c84 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005bcc:	7ffb      	ldrb	r3, [r7, #31]
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d827      	bhi.n	8005c22 <UART_SetConfig+0x142>
 8005bd2:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <UART_SetConfig+0xf8>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c0d 	.word	0x08005c0d
 8005be4:	08005c23 	.word	0x08005c23
 8005be8:	08005c13 	.word	0x08005c13
 8005bec:	08005c23 	.word	0x08005c23
 8005bf0:	08005c23 	.word	0x08005c23
 8005bf4:	08005c23 	.word	0x08005c23
 8005bf8:	08005c1b 	.word	0x08005c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bfc:	f7fe fca8 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8005c00:	61b8      	str	r0, [r7, #24]
        break;
 8005c02:	e013      	b.n	8005c2c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c04:	f7fe fcc6 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 8005c08:	61b8      	str	r0, [r7, #24]
        break;
 8005c0a:	e00f      	b.n	8005c2c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c0c:	4b4e      	ldr	r3, [pc, #312]	; (8005d48 <UART_SetConfig+0x268>)
 8005c0e:	61bb      	str	r3, [r7, #24]
        break;
 8005c10:	e00c      	b.n	8005c2c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c12:	f7fe fc27 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8005c16:	61b8      	str	r0, [r7, #24]
        break;
 8005c18:	e008      	b.n	8005c2c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c1e:	61bb      	str	r3, [r7, #24]
        break;
 8005c20:	e004      	b.n	8005c2c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	77bb      	strb	r3, [r7, #30]
        break;
 8005c2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d074      	beq.n	8005d1c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	005a      	lsls	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	441a      	add	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b0f      	cmp	r3, #15
 8005c4e:	d916      	bls.n	8005c7e <UART_SetConfig+0x19e>
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c56:	d212      	bcs.n	8005c7e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f023 030f 	bic.w	r3, r3, #15
 8005c60:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	085b      	lsrs	r3, r3, #1
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	89fb      	ldrh	r3, [r7, #14]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	89fa      	ldrh	r2, [r7, #14]
 8005c7a:	60da      	str	r2, [r3, #12]
 8005c7c:	e04e      	b.n	8005d1c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	77bb      	strb	r3, [r7, #30]
 8005c82:	e04b      	b.n	8005d1c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c84:	7ffb      	ldrb	r3, [r7, #31]
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d827      	bhi.n	8005cda <UART_SetConfig+0x1fa>
 8005c8a:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <UART_SetConfig+0x1b0>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005cb5 	.word	0x08005cb5
 8005c94:	08005cbd 	.word	0x08005cbd
 8005c98:	08005cc5 	.word	0x08005cc5
 8005c9c:	08005cdb 	.word	0x08005cdb
 8005ca0:	08005ccb 	.word	0x08005ccb
 8005ca4:	08005cdb 	.word	0x08005cdb
 8005ca8:	08005cdb 	.word	0x08005cdb
 8005cac:	08005cdb 	.word	0x08005cdb
 8005cb0:	08005cd3 	.word	0x08005cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb4:	f7fe fc4c 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8005cb8:	61b8      	str	r0, [r7, #24]
        break;
 8005cba:	e013      	b.n	8005ce4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cbc:	f7fe fc6a 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 8005cc0:	61b8      	str	r0, [r7, #24]
        break;
 8005cc2:	e00f      	b.n	8005ce4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc4:	4b20      	ldr	r3, [pc, #128]	; (8005d48 <UART_SetConfig+0x268>)
 8005cc6:	61bb      	str	r3, [r7, #24]
        break;
 8005cc8:	e00c      	b.n	8005ce4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cca:	f7fe fbcb 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8005cce:	61b8      	str	r0, [r7, #24]
        break;
 8005cd0:	e008      	b.n	8005ce4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd6:	61bb      	str	r3, [r7, #24]
        break;
 8005cd8:	e004      	b.n	8005ce4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ce2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d018      	beq.n	8005d1c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	085a      	lsrs	r2, r3, #1
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	441a      	add	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b0f      	cmp	r3, #15
 8005d04:	d908      	bls.n	8005d18 <UART_SetConfig+0x238>
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0c:	d204      	bcs.n	8005d18 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	60da      	str	r2, [r3, #12]
 8005d16:	e001      	b.n	8005d1c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d28:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3720      	adds	r7, #32
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	efff69f3 	.word	0xefff69f3
 8005d38:	40013800 	.word	0x40013800
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	40004400 	.word	0x40004400
 8005d44:	40004800 	.word	0x40004800
 8005d48:	007a1200 	.word	0x007a1200

08005d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	f003 0310 	and.w	r3, r3, #16
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01a      	beq.n	8005e62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e4a:	d10a      	bne.n	8005e62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  }
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ea0:	f7fb f8bc 	bl	800101c <HAL_GetTick>
 8005ea4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0308 	and.w	r3, r3, #8
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d10e      	bne.n	8005ed2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f82d 	bl	8005f22 <UART_WaitOnFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e023      	b.n	8005f1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d10e      	bne.n	8005efe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f817 	bl	8005f22 <UART_WaitOnFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e00d      	b.n	8005f1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b09c      	sub	sp, #112	; 0x70
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f32:	e0a5      	b.n	8006080 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	f000 80a1 	beq.w	8006080 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3e:	f7fb f86d 	bl	800101c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d302      	bcc.n	8005f54 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d13e      	bne.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f68:	667b      	str	r3, [r7, #100]	; 0x64
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e6      	bne.n	8005f54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	f023 0301 	bic.w	r3, r3, #1
 8005f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e5      	bne.n	8005f86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e067      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d04f      	beq.n	8006080 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fee:	d147      	bne.n	8006080 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ff8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800600e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
 800601a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800601e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e6      	bne.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3308      	adds	r3, #8
 8006032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	613b      	str	r3, [r7, #16]
   return(result);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	66bb      	str	r3, [r7, #104]	; 0x68
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3308      	adds	r3, #8
 800604a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800604c:	623a      	str	r2, [r7, #32]
 800604e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	6a3a      	ldr	r2, [r7, #32]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	61bb      	str	r3, [r7, #24]
   return(result);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2220      	movs	r2, #32
 8006064:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2220      	movs	r2, #32
 800606a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e010      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	69da      	ldr	r2, [r3, #28]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	4013      	ands	r3, r2
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	429a      	cmp	r2, r3
 800608e:	bf0c      	ite	eq
 8006090:	2301      	moveq	r3, #1
 8006092:	2300      	movne	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	429a      	cmp	r2, r3
 800609c:	f43f af4a 	beq.w	8005f34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3770      	adds	r7, #112	; 0x70
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80060aa:	b480      	push	{r7}
 80060ac:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80060ae:	bf00      	nop
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af04      	add	r7, sp, #16
 80060be:	4603      	mov	r3, r0
 80060c0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80060c2:	f04f 33ff 	mov.w	r3, #4294967295
 80060c6:	9302      	str	r3, [sp, #8]
 80060c8:	2301      	movs	r3, #1
 80060ca:	9301      	str	r3, [sp, #4]
 80060cc:	1dfb      	adds	r3, r7, #7
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	2301      	movs	r3, #1
 80060d2:	2200      	movs	r2, #0
 80060d4:	2178      	movs	r1, #120	; 0x78
 80060d6:	4803      	ldr	r0, [pc, #12]	; (80060e4 <ssd1306_WriteCommand+0x2c>)
 80060d8:	f7fc fc86 	bl	80029e8 <HAL_I2C_Mem_Write>
}
 80060dc:	bf00      	nop
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000164 	.word	0x20000164

080060e8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af04      	add	r7, sp, #16
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f04f 32ff 	mov.w	r2, #4294967295
 80060fa:	9202      	str	r2, [sp, #8]
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	2301      	movs	r3, #1
 8006104:	2240      	movs	r2, #64	; 0x40
 8006106:	2178      	movs	r1, #120	; 0x78
 8006108:	4803      	ldr	r0, [pc, #12]	; (8006118 <ssd1306_WriteData+0x30>)
 800610a:	f7fc fc6d 	bl	80029e8 <HAL_I2C_Mem_Write>
}
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000164 	.word	0x20000164

0800611c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8006120:	f7ff ffc3 	bl	80060aa <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006124:	2064      	movs	r0, #100	; 0x64
 8006126:	f7fa ff85 	bl	8001034 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800612a:	2000      	movs	r0, #0
 800612c:	f000 f9da 	bl	80064e4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8006130:	2020      	movs	r0, #32
 8006132:	f7ff ffc1 	bl	80060b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8006136:	2000      	movs	r0, #0
 8006138:	f7ff ffbe 	bl	80060b8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800613c:	20b0      	movs	r0, #176	; 0xb0
 800613e:	f7ff ffbb 	bl	80060b8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006142:	20c8      	movs	r0, #200	; 0xc8
 8006144:	f7ff ffb8 	bl	80060b8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006148:	2000      	movs	r0, #0
 800614a:	f7ff ffb5 	bl	80060b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800614e:	2010      	movs	r0, #16
 8006150:	f7ff ffb2 	bl	80060b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006154:	2040      	movs	r0, #64	; 0x40
 8006156:	f7ff ffaf 	bl	80060b8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800615a:	20ff      	movs	r0, #255	; 0xff
 800615c:	f000 f9ae 	bl	80064bc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006160:	20a1      	movs	r0, #161	; 0xa1
 8006162:	f7ff ffa9 	bl	80060b8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006166:	20a6      	movs	r0, #166	; 0xa6
 8006168:	f7ff ffa6 	bl	80060b8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800616c:	20a8      	movs	r0, #168	; 0xa8
 800616e:	f7ff ffa3 	bl	80060b8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8006172:	203f      	movs	r0, #63	; 0x3f
 8006174:	f7ff ffa0 	bl	80060b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006178:	20a4      	movs	r0, #164	; 0xa4
 800617a:	f7ff ff9d 	bl	80060b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800617e:	20d3      	movs	r0, #211	; 0xd3
 8006180:	f7ff ff9a 	bl	80060b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8006184:	2000      	movs	r0, #0
 8006186:	f7ff ff97 	bl	80060b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800618a:	20d5      	movs	r0, #213	; 0xd5
 800618c:	f7ff ff94 	bl	80060b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006190:	20f0      	movs	r0, #240	; 0xf0
 8006192:	f7ff ff91 	bl	80060b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006196:	20d9      	movs	r0, #217	; 0xd9
 8006198:	f7ff ff8e 	bl	80060b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800619c:	2022      	movs	r0, #34	; 0x22
 800619e:	f7ff ff8b 	bl	80060b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80061a2:	20da      	movs	r0, #218	; 0xda
 80061a4:	f7ff ff88 	bl	80060b8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80061a8:	2012      	movs	r0, #18
 80061aa:	f7ff ff85 	bl	80060b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80061ae:	20db      	movs	r0, #219	; 0xdb
 80061b0:	f7ff ff82 	bl	80060b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80061b4:	2020      	movs	r0, #32
 80061b6:	f7ff ff7f 	bl	80060b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80061ba:	208d      	movs	r0, #141	; 0x8d
 80061bc:	f7ff ff7c 	bl	80060b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80061c0:	2014      	movs	r0, #20
 80061c2:	f7ff ff79 	bl	80060b8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80061c6:	2001      	movs	r0, #1
 80061c8:	f000 f98c 	bl	80064e4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80061cc:	2000      	movs	r0, #0
 80061ce:	f000 f80f 	bl	80061f0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80061d2:	f000 f831 	bl	8006238 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80061d6:	4b05      	ldr	r3, [pc, #20]	; (80061ec <ssd1306_Init+0xd0>)
 80061d8:	2200      	movs	r2, #0
 80061da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80061dc:	4b03      	ldr	r3, [pc, #12]	; (80061ec <ssd1306_Init+0xd0>)
 80061de:	2200      	movs	r2, #0
 80061e0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80061e2:	4b02      	ldr	r3, [pc, #8]	; (80061ec <ssd1306_Init+0xd0>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	711a      	strb	r2, [r3, #4]
}
 80061e8:	bf00      	nop
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20000684 	.word	0x20000684

080061f0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	e00d      	b.n	800621c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <ssd1306_Fill+0x1a>
 8006206:	2100      	movs	r1, #0
 8006208:	e000      	b.n	800620c <ssd1306_Fill+0x1c>
 800620a:	21ff      	movs	r1, #255	; 0xff
 800620c:	4a09      	ldr	r2, [pc, #36]	; (8006234 <ssd1306_Fill+0x44>)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	460a      	mov	r2, r1
 8006214:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3301      	adds	r3, #1
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006222:	d3ed      	bcc.n	8006200 <ssd1306_Fill+0x10>
    }
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20000284 	.word	0x20000284

08006238 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800623e:	2300      	movs	r3, #0
 8006240:	71fb      	strb	r3, [r7, #7]
 8006242:	e016      	b.n	8006272 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	3b50      	subs	r3, #80	; 0x50
 8006248:	b2db      	uxtb	r3, r3
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff ff34 	bl	80060b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006250:	2000      	movs	r0, #0
 8006252:	f7ff ff31 	bl	80060b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8006256:	2010      	movs	r0, #16
 8006258:	f7ff ff2e 	bl	80060b8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	01db      	lsls	r3, r3, #7
 8006260:	4a08      	ldr	r2, [pc, #32]	; (8006284 <ssd1306_UpdateScreen+0x4c>)
 8006262:	4413      	add	r3, r2
 8006264:	2180      	movs	r1, #128	; 0x80
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff ff3e 	bl	80060e8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	3301      	adds	r3, #1
 8006270:	71fb      	strb	r3, [r7, #7]
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	2b07      	cmp	r3, #7
 8006276:	d9e5      	bls.n	8006244 <ssd1306_UpdateScreen+0xc>
    }
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000284 	.word	0x20000284

08006288 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
 8006292:	460b      	mov	r3, r1
 8006294:	71bb      	strb	r3, [r7, #6]
 8006296:	4613      	mov	r3, r2
 8006298:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800629a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	db3d      	blt.n	800631e <ssd1306_DrawPixel+0x96>
 80062a2:	79bb      	ldrb	r3, [r7, #6]
 80062a4:	2b3f      	cmp	r3, #63	; 0x3f
 80062a6:	d83a      	bhi.n	800631e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80062a8:	797b      	ldrb	r3, [r7, #5]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d11a      	bne.n	80062e4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80062ae:	79fa      	ldrb	r2, [r7, #7]
 80062b0:	79bb      	ldrb	r3, [r7, #6]
 80062b2:	08db      	lsrs	r3, r3, #3
 80062b4:	b2d8      	uxtb	r0, r3
 80062b6:	4603      	mov	r3, r0
 80062b8:	01db      	lsls	r3, r3, #7
 80062ba:	4413      	add	r3, r2
 80062bc:	4a1b      	ldr	r2, [pc, #108]	; (800632c <ssd1306_DrawPixel+0xa4>)
 80062be:	5cd3      	ldrb	r3, [r2, r3]
 80062c0:	b25a      	sxtb	r2, r3
 80062c2:	79bb      	ldrb	r3, [r7, #6]
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	2101      	movs	r1, #1
 80062ca:	fa01 f303 	lsl.w	r3, r1, r3
 80062ce:	b25b      	sxtb	r3, r3
 80062d0:	4313      	orrs	r3, r2
 80062d2:	b259      	sxtb	r1, r3
 80062d4:	79fa      	ldrb	r2, [r7, #7]
 80062d6:	4603      	mov	r3, r0
 80062d8:	01db      	lsls	r3, r3, #7
 80062da:	4413      	add	r3, r2
 80062dc:	b2c9      	uxtb	r1, r1
 80062de:	4a13      	ldr	r2, [pc, #76]	; (800632c <ssd1306_DrawPixel+0xa4>)
 80062e0:	54d1      	strb	r1, [r2, r3]
 80062e2:	e01d      	b.n	8006320 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80062e4:	79fa      	ldrb	r2, [r7, #7]
 80062e6:	79bb      	ldrb	r3, [r7, #6]
 80062e8:	08db      	lsrs	r3, r3, #3
 80062ea:	b2d8      	uxtb	r0, r3
 80062ec:	4603      	mov	r3, r0
 80062ee:	01db      	lsls	r3, r3, #7
 80062f0:	4413      	add	r3, r2
 80062f2:	4a0e      	ldr	r2, [pc, #56]	; (800632c <ssd1306_DrawPixel+0xa4>)
 80062f4:	5cd3      	ldrb	r3, [r2, r3]
 80062f6:	b25a      	sxtb	r2, r3
 80062f8:	79bb      	ldrb	r3, [r7, #6]
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	2101      	movs	r1, #1
 8006300:	fa01 f303 	lsl.w	r3, r1, r3
 8006304:	b25b      	sxtb	r3, r3
 8006306:	43db      	mvns	r3, r3
 8006308:	b25b      	sxtb	r3, r3
 800630a:	4013      	ands	r3, r2
 800630c:	b259      	sxtb	r1, r3
 800630e:	79fa      	ldrb	r2, [r7, #7]
 8006310:	4603      	mov	r3, r0
 8006312:	01db      	lsls	r3, r3, #7
 8006314:	4413      	add	r3, r2
 8006316:	b2c9      	uxtb	r1, r1
 8006318:	4a04      	ldr	r2, [pc, #16]	; (800632c <ssd1306_DrawPixel+0xa4>)
 800631a:	54d1      	strb	r1, [r2, r3]
 800631c:	e000      	b.n	8006320 <ssd1306_DrawPixel+0x98>
        return;
 800631e:	bf00      	nop
    }
}
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	20000284 	.word	0x20000284

08006330 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8006330:	b590      	push	{r4, r7, lr}
 8006332:	b089      	sub	sp, #36	; 0x24
 8006334:	af00      	add	r7, sp, #0
 8006336:	4604      	mov	r4, r0
 8006338:	1d38      	adds	r0, r7, #4
 800633a:	e880 0006 	stmia.w	r0, {r1, r2}
 800633e:	461a      	mov	r2, r3
 8006340:	4623      	mov	r3, r4
 8006342:	73fb      	strb	r3, [r7, #15]
 8006344:	4613      	mov	r3, r2
 8006346:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b1f      	cmp	r3, #31
 800634c:	d902      	bls.n	8006354 <ssd1306_WriteChar+0x24>
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	2b7e      	cmp	r3, #126	; 0x7e
 8006352:	d901      	bls.n	8006358 <ssd1306_WriteChar+0x28>
        return 0;
 8006354:	2300      	movs	r3, #0
 8006356:	e06d      	b.n	8006434 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006358:	4b38      	ldr	r3, [pc, #224]	; (800643c <ssd1306_WriteChar+0x10c>)
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	461a      	mov	r2, r3
 800635e:	793b      	ldrb	r3, [r7, #4]
 8006360:	4413      	add	r3, r2
 8006362:	2b80      	cmp	r3, #128	; 0x80
 8006364:	dc06      	bgt.n	8006374 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8006366:	4b35      	ldr	r3, [pc, #212]	; (800643c <ssd1306_WriteChar+0x10c>)
 8006368:	885b      	ldrh	r3, [r3, #2]
 800636a:	461a      	mov	r2, r3
 800636c:	797b      	ldrb	r3, [r7, #5]
 800636e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	dd01      	ble.n	8006378 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8006374:	2300      	movs	r3, #0
 8006376:	e05d      	b.n	8006434 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8006378:	2300      	movs	r3, #0
 800637a:	61fb      	str	r3, [r7, #28]
 800637c:	e04c      	b.n	8006418 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	3b20      	subs	r3, #32
 8006384:	7979      	ldrb	r1, [r7, #5]
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	4619      	mov	r1, r3
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	440b      	add	r3, r1
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	4413      	add	r3, r2
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8006398:	2300      	movs	r3, #0
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	e034      	b.n	8006408 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	fa02 f303 	lsl.w	r3, r2, r3
 80063a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d012      	beq.n	80063d4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80063ae:	4b23      	ldr	r3, [pc, #140]	; (800643c <ssd1306_WriteChar+0x10c>)
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	4413      	add	r3, r2
 80063ba:	b2d8      	uxtb	r0, r3
 80063bc:	4b1f      	ldr	r3, [pc, #124]	; (800643c <ssd1306_WriteChar+0x10c>)
 80063be:	885b      	ldrh	r3, [r3, #2]
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	7bba      	ldrb	r2, [r7, #14]
 80063cc:	4619      	mov	r1, r3
 80063ce:	f7ff ff5b 	bl	8006288 <ssd1306_DrawPixel>
 80063d2:	e016      	b.n	8006402 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80063d4:	4b19      	ldr	r3, [pc, #100]	; (800643c <ssd1306_WriteChar+0x10c>)
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	4413      	add	r3, r2
 80063e0:	b2d8      	uxtb	r0, r3
 80063e2:	4b16      	ldr	r3, [pc, #88]	; (800643c <ssd1306_WriteChar+0x10c>)
 80063e4:	885b      	ldrh	r3, [r3, #2]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	4413      	add	r3, r2
 80063ee:	b2d9      	uxtb	r1, r3
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf0c      	ite	eq
 80063f6:	2301      	moveq	r3, #1
 80063f8:	2300      	movne	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	f7ff ff43 	bl	8006288 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	3301      	adds	r3, #1
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	793b      	ldrb	r3, [r7, #4]
 800640a:	461a      	mov	r2, r3
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	4293      	cmp	r3, r2
 8006410:	d3c5      	bcc.n	800639e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	3301      	adds	r3, #1
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	797b      	ldrb	r3, [r7, #5]
 800641a:	461a      	mov	r2, r3
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4293      	cmp	r3, r2
 8006420:	d3ad      	bcc.n	800637e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8006422:	4b06      	ldr	r3, [pc, #24]	; (800643c <ssd1306_WriteChar+0x10c>)
 8006424:	881a      	ldrh	r2, [r3, #0]
 8006426:	793b      	ldrb	r3, [r7, #4]
 8006428:	b29b      	uxth	r3, r3
 800642a:	4413      	add	r3, r2
 800642c:	b29a      	uxth	r2, r3
 800642e:	4b03      	ldr	r3, [pc, #12]	; (800643c <ssd1306_WriteChar+0x10c>)
 8006430:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3724      	adds	r7, #36	; 0x24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd90      	pop	{r4, r7, pc}
 800643c:	20000684 	.word	0x20000684

08006440 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	1d38      	adds	r0, r7, #4
 800644a:	e880 0006 	stmia.w	r0, {r1, r2}
 800644e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8006450:	e012      	b.n	8006478 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	7818      	ldrb	r0, [r3, #0]
 8006456:	78fb      	ldrb	r3, [r7, #3]
 8006458:	1d3a      	adds	r2, r7, #4
 800645a:	ca06      	ldmia	r2, {r1, r2}
 800645c:	f7ff ff68 	bl	8006330 <ssd1306_WriteChar>
 8006460:	4603      	mov	r3, r0
 8006462:	461a      	mov	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d002      	beq.n	8006472 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	e008      	b.n	8006484 <ssd1306_WriteString+0x44>
        }
        str++;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3301      	adds	r3, #1
 8006476:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e8      	bne.n	8006452 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	781b      	ldrb	r3, [r3, #0]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	460a      	mov	r2, r1
 8006496:	71fb      	strb	r3, [r7, #7]
 8006498:	4613      	mov	r3, r2
 800649a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	b29a      	uxth	r2, r3
 80064a0:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <ssd1306_SetCursor+0x2c>)
 80064a2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80064a4:	79bb      	ldrb	r3, [r7, #6]
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	4b03      	ldr	r3, [pc, #12]	; (80064b8 <ssd1306_SetCursor+0x2c>)
 80064aa:	805a      	strh	r2, [r3, #2]
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	20000684 	.word	0x20000684

080064bc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80064c6:	2381      	movs	r3, #129	; 0x81
 80064c8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff fdf3 	bl	80060b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fdef 	bl	80060b8 <ssd1306_WriteCommand>
}
 80064da:	bf00      	nop
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80064f4:	23af      	movs	r3, #175	; 0xaf
 80064f6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80064f8:	4b08      	ldr	r3, [pc, #32]	; (800651c <ssd1306_SetDisplayOn+0x38>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	715a      	strb	r2, [r3, #5]
 80064fe:	e004      	b.n	800650a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8006500:	23ae      	movs	r3, #174	; 0xae
 8006502:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8006504:	4b05      	ldr	r3, [pc, #20]	; (800651c <ssd1306_SetDisplayOn+0x38>)
 8006506:	2200      	movs	r2, #0
 8006508:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fdd3 	bl	80060b8 <ssd1306_WriteCommand>
}
 8006512:	bf00      	nop
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000684 	.word	0x20000684

08006520 <__libc_init_array>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	4d0d      	ldr	r5, [pc, #52]	; (8006558 <__libc_init_array+0x38>)
 8006524:	4c0d      	ldr	r4, [pc, #52]	; (800655c <__libc_init_array+0x3c>)
 8006526:	1b64      	subs	r4, r4, r5
 8006528:	10a4      	asrs	r4, r4, #2
 800652a:	2600      	movs	r6, #0
 800652c:	42a6      	cmp	r6, r4
 800652e:	d109      	bne.n	8006544 <__libc_init_array+0x24>
 8006530:	4d0b      	ldr	r5, [pc, #44]	; (8006560 <__libc_init_array+0x40>)
 8006532:	4c0c      	ldr	r4, [pc, #48]	; (8006564 <__libc_init_array+0x44>)
 8006534:	f000 f87c 	bl	8006630 <_init>
 8006538:	1b64      	subs	r4, r4, r5
 800653a:	10a4      	asrs	r4, r4, #2
 800653c:	2600      	movs	r6, #0
 800653e:	42a6      	cmp	r6, r4
 8006540:	d105      	bne.n	800654e <__libc_init_array+0x2e>
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	f855 3b04 	ldr.w	r3, [r5], #4
 8006548:	4798      	blx	r3
 800654a:	3601      	adds	r6, #1
 800654c:	e7ee      	b.n	800652c <__libc_init_array+0xc>
 800654e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006552:	4798      	blx	r3
 8006554:	3601      	adds	r6, #1
 8006556:	e7f2      	b.n	800653e <__libc_init_array+0x1e>
 8006558:	08006e14 	.word	0x08006e14
 800655c:	08006e14 	.word	0x08006e14
 8006560:	08006e14 	.word	0x08006e14
 8006564:	08006e18 	.word	0x08006e18

08006568 <__itoa>:
 8006568:	1e93      	subs	r3, r2, #2
 800656a:	2b22      	cmp	r3, #34	; 0x22
 800656c:	b510      	push	{r4, lr}
 800656e:	460c      	mov	r4, r1
 8006570:	d904      	bls.n	800657c <__itoa+0x14>
 8006572:	2300      	movs	r3, #0
 8006574:	700b      	strb	r3, [r1, #0]
 8006576:	461c      	mov	r4, r3
 8006578:	4620      	mov	r0, r4
 800657a:	bd10      	pop	{r4, pc}
 800657c:	2a0a      	cmp	r2, #10
 800657e:	d109      	bne.n	8006594 <__itoa+0x2c>
 8006580:	2800      	cmp	r0, #0
 8006582:	da07      	bge.n	8006594 <__itoa+0x2c>
 8006584:	232d      	movs	r3, #45	; 0x2d
 8006586:	700b      	strb	r3, [r1, #0]
 8006588:	4240      	negs	r0, r0
 800658a:	2101      	movs	r1, #1
 800658c:	4421      	add	r1, r4
 800658e:	f000 f80d 	bl	80065ac <__utoa>
 8006592:	e7f1      	b.n	8006578 <__itoa+0x10>
 8006594:	2100      	movs	r1, #0
 8006596:	e7f9      	b.n	800658c <__itoa+0x24>

08006598 <itoa>:
 8006598:	f7ff bfe6 	b.w	8006568 <__itoa>

0800659c <memset>:
 800659c:	4402      	add	r2, r0
 800659e:	4603      	mov	r3, r0
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d100      	bne.n	80065a6 <memset+0xa>
 80065a4:	4770      	bx	lr
 80065a6:	f803 1b01 	strb.w	r1, [r3], #1
 80065aa:	e7f9      	b.n	80065a0 <memset+0x4>

080065ac <__utoa>:
 80065ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ae:	4c1f      	ldr	r4, [pc, #124]	; (800662c <__utoa+0x80>)
 80065b0:	b08b      	sub	sp, #44	; 0x2c
 80065b2:	4605      	mov	r5, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	466e      	mov	r6, sp
 80065b8:	f104 0c20 	add.w	ip, r4, #32
 80065bc:	6820      	ldr	r0, [r4, #0]
 80065be:	6861      	ldr	r1, [r4, #4]
 80065c0:	4637      	mov	r7, r6
 80065c2:	c703      	stmia	r7!, {r0, r1}
 80065c4:	3408      	adds	r4, #8
 80065c6:	4564      	cmp	r4, ip
 80065c8:	463e      	mov	r6, r7
 80065ca:	d1f7      	bne.n	80065bc <__utoa+0x10>
 80065cc:	7921      	ldrb	r1, [r4, #4]
 80065ce:	7139      	strb	r1, [r7, #4]
 80065d0:	1e91      	subs	r1, r2, #2
 80065d2:	6820      	ldr	r0, [r4, #0]
 80065d4:	6038      	str	r0, [r7, #0]
 80065d6:	2922      	cmp	r1, #34	; 0x22
 80065d8:	f04f 0100 	mov.w	r1, #0
 80065dc:	d904      	bls.n	80065e8 <__utoa+0x3c>
 80065de:	7019      	strb	r1, [r3, #0]
 80065e0:	460b      	mov	r3, r1
 80065e2:	4618      	mov	r0, r3
 80065e4:	b00b      	add	sp, #44	; 0x2c
 80065e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e8:	1e58      	subs	r0, r3, #1
 80065ea:	4684      	mov	ip, r0
 80065ec:	fbb5 f7f2 	udiv	r7, r5, r2
 80065f0:	fb02 5617 	mls	r6, r2, r7, r5
 80065f4:	3628      	adds	r6, #40	; 0x28
 80065f6:	446e      	add	r6, sp
 80065f8:	460c      	mov	r4, r1
 80065fa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80065fe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006602:	462e      	mov	r6, r5
 8006604:	42b2      	cmp	r2, r6
 8006606:	f101 0101 	add.w	r1, r1, #1
 800660a:	463d      	mov	r5, r7
 800660c:	d9ee      	bls.n	80065ec <__utoa+0x40>
 800660e:	2200      	movs	r2, #0
 8006610:	545a      	strb	r2, [r3, r1]
 8006612:	1919      	adds	r1, r3, r4
 8006614:	1aa5      	subs	r5, r4, r2
 8006616:	42aa      	cmp	r2, r5
 8006618:	dae3      	bge.n	80065e2 <__utoa+0x36>
 800661a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800661e:	780e      	ldrb	r6, [r1, #0]
 8006620:	7006      	strb	r6, [r0, #0]
 8006622:	3201      	adds	r2, #1
 8006624:	f801 5901 	strb.w	r5, [r1], #-1
 8006628:	e7f4      	b.n	8006614 <__utoa+0x68>
 800662a:	bf00      	nop
 800662c:	08006dec 	.word	0x08006dec

08006630 <_init>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	bf00      	nop
 8006634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006636:	bc08      	pop	{r3}
 8006638:	469e      	mov	lr, r3
 800663a:	4770      	bx	lr

0800663c <_fini>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	bf00      	nop
 8006640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006642:	bc08      	pop	{r3}
 8006644:	469e      	mov	lr, r3
 8006646:	4770      	bx	lr
