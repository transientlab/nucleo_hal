
adda.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006160  08006160  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006160  08006160  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006160  08006160  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006160  08006160  00016160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000009e4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009f0  200009f0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012eb7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002753  00000000  00000000  00032ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00035648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f60  00000000  00000000  000366e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d0d4  00000000  00000000  00037640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015755  00000000  00000000  00054714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac796  00000000  00000000  00069e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  001165ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004450  00000000  00000000  00116648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ec8 	.word	0x08005ec8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005ec8 	.word	0x08005ec8

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001ce:	f107 031c 	add.w	r3, r7, #28
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ea:	4b2f      	ldr	r3, [pc, #188]	; (80002a8 <MX_ADC1_Init+0xe0>)
 80001ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80001f2:	4b2d      	ldr	r3, [pc, #180]	; (80002a8 <MX_ADC1_Init+0xe0>)
 80001f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80001f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001fa:	4b2b      	ldr	r3, [pc, #172]	; (80002a8 <MX_ADC1_Init+0xe0>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000200:	4b29      	ldr	r3, [pc, #164]	; (80002a8 <MX_ADC1_Init+0xe0>)
 8000202:	2200      	movs	r2, #0
 8000204:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000206:	4b28      	ldr	r3, [pc, #160]	; (80002a8 <MX_ADC1_Init+0xe0>)
 8000208:	2200      	movs	r2, #0
 800020a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800020c:	4b26      	ldr	r3, [pc, #152]	; (80002a8 <MX_ADC1_Init+0xe0>)
 800020e:	2200      	movs	r2, #0
 8000210:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000214:	4b24      	ldr	r3, [pc, #144]	; (80002a8 <MX_ADC1_Init+0xe0>)
 8000216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800021a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800021c:	4b22      	ldr	r3, [pc, #136]	; (80002a8 <MX_ADC1_Init+0xe0>)
 800021e:	f44f 7250 	mov.w	r2, #832	; 0x340
 8000222:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000224:	4b20      	ldr	r3, [pc, #128]	; (80002a8 <MX_ADC1_Init+0xe0>)
 8000226:	2200      	movs	r2, #0
 8000228:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800022a:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <MX_ADC1_Init+0xe0>)
 800022c:	2201      	movs	r2, #1
 800022e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000230:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <MX_ADC1_Init+0xe0>)
 8000232:	2201      	movs	r2, #1
 8000234:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <MX_ADC1_Init+0xe0>)
 800023a:	2208      	movs	r2, #8
 800023c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800023e:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <MX_ADC1_Init+0xe0>)
 8000240:	2200      	movs	r2, #0
 8000242:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <MX_ADC1_Init+0xe0>)
 8000246:	2200      	movs	r2, #0
 8000248:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800024a:	4817      	ldr	r0, [pc, #92]	; (80002a8 <MX_ADC1_Init+0xe0>)
 800024c:	f000 fc84 	bl	8000b58 <HAL_ADC_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000256:	f000 fa83 	bl	8000760 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800025a:	2300      	movs	r3, #0
 800025c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800025e:	f107 031c 	add.w	r3, r7, #28
 8000262:	4619      	mov	r1, r3
 8000264:	4810      	ldr	r0, [pc, #64]	; (80002a8 <MX_ADC1_Init+0xe0>)
 8000266:	f001 fedb 	bl	8002020 <HAL_ADCEx_MultiModeConfigChannel>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000270:	f000 fa76 	bl	8000760 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000274:	2301      	movs	r3, #1
 8000276:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000278:	2301      	movs	r3, #1
 800027a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800027c:	2300      	movs	r3, #0
 800027e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	4619      	mov	r1, r3
 8000290:	4805      	ldr	r0, [pc, #20]	; (80002a8 <MX_ADC1_Init+0xe0>)
 8000292:	f001 fa89 	bl	80017a8 <HAL_ADC_ConfigChannel>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800029c:	f000 fa60 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a0:	bf00      	nop
 80002a2:	3728      	adds	r7, #40	; 0x28
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000028 	.word	0x20000028

080002ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08a      	sub	sp, #40	; 0x28
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
 80002c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80002cc:	d154      	bne.n	8000378 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80002ce:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <HAL_ADC_MspInit+0xd4>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a2b      	ldr	r2, [pc, #172]	; (8000380 <HAL_ADC_MspInit+0xd4>)
 80002d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002d8:	6153      	str	r3, [r2, #20]
 80002da:	4b29      	ldr	r3, [pc, #164]	; (8000380 <HAL_ADC_MspInit+0xd4>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002e2:	613b      	str	r3, [r7, #16]
 80002e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	4b26      	ldr	r3, [pc, #152]	; (8000380 <HAL_ADC_MspInit+0xd4>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a25      	ldr	r2, [pc, #148]	; (8000380 <HAL_ADC_MspInit+0xd4>)
 80002ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f0:	6153      	str	r3, [r2, #20]
 80002f2:	4b23      	ldr	r3, [pc, #140]	; (8000380 <HAL_ADC_MspInit+0xd4>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002fe:	2301      	movs	r3, #1
 8000300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000302:	2303      	movs	r3, #3
 8000304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800030a:	f107 0314 	add.w	r3, r7, #20
 800030e:	4619      	mov	r1, r3
 8000310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000314:	f002 ff0a 	bl	800312c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <HAL_ADC_MspInit+0xd8>)
 800031a:	4a1b      	ldr	r2, [pc, #108]	; (8000388 <HAL_ADC_MspInit+0xdc>)
 800031c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800031e:	4b19      	ldr	r3, [pc, #100]	; (8000384 <HAL_ADC_MspInit+0xd8>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000324:	4b17      	ldr	r3, [pc, #92]	; (8000384 <HAL_ADC_MspInit+0xd8>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800032a:	4b16      	ldr	r3, [pc, #88]	; (8000384 <HAL_ADC_MspInit+0xd8>)
 800032c:	2280      	movs	r2, #128	; 0x80
 800032e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <HAL_ADC_MspInit+0xd8>)
 8000332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000336:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <HAL_ADC_MspInit+0xd8>)
 800033a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800033e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <HAL_ADC_MspInit+0xd8>)
 8000342:	2220      	movs	r2, #32
 8000344:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <HAL_ADC_MspInit+0xd8>)
 8000348:	2200      	movs	r2, #0
 800034a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <HAL_ADC_MspInit+0xd8>)
 800034e:	f002 fc9f 	bl	8002c90 <HAL_DMA_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000358:	f000 fa02 	bl	8000760 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a09      	ldr	r2, [pc, #36]	; (8000384 <HAL_ADC_MspInit+0xd8>)
 8000360:	639a      	str	r2, [r3, #56]	; 0x38
 8000362:	4a08      	ldr	r2, [pc, #32]	; (8000384 <HAL_ADC_MspInit+0xd8>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000368:	2200      	movs	r2, #0
 800036a:	2100      	movs	r1, #0
 800036c:	2012      	movs	r0, #18
 800036e:	f002 f9c5 	bl	80026fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000372:	2012      	movs	r0, #18
 8000374:	f002 f9ee 	bl	8002754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000378:	bf00      	nop
 800037a:	3728      	adds	r7, #40	; 0x28
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40021000 	.word	0x40021000
 8000384:	20000078 	.word	0x20000078
 8000388:	40020008 	.word	0x40020008

0800038c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_DAC1_Init+0x4c>)
 800039e:	4a0f      	ldr	r2, [pc, #60]	; (80003dc <MX_DAC1_Init+0x50>)
 80003a0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003a2:	480d      	ldr	r0, [pc, #52]	; (80003d8 <MX_DAC1_Init+0x4c>)
 80003a4:	f002 f9fa 	bl	800279c <HAL_DAC_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80003ae:	f000 f9d7 	bl	8000760 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80003b2:	2304      	movs	r3, #4
 80003b4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_DAC1_Init+0x4c>)
 80003c2:	f002 fb1f 	bl	8002a04 <HAL_DAC_ConfigChannel>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80003cc:	f000 f9c8 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200000bc 	.word	0x200000bc
 80003dc:	40007400 	.word	0x40007400

080003e0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b08a      	sub	sp, #40	; 0x28
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a2c      	ldr	r2, [pc, #176]	; (80004b0 <HAL_DAC_MspInit+0xd0>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d152      	bne.n	80004a8 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000402:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <HAL_DAC_MspInit+0xd4>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	4a2b      	ldr	r2, [pc, #172]	; (80004b4 <HAL_DAC_MspInit+0xd4>)
 8000408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800040c:	61d3      	str	r3, [r2, #28]
 800040e:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <HAL_DAC_MspInit+0xd4>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <HAL_DAC_MspInit+0xd4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a25      	ldr	r2, [pc, #148]	; (80004b4 <HAL_DAC_MspInit+0xd4>)
 8000420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <HAL_DAC_MspInit+0xd4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000432:	2310      	movs	r3, #16
 8000434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000436:	2303      	movs	r3, #3
 8000438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043e:	f107 0314 	add.w	r3, r7, #20
 8000442:	4619      	mov	r1, r3
 8000444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000448:	f002 fe70 	bl	800312c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <HAL_DAC_MspInit+0xd8>)
 800044e:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <HAL_DAC_MspInit+0xdc>)
 8000450:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <HAL_DAC_MspInit+0xd8>)
 8000454:	2210      	movs	r2, #16
 8000456:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <HAL_DAC_MspInit+0xd8>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <HAL_DAC_MspInit+0xd8>)
 8000460:	2280      	movs	r2, #128	; 0x80
 8000462:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <HAL_DAC_MspInit+0xd8>)
 8000466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800046a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <HAL_DAC_MspInit+0xd8>)
 800046e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000472:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <HAL_DAC_MspInit+0xd8>)
 8000476:	2220      	movs	r2, #32
 8000478:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_DAC_MspInit+0xd8>)
 800047c:	2200      	movs	r2, #0
 800047e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000480:	480d      	ldr	r0, [pc, #52]	; (80004b8 <HAL_DAC_MspInit+0xd8>)
 8000482:	f002 fc05 	bl	8002c90 <HAL_DMA_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 800048c:	f000 f968 	bl	8000760 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000490:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <HAL_DAC_MspInit+0xe0>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <HAL_DAC_MspInit+0xe0>)
 8000496:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800049a:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <HAL_DAC_MspInit+0xd8>)
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <HAL_DAC_MspInit+0xd8>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80004a8:	bf00      	nop
 80004aa:	3728      	adds	r7, #40	; 0x28
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40007400 	.word	0x40007400
 80004b4:	40021000 	.word	0x40021000
 80004b8:	200000d0 	.word	0x200000d0
 80004bc:	40020030 	.word	0x40020030
 80004c0:	40010000 	.word	0x40010000

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <MX_DMA_Init+0x48>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a0f      	ldr	r2, [pc, #60]	; (800050c <MX_DMA_Init+0x48>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <MX_DMA_Init+0x48>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	200b      	movs	r0, #11
 80004e8:	f002 f908 	bl	80026fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004ec:	200b      	movs	r0, #11
 80004ee:	f002 f931 	bl	8002754 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	200d      	movs	r0, #13
 80004f8:	f002 f900 	bl	80026fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80004fc:	200d      	movs	r0, #13
 80004fe:	f002 f929 	bl	8002754 <HAL_NVIC_EnableIRQ>

}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <MX_GPIO_Init+0x8c>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a1c      	ldr	r2, [pc, #112]	; (800059c <MX_GPIO_Init+0x8c>)
 800052c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <MX_GPIO_Init+0x8c>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <MX_GPIO_Init+0x8c>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a16      	ldr	r2, [pc, #88]	; (800059c <MX_GPIO_Init+0x8c>)
 8000544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_GPIO_Init+0x8c>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_GPIO_Init+0x8c>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a10      	ldr	r2, [pc, #64]	; (800059c <MX_GPIO_Init+0x8c>)
 800055c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_GPIO_Init+0x8c>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	211b      	movs	r1, #27
 8000572:	480b      	ldr	r0, [pc, #44]	; (80005a0 <MX_GPIO_Init+0x90>)
 8000574:	f003 f80c 	bl	8003590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000578:	231b      	movs	r3, #27
 800057a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000580:	2302      	movs	r3, #2
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000584:	2303      	movs	r3, #3
 8000586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	4619      	mov	r1, r3
 800058e:	4804      	ldr	r0, [pc, #16]	; (80005a0 <MX_GPIO_Init+0x90>)
 8000590:	f002 fdcc 	bl	800312c <HAL_GPIO_Init>

}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	48000400 	.word	0x48000400

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fa5b 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f835 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f7ff ffad 	bl	8000510 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b6:	f7ff ff85 	bl	80004c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 f9b5 	bl	8000928 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005be:	f7ff fe03 	bl	80001c8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80005c2:	f000 f95b 	bl	800087c <MX_TIM6_Init>
  MX_DAC1_Init();
 80005c6:	f7ff fee1 	bl	800038c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <main+0x5c>)
 80005cc:	f004 fd96 	bl	80050fc <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, BUFFERSIZE);
 80005d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005d4:	490b      	ldr	r1, [pc, #44]	; (8000604 <main+0x60>)
 80005d6:	480c      	ldr	r0, [pc, #48]	; (8000608 <main+0x64>)
 80005d8:	f000 fd84 	bl	80010e4 <HAL_ADC_Start_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *)dac_buffer, BUFFERSIZE, DAC_ALIGN_12B_R);
 80005dc:	2300      	movs	r3, #0
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e4:	4a09      	ldr	r2, [pc, #36]	; (800060c <main+0x68>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <main+0x6c>)
 80005ea:	f002 f923 	bl	8002834 <HAL_DAC_Start_DMA>
	inbufferPtr = &adc_buffer[0];
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <main+0x70>)
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <main+0x60>)
 80005f2:	601a      	str	r2, [r3, #0]
	outbufferPtr = &dac_buffer[0];
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <main+0x74>)
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <main+0x68>)
 80005f8:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  processDSP();
 80005fa:	f000 f84b 	bl	8000694 <processDSP>
 80005fe:	e7fc      	b.n	80005fa <main+0x56>
 8000600:	2000091c 	.word	0x2000091c
 8000604:	20000114 	.word	0x20000114
 8000608:	20000028 	.word	0x20000028
 800060c:	20000514 	.word	0x20000514
 8000610:	200000bc 	.word	0x200000bc
 8000614:	20000914 	.word	0x20000914
 8000618:	20000918 	.word	0x20000918

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b090      	sub	sp, #64	; 0x40
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	2228      	movs	r2, #40	; 0x28
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f005 fc44 	bl	8005eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000642:	2301      	movs	r3, #1
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2310      	movs	r3, #16
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064a:	2300      	movs	r3, #0
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fff4 	bl	8003640 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800065e:	f000 f87f 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 f994 	bl	80049a8 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000686:	f000 f86b 	bl	8000760 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3740      	adds	r7, #64	; 0x40
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <processDSP>:

/* USER CODE BEGIN 4 */
void processDSP() {
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0

	for(int n=1; n<BUFFERSIZE/2; n++) {
 800069a:	2301      	movs	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	e00e      	b.n	80006be <processDSP+0x2a>
//		outbufferPtr[n-1] = (inbufferPtr[n]+inbufferPtr[n-1])/2;
		outbufferPtr[n] = inbufferPtr[n];
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <processDSP+0x40>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	441a      	add	r2, r3
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <processDSP+0x44>)
 80006ac:	6819      	ldr	r1, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	601a      	str	r2, [r3, #0]
	for(int n=1; n<BUFFERSIZE/2; n++) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3301      	adds	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b7f      	cmp	r3, #127	; 0x7f
 80006c2:	dded      	ble.n	80006a0 <processDSP+0xc>
	}


}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20000914 	.word	0x20000914
 80006d8:	20000918 	.word	0x20000918

080006dc <HAL_DAC_ConvCpltCallbackCh1>:


void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80006e4:	2102      	movs	r1, #2
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 80006e8:	f002 ff82 	bl	80035f0 <HAL_GPIO_TogglePin>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	48000400 	.word	0x48000400

080006f8 <HAL_ADC_ConvCpltCallback>:

// Rotating buffer, split half processDSP loop length to work
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	inbufferPtr = &adc_buffer[0];
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_ADC_ConvCpltCallback+0x24>)
 8000702:	4a07      	ldr	r2, [pc, #28]	; (8000720 <HAL_ADC_ConvCpltCallback+0x28>)
 8000704:	601a      	str	r2, [r3, #0]
	outbufferPtr = &dac_buffer[BUFFERSIZE/2];
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_ADC_ConvCpltCallback+0x30>)
 800070a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800070c:	2101      	movs	r1, #1
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <HAL_ADC_ConvCpltCallback+0x34>)
 8000710:	f002 ff6e 	bl	80035f0 <HAL_GPIO_TogglePin>


}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000914 	.word	0x20000914
 8000720:	20000114 	.word	0x20000114
 8000724:	20000918 	.word	0x20000918
 8000728:	20000714 	.word	0x20000714
 800072c:	48000400 	.word	0x48000400

08000730 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	inbufferPtr = &adc_buffer[BUFFERSIZE/2];
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 800073a:	4a06      	ldr	r2, [pc, #24]	; (8000754 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800073c:	601a      	str	r2, [r3, #0]
	outbufferPtr = &dac_buffer[0];
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000742:	601a      	str	r2, [r3, #0]

}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	20000914 	.word	0x20000914
 8000754:	20000314 	.word	0x20000314
 8000758:	20000918 	.word	0x20000918
 800075c:	20000514 	.word	0x20000514

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>

0800076a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800076a:	b480      	push	{r7}
 800076c:	b083      	sub	sp, #12
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x44>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_MspInit+0x44>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6193      	str	r3, [r2, #24]
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x44>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_MspInit+0x44>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_MspInit+0x44>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x44>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 f96c 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <DMA1_Channel1_IRQHandler+0x10>)
 8000822:	f002 fb91 	bl	8002f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000078 	.word	0x20000078

08000830 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <DMA1_Channel3_IRQHandler+0x10>)
 8000836:	f002 fb87 	bl	8002f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000d0 	.word	0x200000d0

08000844 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <ADC1_2_IRQHandler+0x10>)
 800084a:	f000 fd37 	bl	80012bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000028 	.word	0x20000028

08000858 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_TIM6_Init+0x64>)
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <MX_TIM6_Init+0x68>)
 8000890:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_TIM6_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_TIM6_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_TIM6_Init+0x64>)
 80008a0:	2240      	movs	r2, #64	; 0x40
 80008a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_TIM6_Init+0x64>)
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008aa:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_TIM6_Init+0x64>)
 80008ac:	f004 fb58 	bl	8004f60 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008b6:	f7ff ff53 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008ba:	2320      	movs	r3, #32
 80008bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <MX_TIM6_Init+0x64>)
 80008c8:	f004 fd18 	bl	80052fc <HAL_TIMEx_MasterConfigSynchronization>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008d2:	f7ff ff45 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000091c 	.word	0x2000091c
 80008e4:	40001000 	.word	0x40001000

080008e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_TIM_Base_MspInit+0x38>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d10b      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_TIM_Base_MspInit+0x3c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a09      	ldr	r2, [pc, #36]	; (8000924 <HAL_TIM_Base_MspInit+0x3c>)
 8000900:	f043 0310 	orr.w	r3, r3, #16
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <HAL_TIM_Base_MspInit+0x3c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 0310 	and.w	r3, r3, #16
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40001000 	.word	0x40001000
 8000924:	40021000 	.word	0x40021000

08000928 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <MX_USART2_UART_Init+0x5c>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000934:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800096c:	f004 fde6 	bl	800553c <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000976:	f7ff fef3 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000968 	.word	0x20000968
 8000984:	40004400 	.word	0x40004400

08000988 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0x80>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d129      	bne.n	80009fe <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80009da:	f248 0304 	movw	r3, #32772	; 0x8004
 80009de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ec:	2307      	movs	r3, #7
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fa:	f002 fb97 	bl	800312c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40004400 	.word	0x40004400
 8000a0c:	40021000 	.word	0x40021000

08000a10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a48 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490e      	ldr	r1, [pc, #56]	; (8000a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0b      	ldr	r4, [pc, #44]	; (8000a5c <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a3a:	f7ff ff0d 	bl	8000858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f005 fa17 	bl	8005e70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a42:	f7ff fdaf 	bl	80005a4 <main>

08000a46 <LoopForever>:

LoopForever:
    b LoopForever
 8000a46:	e7fe      	b.n	8000a46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a48:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a54:	08006168 	.word	0x08006168
  ldr r2, =_sbss
 8000a58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a5c:	200009f0 	.word	0x200009f0

08000a60 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <CAN_RX0_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x28>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x28>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f001 fe21 	bl	80026bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f808 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff fe7e 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40022000 	.word	0x40022000

08000a90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fe68 	bl	8002784 <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f001 fe16 	bl	80026fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008
 8000b14:	200009ec 	.word	0x200009ec

08000b18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200009ec 	.word	0x200009ec

08000b30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e2af      	b.n	80010d8 <HAL_ADC_Init+0x580>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b80:	d008      	beq.n	8000b94 <HAL_ADC_Init+0x3c>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a8c      	ldr	r2, [pc, #560]	; (8000db8 <HAL_ADC_Init+0x260>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d003      	beq.n	8000b94 <HAL_ADC_Init+0x3c>
 8000b8c:	21f9      	movs	r1, #249	; 0xf9
 8000b8e:	488b      	ldr	r0, [pc, #556]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000b90:	f7ff fdeb 	bl	800076a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d012      	beq.n	8000bc2 <HAL_ADC_Init+0x6a>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba4:	d00d      	beq.n	8000bc2 <HAL_ADC_Init+0x6a>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000bae:	d008      	beq.n	8000bc2 <HAL_ADC_Init+0x6a>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000bb8:	d003      	beq.n	8000bc2 <HAL_ADC_Init+0x6a>
 8000bba:	21fa      	movs	r1, #250	; 0xfa
 8000bbc:	487f      	ldr	r0, [pc, #508]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000bbe:	f7ff fdd4 	bl	800076a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00f      	beq.n	8000bea <HAL_ADC_Init+0x92>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d00b      	beq.n	8000bea <HAL_ADC_Init+0x92>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b10      	cmp	r3, #16
 8000bd8:	d007      	beq.n	8000bea <HAL_ADC_Init+0x92>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	2b18      	cmp	r3, #24
 8000be0:	d003      	beq.n	8000bea <HAL_ADC_Init+0x92>
 8000be2:	21fb      	movs	r1, #251	; 0xfb
 8000be4:	4875      	ldr	r0, [pc, #468]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000be6:	f7ff fdc0 	bl	800076a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d007      	beq.n	8000c02 <HAL_ADC_Init+0xaa>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	2b20      	cmp	r3, #32
 8000bf8:	d003      	beq.n	8000c02 <HAL_ADC_Init+0xaa>
 8000bfa:	21fc      	movs	r1, #252	; 0xfc
 8000bfc:	486f      	ldr	r0, [pc, #444]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000bfe:	f7ff fdb4 	bl	800076a <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d007      	beq.n	8000c1a <HAL_ADC_Init+0xc2>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d003      	beq.n	8000c1a <HAL_ADC_Init+0xc2>
 8000c12:	21fd      	movs	r1, #253	; 0xfd
 8000c14:	4869      	ldr	r0, [pc, #420]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000c16:	f7ff fda8 	bl	800076a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7e5b      	ldrb	r3, [r3, #25]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d007      	beq.n	8000c32 <HAL_ADC_Init+0xda>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7e5b      	ldrb	r3, [r3, #25]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d003      	beq.n	8000c32 <HAL_ADC_Init+0xda>
 8000c2a:	21fe      	movs	r1, #254	; 0xfe
 8000c2c:	4863      	ldr	r0, [pc, #396]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000c2e:	f7ff fd9c 	bl	800076a <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d012      	beq.n	8000c60 <HAL_ADC_Init+0x108>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c42:	d00d      	beq.n	8000c60 <HAL_ADC_Init+0x108>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c4c:	d008      	beq.n	8000c60 <HAL_ADC_Init+0x108>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000c56:	d003      	beq.n	8000c60 <HAL_ADC_Init+0x108>
 8000c58:	21ff      	movs	r1, #255	; 0xff
 8000c5a:	4858      	ldr	r0, [pc, #352]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000c5c:	f7ff fd85 	bl	800076a <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d050      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6c:	2b40      	cmp	r3, #64	; 0x40
 8000c6e:	d04c      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c74:	2b80      	cmp	r3, #128	; 0x80
 8000c76:	d048      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7c:	2bc0      	cmp	r3, #192	; 0xc0
 8000c7e:	d044      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c88:	d03f      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c92:	d03a      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c98:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000c9c:	d035      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000ca6:	d030      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cb0:	d02b      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000cba:	d026      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000cc4:	d021      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000cce:	d01c      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000cd8:	d017      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cde:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 8000ce2:	d012      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000cec:	d00d      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf2:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8000cf6:	d008      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d004      	beq.n	8000d0a <HAL_ADC_Init+0x1b2>
 8000d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d04:	482d      	ldr	r0, [pc, #180]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000d06:	f7ff fd30 	bl	800076a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d009      	beq.n	8000d28 <HAL_ADC_Init+0x1d0>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d004      	beq.n	8000d28 <HAL_ADC_Init+0x1d0>
 8000d1e:	f240 1101 	movw	r1, #257	; 0x101
 8000d22:	4826      	ldr	r0, [pc, #152]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000d24:	f7ff fd21 	bl	800076a <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d008      	beq.n	8000d42 <HAL_ADC_Init+0x1ea>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	2b08      	cmp	r3, #8
 8000d36:	d004      	beq.n	8000d42 <HAL_ADC_Init+0x1ea>
 8000d38:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000d3c:	481f      	ldr	r0, [pc, #124]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000d3e:	f7ff fd14 	bl	800076a <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d008      	beq.n	8000d5c <HAL_ADC_Init+0x204>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d004      	beq.n	8000d5c <HAL_ADC_Init+0x204>
 8000d52:	f240 1103 	movw	r1, #259	; 0x103
 8000d56:	4819      	ldr	r0, [pc, #100]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000d58:	f7ff fd07 	bl	800076a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7e1b      	ldrb	r3, [r3, #24]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d008      	beq.n	8000d76 <HAL_ADC_Init+0x21e>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7e1b      	ldrb	r3, [r3, #24]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d004      	beq.n	8000d76 <HAL_ADC_Init+0x21e>
 8000d6c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000d70:	4812      	ldr	r0, [pc, #72]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000d72:	f7ff fcfa 	bl	800076a <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d032      	beq.n	8000de4 <HAL_ADC_Init+0x28c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_ADC_Init+0x236>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	2b10      	cmp	r3, #16
 8000d8c:	d904      	bls.n	8000d98 <HAL_ADC_Init+0x240>
 8000d8e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000d92:	480a      	ldr	r0, [pc, #40]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000d94:	f7ff fce9 	bl	800076a <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00e      	beq.n	8000dc0 <HAL_ADC_Init+0x268>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d009      	beq.n	8000dc0 <HAL_ADC_Init+0x268>
 8000dac:	f240 1109 	movw	r1, #265	; 0x109
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000db2:	f7ff fcda 	bl	800076a <assert_failed>
 8000db6:	e003      	b.n	8000dc0 <HAL_ADC_Init+0x268>
 8000db8:	50000100 	.word	0x50000100
 8000dbc:	08005ee0 	.word	0x08005ee0
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00c      	beq.n	8000de4 <HAL_ADC_Init+0x28c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_ADC_Init+0x282>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	d904      	bls.n	8000de4 <HAL_ADC_Init+0x28c>
 8000dda:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8000dde:	4880      	ldr	r0, [pc, #512]	; (8000fe0 <HAL_ADC_Init+0x488>)
 8000de0:	f7ff fcc3 	bl	800076a <assert_failed>
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d176      	bne.n	8000ede <HAL_ADC_Init+0x386>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d152      	bne.n	8000e9e <HAL_ADC_Init+0x346>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fa4a 	bl	80002ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d13b      	bne.n	8000e9e <HAL_ADC_Init+0x346>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f001 fb12 	bl	8002450 <ADC_Disable>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d12f      	bne.n	8000e9e <HAL_ADC_Init+0x346>
 8000e3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d12b      	bne.n	8000e9e <HAL_ADC_Init+0x346>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e4e:	f023 0302 	bic.w	r3, r3, #2
 8000e52:	f043 0202 	orr.w	r2, r3, #2
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e68:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e78:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e7a:	4b5a      	ldr	r3, [pc, #360]	; (8000fe4 <HAL_ADC_Init+0x48c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a5a      	ldr	r2, [pc, #360]	; (8000fe8 <HAL_ADC_Init+0x490>)
 8000e80:	fba2 2303 	umull	r2, r3, r2, r3
 8000e84:	0c9a      	lsrs	r2, r3, #18
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e90:	e002      	b.n	8000e98 <HAL_ADC_Init+0x340>
          {
            wait_loop_index--;
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f9      	bne.n	8000e92 <HAL_ADC_Init+0x33a>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <HAL_ADC_Init+0x364>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000eba:	d110      	bne.n	8000ede <HAL_ADC_Init+0x386>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f023 0312 	bic.w	r3, r3, #18
 8000ec4:	f043 0210 	orr.w	r2, r3, #16
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed0:	f043 0201 	orr.w	r2, r3, #1
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f040 80e9 	bne.w	80010be <HAL_ADC_Init+0x566>
 8000eec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f040 80e4 	bne.w	80010be <HAL_ADC_Init+0x566>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f040 80dc 	bne.w	80010be <HAL_ADC_Init+0x566>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f0e:	f043 0202 	orr.w	r2, r3, #2
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f16:	4b35      	ldr	r3, [pc, #212]	; (8000fec <HAL_ADC_Init+0x494>)
 8000f18:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f22:	d102      	bne.n	8000f2a <HAL_ADC_Init+0x3d2>
 8000f24:	4b32      	ldr	r3, [pc, #200]	; (8000ff0 <HAL_ADC_Init+0x498>)
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e002      	b.n	8000f30 <HAL_ADC_Init+0x3d8>
 8000f2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f2e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d108      	bne.n	8000f50 <HAL_ADC_Init+0x3f8>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <HAL_ADC_Init+0x3f8>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e000      	b.n	8000f52 <HAL_ADC_Init+0x3fa>
 8000f50:	2300      	movs	r3, #0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d11c      	bne.n	8000f90 <HAL_ADC_Init+0x438>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f56:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d010      	beq.n	8000f7e <HAL_ADC_Init+0x426>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d107      	bne.n	8000f78 <HAL_ADC_Init+0x420>
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <HAL_ADC_Init+0x420>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <HAL_ADC_Init+0x422>
 8000f78:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d108      	bne.n	8000f90 <HAL_ADC_Init+0x438>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f8e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7e5b      	ldrb	r3, [r3, #25]
 8000f94:	035b      	lsls	r3, r3, #13
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f9a:	2a01      	cmp	r2, #1
 8000f9c:	d002      	beq.n	8000fa4 <HAL_ADC_Init+0x44c>
 8000f9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa2:	e000      	b.n	8000fa6 <HAL_ADC_Init+0x44e>
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d125      	bne.n	8001010 <HAL_ADC_Init+0x4b8>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7e5b      	ldrb	r3, [r3, #25]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d113      	bne.n	8000ff4 <HAL_ADC_Init+0x49c>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	045a      	lsls	r2, r3, #17
 8000fd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8000fde:	e017      	b.n	8001010 <HAL_ADC_Init+0x4b8>
 8000fe0:	08005ee0 	.word	0x08005ee0
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	431bde83 	.word	0x431bde83
 8000fec:	50000300 	.word	0x50000300
 8000ff0:	50000100 	.word	0x50000100
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000ffc:	f043 0220 	orr.w	r2, r3, #32
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	2b01      	cmp	r3, #1
 8001016:	d007      	beq.n	8001028 <HAL_ADC_Init+0x4d0>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	4313      	orrs	r3, r2
 8001022:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001024:	4313      	orrs	r3, r2
 8001026:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 030c 	and.w	r3, r3, #12
 8001032:	2b00      	cmp	r3, #0
 8001034:	d114      	bne.n	8001060 <HAL_ADC_Init+0x508>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001044:	f023 0302 	bic.w	r3, r3, #2
 8001048:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7e1b      	ldrb	r3, [r3, #24]
 800104e:	039a      	lsls	r2, r3, #14
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4313      	orrs	r3, r2
 800105a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800105c:	4313      	orrs	r3, r2
 800105e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <HAL_ADC_Init+0x588>)
 8001068:	4013      	ands	r3, r2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6812      	ldr	r2, [r2, #0]
 800106e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001070:	430b      	orrs	r3, r1
 8001072:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d10c      	bne.n	8001096 <HAL_ADC_Init+0x53e>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f023 010f 	bic.w	r1, r3, #15
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	631a      	str	r2, [r3, #48]	; 0x30
 8001094:	e007      	b.n	80010a6 <HAL_ADC_Init+0x54e>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 020f 	bic.w	r2, r2, #15
 80010a4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f023 0303 	bic.w	r3, r3, #3
 80010b4:	f043 0201 	orr.w	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	641a      	str	r2, [r3, #64]	; 0x40
 80010bc:	e00a      	b.n	80010d4 <HAL_ADC_Init+0x57c>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0312 	bic.w	r3, r3, #18
 80010c6:	f043 0210 	orr.w	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80010ce:	2301      	movs	r3, #1
 80010d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80010d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3768      	adds	r7, #104	; 0x68
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	fff0c007 	.word	0xfff0c007

080010e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fc:	d009      	beq.n	8001112 <HAL_ADC_Start_DMA+0x2e>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a68      	ldr	r2, [pc, #416]	; (80012a4 <HAL_ADC_Start_DMA+0x1c0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d004      	beq.n	8001112 <HAL_ADC_Start_DMA+0x2e>
 8001108:	f640 1162 	movw	r1, #2402	; 0x962
 800110c:	4866      	ldr	r0, [pc, #408]	; (80012a8 <HAL_ADC_Start_DMA+0x1c4>)
 800110e:	f7ff fb2c 	bl	800076a <assert_failed>
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	f040 80b9 	bne.w	8001294 <HAL_ADC_Start_DMA+0x1b0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <HAL_ADC_Start_DMA+0x4c>
 800112c:	2302      	movs	r3, #2
 800112e:	e0b4      	b.n	800129a <HAL_ADC_Start_DMA+0x1b6>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001138:	4b5c      	ldr	r3, [pc, #368]	; (80012ac <HAL_ADC_Start_DMA+0x1c8>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	2b00      	cmp	r3, #0
 8001142:	f040 80a0 	bne.w	8001286 <HAL_ADC_Start_DMA+0x1a2>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f001 f91e 	bl	8002388 <ADC_Enable>
 800114c:	4603      	mov	r3, r0
 800114e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 8092 	bne.w	800127c <HAL_ADC_Start_DMA+0x198>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800116c:	4b4f      	ldr	r3, [pc, #316]	; (80012ac <HAL_ADC_Start_DMA+0x1c8>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 031f 	and.w	r3, r3, #31
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <HAL_ADC_Start_DMA+0x9e>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001180:	d115      	bne.n	80011ae <HAL_ADC_Start_DMA+0xca>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d027      	beq.n	80011ec <HAL_ADC_Start_DMA+0x108>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011ac:	e01e      	b.n	80011ec <HAL_ADC_Start_DMA+0x108>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011c2:	d004      	beq.n	80011ce <HAL_ADC_Start_DMA+0xea>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a36      	ldr	r2, [pc, #216]	; (80012a4 <HAL_ADC_Start_DMA+0x1c0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d10e      	bne.n	80011ec <HAL_ADC_Start_DMA+0x108>
 80011ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <HAL_ADC_Start_DMA+0x108>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011f8:	d106      	bne.n	8001208 <HAL_ADC_Start_DMA+0x124>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f023 0206 	bic.w	r2, r3, #6
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
 8001206:	e002      	b.n	800120e <HAL_ADC_Start_DMA+0x12a>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121a:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <HAL_ADC_Start_DMA+0x1cc>)
 800121c:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001222:	4a24      	ldr	r2, [pc, #144]	; (80012b4 <HAL_ADC_Start_DMA+0x1d0>)
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122a:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <HAL_ADC_Start_DMA+0x1d4>)
 800122c:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	221c      	movs	r2, #28
 8001234:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0210 	orr.w	r2, r2, #16
 8001244:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0201 	orr.w	r2, r2, #1
 8001254:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3340      	adds	r3, #64	; 0x40
 8001260:	4619      	mov	r1, r3
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f001 fe01 	bl	8002e6c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0204 	orr.w	r2, r2, #4
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	e00d      	b.n	8001298 <HAL_ADC_Start_DMA+0x1b4>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001284:	e008      	b.n	8001298 <HAL_ADC_Start_DMA+0x1b4>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001292:	e001      	b.n	8001298 <HAL_ADC_Start_DMA+0x1b4>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001294:	2302      	movs	r3, #2
 8001296:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001298:	7dfb      	ldrb	r3, [r7, #23]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	50000100 	.word	0x50000100
 80012a8:	08005ee0 	.word	0x08005ee0
 80012ac:	50000300 	.word	0x50000300
 80012b0:	080022bd 	.word	0x080022bd
 80012b4:	08002337 	.word	0x08002337
 80012b8:	08002353 	.word	0x08002353

080012bc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d8:	d009      	beq.n	80012ee <HAL_ADC_IRQHandler+0x32>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a79      	ldr	r2, [pc, #484]	; (80014c4 <HAL_ADC_IRQHandler+0x208>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d004      	beq.n	80012ee <HAL_ADC_IRQHandler+0x32>
 80012e4:	f640 3147 	movw	r1, #2887	; 0xb47
 80012e8:	4877      	ldr	r0, [pc, #476]	; (80014c8 <HAL_ADC_IRQHandler+0x20c>)
 80012ea:	f7ff fa3e 	bl	800076a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7e5b      	ldrb	r3, [r3, #25]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d008      	beq.n	8001308 <HAL_ADC_IRQHandler+0x4c>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7e5b      	ldrb	r3, [r3, #25]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d004      	beq.n	8001308 <HAL_ADC_IRQHandler+0x4c>
 80012fe:	f640 3148 	movw	r1, #2888	; 0xb48
 8001302:	4871      	ldr	r0, [pc, #452]	; (80014c8 <HAL_ADC_IRQHandler+0x20c>)
 8001304:	f7ff fa31 	bl	800076a <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	2b04      	cmp	r3, #4
 800130e:	d008      	beq.n	8001322 <HAL_ADC_IRQHandler+0x66>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	2b08      	cmp	r3, #8
 8001316:	d004      	beq.n	8001322 <HAL_ADC_IRQHandler+0x66>
 8001318:	f640 3149 	movw	r1, #2889	; 0xb49
 800131c:	486a      	ldr	r0, [pc, #424]	; (80014c8 <HAL_ADC_IRQHandler+0x20c>)
 800131e:	f7ff fa24 	bl	800076a <assert_failed>
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b04      	cmp	r3, #4
 800132e:	d106      	bne.n	800133e <HAL_ADC_IRQHandler+0x82>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	2b04      	cmp	r3, #4
 800133c:	d00d      	beq.n	800135a <HAL_ADC_IRQHandler+0x9e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001348:	2b08      	cmp	r3, #8
 800134a:	d17a      	bne.n	8001442 <HAL_ADC_IRQHandler+0x186>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b08      	cmp	r3, #8
 8001358:	d173      	bne.n	8001442 <HAL_ADC_IRQHandler+0x186>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_IRQHandler+0xb6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001372:	4b56      	ldr	r3, [pc, #344]	; (80014cc <HAL_ADC_IRQHandler+0x210>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	2b00      	cmp	r3, #0
 800137c:	d010      	beq.n	80013a0 <HAL_ADC_IRQHandler+0xe4>
 800137e:	4b53      	ldr	r3, [pc, #332]	; (80014cc <HAL_ADC_IRQHandler+0x210>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	2b05      	cmp	r3, #5
 8001388:	d00a      	beq.n	80013a0 <HAL_ADC_IRQHandler+0xe4>
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <HAL_ADC_IRQHandler+0x210>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 031f 	and.w	r3, r3, #31
 8001392:	2b09      	cmp	r3, #9
 8001394:	d004      	beq.n	80013a0 <HAL_ADC_IRQHandler+0xe4>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800139e:	d104      	bne.n	80013aa <HAL_ADC_IRQHandler+0xee>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	e003      	b.n	80013b2 <HAL_ADC_IRQHandler+0xf6>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80013aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d139      	bne.n	8001434 <HAL_ADC_IRQHandler+0x178>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d134      	bne.n	8001434 <HAL_ADC_IRQHandler+0x178>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d12d      	bne.n	8001434 <HAL_ADC_IRQHandler+0x178>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d11a      	bne.n	800141c <HAL_ADC_IRQHandler+0x160>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 020c 	bic.w	r2, r2, #12
 80013f4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d112      	bne.n	8001434 <HAL_ADC_IRQHandler+0x178>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f043 0201 	orr.w	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
 800141a:	e00b      	b.n	8001434 <HAL_ADC_IRQHandler+0x178>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f043 0210 	orr.w	r2, r3, #16
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	f043 0201 	orr.w	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff f95f 	bl	80006f8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	220c      	movs	r2, #12
 8001440:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	2b20      	cmp	r3, #32
 800144e:	d106      	bne.n	800145e <HAL_ADC_IRQHandler+0x1a2>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0320 	and.w	r3, r3, #32
 800145a:	2b20      	cmp	r3, #32
 800145c:	d00f      	beq.n	800147e <HAL_ADC_IRQHandler+0x1c2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001468:	2b40      	cmp	r3, #64	; 0x40
 800146a:	f040 80ae 	bne.w	80015ca <HAL_ADC_IRQHandler+0x30e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001478:	2b40      	cmp	r3, #64	; 0x40
 800147a:	f040 80a6 	bne.w	80015ca <HAL_ADC_IRQHandler+0x30e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_ADC_IRQHandler+0x210>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 031f 	and.w	r3, r3, #31
 8001492:	2b00      	cmp	r3, #0
 8001494:	d010      	beq.n	80014b8 <HAL_ADC_IRQHandler+0x1fc>
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_ADC_IRQHandler+0x210>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 031f 	and.w	r3, r3, #31
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d00a      	beq.n	80014b8 <HAL_ADC_IRQHandler+0x1fc>
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_ADC_IRQHandler+0x210>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 031f 	and.w	r3, r3, #31
 80014aa:	2b09      	cmp	r3, #9
 80014ac:	d004      	beq.n	80014b8 <HAL_ADC_IRQHandler+0x1fc>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b6:	d10b      	bne.n	80014d0 <HAL_ADC_IRQHandler+0x214>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	e00a      	b.n	80014d8 <HAL_ADC_IRQHandler+0x21c>
 80014c2:	bf00      	nop
 80014c4:	50000100 	.word	0x50000100
 80014c8:	08005ee0 	.word	0x08005ee0
 80014cc:	50000300 	.word	0x50000300
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80014d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d16a      	bne.n	80015bc <HAL_ADC_IRQHandler+0x300>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00b      	beq.n	8001508 <HAL_ADC_IRQHandler+0x24c>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d15e      	bne.n	80015bc <HAL_ADC_IRQHandler+0x300>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001504:	2b00      	cmp	r3, #0
 8001506:	d159      	bne.n	80015bc <HAL_ADC_IRQHandler+0x300>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001512:	2b40      	cmp	r3, #64	; 0x40
 8001514:	d152      	bne.n	80015bc <HAL_ADC_IRQHandler+0x300>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001516:	4b8f      	ldr	r3, [pc, #572]	; (8001754 <HAL_ADC_IRQHandler+0x498>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 031f 	and.w	r3, r3, #31
 800151e:	2b00      	cmp	r3, #0
 8001520:	d010      	beq.n	8001544 <HAL_ADC_IRQHandler+0x288>
 8001522:	4b8c      	ldr	r3, [pc, #560]	; (8001754 <HAL_ADC_IRQHandler+0x498>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	2b06      	cmp	r3, #6
 800152c:	d00a      	beq.n	8001544 <HAL_ADC_IRQHandler+0x288>
 800152e:	4b89      	ldr	r3, [pc, #548]	; (8001754 <HAL_ADC_IRQHandler+0x498>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	2b07      	cmp	r3, #7
 8001538:	d004      	beq.n	8001544 <HAL_ADC_IRQHandler+0x288>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001542:	d104      	bne.n	800154e <HAL_ADC_IRQHandler+0x292>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e003      	b.n	8001556 <HAL_ADC_IRQHandler+0x29a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800154e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d12d      	bne.n	80015bc <HAL_ADC_IRQHandler+0x300>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d11a      	bne.n	80015a4 <HAL_ADC_IRQHandler+0x2e8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800157c:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d112      	bne.n	80015bc <HAL_ADC_IRQHandler+0x300>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
 80015a2:	e00b      	b.n	80015bc <HAL_ADC_IRQHandler+0x300>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f043 0210 	orr.w	r2, r3, #16
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f8cb 	bl	8001758 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2260      	movs	r2, #96	; 0x60
 80015c8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d4:	2b80      	cmp	r3, #128	; 0x80
 80015d6:	d113      	bne.n	8001600 <HAL_ADC_IRQHandler+0x344>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e2:	2b80      	cmp	r3, #128	; 0x80
 80015e4:	d10c      	bne.n	8001600 <HAL_ADC_IRQHandler+0x344>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fa9c 	bl	8000b30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800160e:	d115      	bne.n	800163c <HAL_ADC_IRQHandler+0x380>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800161e:	d10d      	bne.n	800163c <HAL_ADC_IRQHandler+0x380>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f8a7 	bl	8001780 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163a:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164a:	d115      	bne.n	8001678 <HAL_ADC_IRQHandler+0x3bc>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800165a:	d10d      	bne.n	8001678 <HAL_ADC_IRQHandler+0x3bc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f893 	bl	8001794 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001676:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b10      	cmp	r3, #16
 8001684:	d13d      	bne.n	8001702 <HAL_ADC_IRQHandler+0x446>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	2b10      	cmp	r3, #16
 8001692:	d136      	bne.n	8001702 <HAL_ADC_IRQHandler+0x446>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001698:	2b01      	cmp	r3, #1
 800169a:	d102      	bne.n	80016a2 <HAL_ADC_IRQHandler+0x3e6>
    {
      overrun_error = 1U;
 800169c:	2301      	movs	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e019      	b.n	80016d6 <HAL_ADC_IRQHandler+0x41a>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016a2:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <HAL_ADC_IRQHandler+0x498>)
 80016a4:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_ADC_IRQHandler+0x40a>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d10a      	bne.n	80016d6 <HAL_ADC_IRQHandler+0x41a>
        {
          overrun_error = 1U;  
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e007      	b.n	80016d6 <HAL_ADC_IRQHandler+0x41a>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_ADC_IRQHandler+0x41a>
        {
          overrun_error = 1U;  
 80016d2:	2301      	movs	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d10e      	bne.n	80016fa <HAL_ADC_IRQHandler+0x43e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	f043 0202 	orr.w	r2, r3, #2
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fa25 	bl	8000b44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2210      	movs	r2, #16
 8001700:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001710:	d11b      	bne.n	800174a <HAL_ADC_IRQHandler+0x48e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001720:	d113      	bne.n	800174a <HAL_ADC_IRQHandler+0x48e>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f043 0208 	orr.w	r2, r3, #8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001742:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f811 	bl	800176c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	50000300 	.word	0x50000300

08001758 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b09a      	sub	sp, #104	; 0x68
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017c4:	d009      	beq.n	80017da <HAL_ADC_ConfigChannel+0x32>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a66      	ldr	r2, [pc, #408]	; (8001964 <HAL_ADC_ConfigChannel+0x1bc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d004      	beq.n	80017da <HAL_ADC_ConfigChannel+0x32>
 80017d0:	f241 51b7 	movw	r1, #5559	; 0x15b7
 80017d4:	4864      	ldr	r0, [pc, #400]	; (8001968 <HAL_ADC_ConfigChannel+0x1c0>)
 80017d6:	f7fe ffc8 	bl	800076a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d040      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d03c      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d038      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d034      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d030      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b06      	cmp	r3, #6
 8001808:	d02c      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b07      	cmp	r3, #7
 8001810:	d028      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b08      	cmp	r3, #8
 8001818:	d024      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b09      	cmp	r3, #9
 8001820:	d020      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d01c      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b0b      	cmp	r3, #11
 8001830:	d018      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d014      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b0d      	cmp	r3, #13
 8001840:	d010      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b0e      	cmp	r3, #14
 8001848:	d00c      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b0f      	cmp	r3, #15
 8001850:	d008      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b10      	cmp	r3, #16
 8001858:	d004      	beq.n	8001864 <HAL_ADC_ConfigChannel+0xbc>
 800185a:	f241 51b8 	movw	r1, #5560	; 0x15b8
 800185e:	4842      	ldr	r0, [pc, #264]	; (8001968 <HAL_ADC_ConfigChannel+0x1c0>)
 8001860:	f7fe ff83 	bl	800076a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x106>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d01c      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x106>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d018      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x106>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d014      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x106>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b04      	cmp	r3, #4
 800188a:	d010      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x106>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d00c      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x106>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b06      	cmp	r3, #6
 800189a:	d008      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x106>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b07      	cmp	r3, #7
 80018a2:	d004      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x106>
 80018a4:	f241 51b9 	movw	r1, #5561	; 0x15b9
 80018a8:	482f      	ldr	r0, [pc, #188]	; (8001968 <HAL_ADC_ConfigChannel+0x1c0>)
 80018aa:	f7fe ff5e 	bl	800076a <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d008      	beq.n	80018c8 <HAL_ADC_ConfigChannel+0x120>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d004      	beq.n	80018c8 <HAL_ADC_ConfigChannel+0x120>
 80018be:	f241 51ba 	movw	r1, #5562	; 0x15ba
 80018c2:	4829      	ldr	r0, [pc, #164]	; (8001968 <HAL_ADC_ConfigChannel+0x1c0>)
 80018c4:	f7fe ff51 	bl	800076a <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d014      	beq.n	80018fa <HAL_ADC_ConfigChannel+0x152>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d010      	beq.n	80018fa <HAL_ADC_ConfigChannel+0x152>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d00c      	beq.n	80018fa <HAL_ADC_ConfigChannel+0x152>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d008      	beq.n	80018fa <HAL_ADC_ConfigChannel+0x152>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d004      	beq.n	80018fa <HAL_ADC_ConfigChannel+0x152>
 80018f0:	f241 51bb 	movw	r1, #5563	; 0x15bb
 80018f4:	481c      	ldr	r0, [pc, #112]	; (8001968 <HAL_ADC_ConfigChannel+0x1c0>)
 80018f6:	f7fe ff38 	bl	800076a <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f003 0318 	and.w	r3, r3, #24
 8001904:	2b00      	cmp	r3, #0
 8001906:	d104      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x16a>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001910:	d32c      	bcc.n	800196c <HAL_ADC_ConfigChannel+0x1c4>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0318 	and.w	r3, r3, #24
 800191c:	2b08      	cmp	r3, #8
 800191e:	d104      	bne.n	800192a <HAL_ADC_ConfigChannel+0x182>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001928:	d320      	bcc.n	800196c <HAL_ADC_ConfigChannel+0x1c4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f003 0318 	and.w	r3, r3, #24
 8001934:	2b10      	cmp	r3, #16
 8001936:	d103      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x198>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	2bff      	cmp	r3, #255	; 0xff
 800193e:	d915      	bls.n	800196c <HAL_ADC_ConfigChannel+0x1c4>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f003 0318 	and.w	r3, r3, #24
 800194a:	2b18      	cmp	r3, #24
 800194c:	d103      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x1ae>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	2b3f      	cmp	r3, #63	; 0x3f
 8001954:	d90a      	bls.n	800196c <HAL_ADC_ConfigChannel+0x1c4>
 8001956:	f241 51bc 	movw	r1, #5564	; 0x15bc
 800195a:	4803      	ldr	r0, [pc, #12]	; (8001968 <HAL_ADC_ConfigChannel+0x1c0>)
 800195c:	f7fe ff05 	bl	800076a <assert_failed>
 8001960:	e004      	b.n	800196c <HAL_ADC_ConfigChannel+0x1c4>
 8001962:	bf00      	nop
 8001964:	50000100 	.word	0x50000100
 8001968:	08005ee0 	.word	0x08005ee0
  
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d063      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0x294>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	f000 809c 	beq.w	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b02      	cmp	r3, #2
 8001984:	f000 8097 	beq.w	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b03      	cmp	r3, #3
 800198e:	f000 8092 	beq.w	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b04      	cmp	r3, #4
 8001998:	f000 808d 	beq.w	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	f000 8088 	beq.w	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	f000 8083 	beq.w	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b07      	cmp	r3, #7
 80019b6:	d07e      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d07a      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b09      	cmp	r3, #9
 80019c6:	d076      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b0a      	cmp	r3, #10
 80019ce:	d072      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b0b      	cmp	r3, #11
 80019d6:	d06e      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b0c      	cmp	r3, #12
 80019de:	d06a      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b0d      	cmp	r3, #13
 80019e6:	d066      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b0e      	cmp	r3, #14
 80019ee:	d062      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d05e      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d05a      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b11      	cmp	r3, #17
 8001a06:	d056      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b12      	cmp	r3, #18
 8001a0e:	d052      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b0f      	cmp	r3, #15
 8001a16:	d04e      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b11      	cmp	r3, #17
 8001a1e:	d04a      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b11      	cmp	r3, #17
 8001a26:	d046      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b11      	cmp	r3, #17
 8001a2e:	d042      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a30:	f241 51c4 	movw	r1, #5572	; 0x15c4
 8001a34:	489b      	ldr	r0, [pc, #620]	; (8001ca4 <HAL_ADC_ConfigChannel+0x4fc>)
 8001a36:	f7fe fe98 	bl	800076a <assert_failed>
 8001a3a:	e03c      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d038      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d034      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d030      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d02c      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d028      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b06      	cmp	r3, #6
 8001a6a:	d024      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b07      	cmp	r3, #7
 8001a72:	d020      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d01c      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b09      	cmp	r3, #9
 8001a82:	d018      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b0a      	cmp	r3, #10
 8001a8a:	d014      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b0b      	cmp	r3, #11
 8001a92:	d010      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b0c      	cmp	r3, #12
 8001a9a:	d00c      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b0d      	cmp	r3, #13
 8001aa2:	d008      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b0e      	cmp	r3, #14
 8001aaa:	d004      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x30e>
 8001aac:	f241 51c8 	movw	r1, #5576	; 0x15c8
 8001ab0:	487c      	ldr	r0, [pc, #496]	; (8001ca4 <HAL_ADC_ConfigChannel+0x4fc>)
 8001ab2:	f7fe fe5a 	bl	800076a <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x31c>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e2a5      	b.n	8002010 <HAL_ADC_ConfigChannel+0x868>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 8289 	bne.w	8001fee <HAL_ADC_ConfigChannel+0x846>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d81c      	bhi.n	8001b1e <HAL_ADC_ConfigChannel+0x376>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	461a      	mov	r2, r3
 8001af8:	231f      	movs	r3, #31
 8001afa:	4093      	lsls	r3, r2
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4019      	ands	r1, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa00 f203 	lsl.w	r2, r0, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1c:	e063      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x43e>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b09      	cmp	r3, #9
 8001b24:	d81e      	bhi.n	8001b64 <HAL_ADC_ConfigChannel+0x3bc>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	3b1e      	subs	r3, #30
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4019      	ands	r1, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	3b1e      	subs	r3, #30
 8001b56:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	635a      	str	r2, [r3, #52]	; 0x34
 8001b62:	e040      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x43e>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b0e      	cmp	r3, #14
 8001b6a:	d81e      	bhi.n	8001baa <HAL_ADC_ConfigChannel+0x402>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	3b3c      	subs	r3, #60	; 0x3c
 8001b80:	221f      	movs	r2, #31
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4019      	ands	r1, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	3b3c      	subs	r3, #60	; 0x3c
 8001b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ba8:	e01d      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x43e>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	3b5a      	subs	r3, #90	; 0x5a
 8001bbe:	221f      	movs	r2, #31
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	4019      	ands	r1, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	3b5a      	subs	r3, #90	; 0x5a
 8001bda:	fa00 f203 	lsl.w	r2, r0, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f040 80e6 	bne.w	8001dc2 <HAL_ADC_ConfigChannel+0x61a>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b09      	cmp	r3, #9
 8001bfc:	d91c      	bls.n	8001c38 <HAL_ADC_ConfigChannel+0x490>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6999      	ldr	r1, [r3, #24]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b1e      	subs	r3, #30
 8001c10:	2207      	movs	r2, #7
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4019      	ands	r1, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6898      	ldr	r0, [r3, #8]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	3b1e      	subs	r3, #30
 8001c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	619a      	str	r2, [r3, #24]
 8001c36:	e019      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x4c4>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6959      	ldr	r1, [r3, #20]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	2207      	movs	r2, #7
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4019      	ands	r1, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6898      	ldr	r0, [r3, #8]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	fa00 f203 	lsl.w	r2, r0, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	08db      	lsrs	r3, r3, #3
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d850      	bhi.n	8001d30 <HAL_ADC_ConfigChannel+0x588>
 8001c8e:	a201      	add	r2, pc, #4	; (adr r2, 8001c94 <HAL_ADC_ConfigChannel+0x4ec>)
 8001c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c94:	08001ca9 	.word	0x08001ca9
 8001c98:	08001ccb 	.word	0x08001ccb
 8001c9c:	08001ced 	.word	0x08001ced
 8001ca0:	08001d0f 	.word	0x08001d0f
 8001ca4:	08005ee0 	.word	0x08005ee0
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cae:	4b94      	ldr	r3, [pc, #592]	; (8001f00 <HAL_ADC_ConfigChannel+0x758>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	0691      	lsls	r1, r2, #26
 8001cb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cc6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cc8:	e07e      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x620>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cd0:	4b8b      	ldr	r3, [pc, #556]	; (8001f00 <HAL_ADC_ConfigChannel+0x758>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	0691      	lsls	r1, r2, #26
 8001cda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ce8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cea:	e06d      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x620>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cf2:	4b83      	ldr	r3, [pc, #524]	; (8001f00 <HAL_ADC_ConfigChannel+0x758>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	0691      	lsls	r1, r2, #26
 8001cfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d0a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d0c:	e05c      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x620>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d14:	4b7a      	ldr	r3, [pc, #488]	; (8001f00 <HAL_ADC_ConfigChannel+0x758>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	0691      	lsls	r1, r2, #26
 8001d1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d20:	430a      	orrs	r2, r1
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d2c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d2e:	e04b      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x620>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	069b      	lsls	r3, r3, #26
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d107      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x5ac>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d52:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	069b      	lsls	r3, r3, #26
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d107      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x5d0>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d76:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	069b      	lsls	r3, r3, #26
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d107      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x5f4>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d9a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	069b      	lsls	r3, r3, #26
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d10a      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x61e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dbe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001dc0:	e001      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x61e>
    }

  }
 8001dc2:	bf00      	nop
 8001dc4:	e000      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x620>
      break;
 8001dc6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d108      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x640>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x640>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_ADC_ConfigChannel+0x642>
 8001de8:	2300      	movs	r3, #0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 810a 	bne.w	8002004 <HAL_ADC_ConfigChannel+0x85c>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d00f      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x670>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	400a      	ands	r2, r1
 8001e12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e16:	e049      	b.n	8001eac <HAL_ADC_ConfigChannel+0x704>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2201      	movs	r2, #1
 8001e26:	409a      	lsls	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b09      	cmp	r3, #9
 8001e38:	d91c      	bls.n	8001e74 <HAL_ADC_ConfigChannel+0x6cc>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6999      	ldr	r1, [r3, #24]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b1b      	subs	r3, #27
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4019      	ands	r1, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6898      	ldr	r0, [r3, #8]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	3b1b      	subs	r3, #27
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	619a      	str	r2, [r3, #24]
 8001e72:	e01b      	b.n	8001eac <HAL_ADC_ConfigChannel+0x704>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6959      	ldr	r1, [r3, #20]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	2207      	movs	r2, #7
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4019      	ands	r1, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6898      	ldr	r0, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_ADC_ConfigChannel+0x75c>)
 8001eae:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b10      	cmp	r3, #16
 8001eb6:	d105      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x71c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d015      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0x748>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ec8:	2b11      	cmp	r3, #17
 8001eca:	d105      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x730>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0x748>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001edc:	2b12      	cmp	r3, #18
 8001ede:	f040 8091 	bne.w	8002004 <HAL_ADC_ConfigChannel+0x85c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 808a 	bne.w	8002004 <HAL_ADC_ConfigChannel+0x85c>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ef8:	d108      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x764>
 8001efa:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <HAL_ADC_ConfigChannel+0x760>)
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	e008      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x76a>
 8001f00:	83fff000 	.word	0x83fff000
 8001f04:	50000300 	.word	0x50000300
 8001f08:	50000100 	.word	0x50000100
 8001f0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f10:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x78a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x78a>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x78c>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d150      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x832>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d010      	beq.n	8001f60 <HAL_ADC_ConfigChannel+0x7b8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x7b2>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x7b2>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x7b4>
 8001f5a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d13c      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x832>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d11d      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x7fc>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f70:	d118      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x7fc>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f7c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7e:	4b26      	ldr	r3, [pc, #152]	; (8002018 <HAL_ADC_ConfigChannel+0x870>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a26      	ldr	r2, [pc, #152]	; (800201c <HAL_ADC_ConfigChannel+0x874>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9a      	lsrs	r2, r3, #18
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x7f4>
          {
            wait_loop_index--;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x7ee>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fa2:	e02e      	b.n	8002002 <HAL_ADC_ConfigChannel+0x85a>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b11      	cmp	r3, #17
 8001faa:	d10b      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x81c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb4:	d106      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x81c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fc2:	e01e      	b.n	8002002 <HAL_ADC_ConfigChannel+0x85a>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b12      	cmp	r3, #18
 8001fca:	d11a      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x85a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fd8:	e013      	b.n	8002002 <HAL_ADC_ConfigChannel+0x85a>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f043 0220 	orr.w	r2, r3, #32
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fec:	e00a      	b.n	8002004 <HAL_ADC_ConfigChannel+0x85c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f043 0220 	orr.w	r2, r3, #32
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002000:	e000      	b.n	8002004 <HAL_ADC_ConfigChannel+0x85c>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002002:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800200c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002010:	4618      	mov	r0, r3
 8002012:	3768      	adds	r7, #104	; 0x68
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000000 	.word	0x20000000
 800201c:	431bde83 	.word	0x431bde83

08002020 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b098      	sub	sp, #96	; 0x60
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002038:	d004      	beq.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0x24>
 800203a:	f641 3194 	movw	r1, #7060	; 0x1b94
 800203e:	4891      	ldr	r0, [pc, #580]	; (8002284 <HAL_ADCEx_MultiModeConfigChannel+0x264>)
 8002040:	f7fe fb93 	bl	800076a <assert_failed>
  assert_param(IS_ADC_MODE(multimode->Mode));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d01c      	beq.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d018      	beq.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d014      	beq.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b05      	cmp	r3, #5
 800206a:	d010      	beq.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b06      	cmp	r3, #6
 8002072:	d00c      	beq.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b07      	cmp	r3, #7
 800207a:	d008      	beq.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b09      	cmp	r3, #9
 8002082:	d004      	beq.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002084:	f641 3195 	movw	r1, #7061	; 0x1b95
 8002088:	487e      	ldr	r0, [pc, #504]	; (8002284 <HAL_ADCEx_MultiModeConfigChannel+0x264>)
 800208a:	f7fe fb6e 	bl	800076a <assert_failed>
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d052      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00e      	beq.n	80020bc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020a6:	d009      	beq.n	80020bc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80020b0:	d004      	beq.n	80020bc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80020b2:	f641 3198 	movw	r1, #7064	; 0x1b98
 80020b6:	4873      	ldr	r0, [pc, #460]	; (8002284 <HAL_ADCEx_MultiModeConfigChannel+0x264>)
 80020b8:	f7fe fb57 	bl	800076a <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d03b      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020cc:	d036      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d6:	d031      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020e0:	d02c      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ea:	d027      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80020f4:	d022      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80020fe:	d01d      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002108:	d018      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002112:	d013      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800211c:	d00e      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002126:	d009      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8002130:	d004      	beq.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002132:	f641 3199 	movw	r1, #7065	; 0x1b99
 8002136:	4853      	ldr	r0, [pc, #332]	; (8002284 <HAL_ADCEx_MultiModeConfigChannel+0x264>)
 8002138:	f7fe fb17 	bl	800076a <assert_failed>
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002144:	d102      	bne.n	800214c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
 8002146:	4b50      	ldr	r3, [pc, #320]	; (8002288 <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	e002      	b.n	8002152 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800214c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002150:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
  {
    /* Return function status */
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0aa      	b.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0x292>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8002166:	2302      	movs	r3, #2
 8002168:	e0a3      	b.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0x292>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	f040 8087 	bne.w	8002290 <HAL_ADCEx_MultiModeConfigChannel+0x270>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 8080 	bne.w	8002290 <HAL_ADCEx_MultiModeConfigChannel+0x270>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002190:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8002192:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d040      	beq.n	800221e <HAL_ADCEx_MultiModeConfigChannel+0x1fe>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800219c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ae:	035b      	lsls	r3, r3, #13
 80021b0:	430b      	orrs	r3, r1
 80021b2:	431a      	orrs	r2, r3
 80021b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d108      	bne.n	80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_ADCEx_MultiModeConfigChannel+0x1ba>
 80021d8:	2300      	movs	r3, #0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d162      	bne.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x284>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_ADCEx_MultiModeConfigChannel+0x1da>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_ADCEx_MultiModeConfigChannel+0x1da>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>
 80021fa:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d151      	bne.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x284>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002208:	f023 030f 	bic.w	r3, r3, #15
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	6811      	ldr	r1, [r2, #0]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	6892      	ldr	r2, [r2, #8]
 8002214:	430a      	orrs	r2, r1
 8002216:	431a      	orrs	r2, r3
 8002218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800221a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800221c:	e042      	b.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x284>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800221e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002228:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d108      	bne.n	800224a <HAL_ADCEx_MultiModeConfigChannel+0x22a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_ADCEx_MultiModeConfigChannel+0x22a>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_ADCEx_MultiModeConfigChannel+0x22c>
 800224a:	2300      	movs	r3, #0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d129      	bne.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x284>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d107      	bne.n	800226c <HAL_ADCEx_MultiModeConfigChannel+0x24c>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_ADCEx_MultiModeConfigChannel+0x24c>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_ADCEx_MultiModeConfigChannel+0x24e>
 800226c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800226e:	2b00      	cmp	r3, #0
 8002270:	d118      	bne.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x284>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800227a:	f023 030f 	bic.w	r3, r3, #15
 800227e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002280:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002282:	e00f      	b.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x284>
 8002284:	08005ee0 	.word	0x08005ee0
 8002288:	50000100 	.word	0x50000100
 800228c:	50000300 	.word	0x50000300
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80022a2:	e000      	b.n	80022a6 <HAL_ADCEx_MultiModeConfigChannel+0x286>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022a4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80022ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80022b2:	4618      	mov	r0, r3
 80022b4:	3760      	adds	r7, #96	; 0x60
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop

080022bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d126      	bne.n	8002324 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d115      	bne.n	800231c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d111      	bne.n	800231c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f7fe f9eb 	bl	80006f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002322:	e004      	b.n	800232e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	4798      	blx	r3
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7fe f9f3 	bl	8000730 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	f043 0204 	orr.w	r2, r3, #4
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f7fe fbe3 	bl	8000b44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d108      	bne.n	80023b4 <ADC_Enable+0x2c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <ADC_Enable+0x2c>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <ADC_Enable+0x2e>
 80023b4:	2300      	movs	r3, #0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d143      	bne.n	8002442 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <ADC_Enable+0xc4>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00d      	beq.n	80023e4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f043 0210 	orr.w	r2, r3, #16
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	f043 0201 	orr.w	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e02f      	b.n	8002444 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80023f4:	f7fe fb90 	bl	8000b18 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023fa:	e01b      	b.n	8002434 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023fc:	f7fe fb8c 	bl	8000b18 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d914      	bls.n	8002434 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	d00d      	beq.n	8002434 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f043 0210 	orr.w	r2, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e007      	b.n	8002444 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d1dc      	bne.n	80023fc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	8000003f 	.word	0x8000003f

08002450 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d108      	bne.n	800247c <ADC_Disable+0x2c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <ADC_Disable+0x2c>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <ADC_Disable+0x2e>
 800247c:	2300      	movs	r3, #0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d047      	beq.n	8002512 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 030d 	and.w	r3, r3, #13
 800248c:	2b01      	cmp	r3, #1
 800248e:	d10f      	bne.n	80024b0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0202 	orr.w	r2, r2, #2
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2203      	movs	r2, #3
 80024a6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fb36 	bl	8000b18 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024ae:	e029      	b.n	8002504 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f043 0210 	orr.w	r2, r3, #16
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e023      	b.n	8002514 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024cc:	f7fe fb24 	bl	8000b18 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d914      	bls.n	8002504 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10d      	bne.n	8002504 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f043 0210 	orr.w	r2, r3, #16
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e007      	b.n	8002514 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d0dc      	beq.n	80024cc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002538:	4013      	ands	r3, r2
 800253a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254e:	4a04      	ldr	r2, [pc, #16]	; (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	60d3      	str	r3, [r2, #12]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <__NVIC_GetPriorityGrouping+0x18>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	f003 0307 	and.w	r3, r3, #7
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	2b00      	cmp	r3, #0
 8002590:	db0b      	blt.n	80025aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	f003 021f 	and.w	r2, r3, #31
 8002598:	4907      	ldr	r1, [pc, #28]	; (80025b8 <__NVIC_EnableIRQ+0x38>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2001      	movs	r0, #1
 80025a2:	fa00 f202 	lsl.w	r2, r0, r2
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000e100 	.word	0xe000e100

080025bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	db0a      	blt.n	80025e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	490c      	ldr	r1, [pc, #48]	; (8002608 <__NVIC_SetPriority+0x4c>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	440b      	add	r3, r1
 80025e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e4:	e00a      	b.n	80025fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4908      	ldr	r1, [pc, #32]	; (800260c <__NVIC_SetPriority+0x50>)
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	3b04      	subs	r3, #4
 80025f4:	0112      	lsls	r2, r2, #4
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	440b      	add	r3, r1
 80025fa:	761a      	strb	r2, [r3, #24]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000e100 	.word	0xe000e100
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f1c3 0307 	rsb	r3, r3, #7
 800262a:	2b04      	cmp	r3, #4
 800262c:	bf28      	it	cs
 800262e:	2304      	movcs	r3, #4
 8002630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3304      	adds	r3, #4
 8002636:	2b06      	cmp	r3, #6
 8002638:	d902      	bls.n	8002640 <NVIC_EncodePriority+0x30>
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3b03      	subs	r3, #3
 800263e:	e000      	b.n	8002642 <NVIC_EncodePriority+0x32>
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	f04f 32ff 	mov.w	r2, #4294967295
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	401a      	ands	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002658:	f04f 31ff 	mov.w	r1, #4294967295
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	43d9      	mvns	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	4313      	orrs	r3, r2
         );
}
 800266a:	4618      	mov	r0, r3
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002688:	d301      	bcc.n	800268e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268a:	2301      	movs	r3, #1
 800268c:	e00f      	b.n	80026ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <SysTick_Config+0x40>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002696:	210f      	movs	r1, #15
 8002698:	f04f 30ff 	mov.w	r0, #4294967295
 800269c:	f7ff ff8e 	bl	80025bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <SysTick_Config+0x40>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a6:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <SysTick_Config+0x40>)
 80026a8:	2207      	movs	r2, #7
 80026aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	e000e010 	.word	0xe000e010

080026bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b07      	cmp	r3, #7
 80026c8:	d00f      	beq.n	80026ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b06      	cmp	r3, #6
 80026ce:	d00c      	beq.n	80026ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d009      	beq.n	80026ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d006      	beq.n	80026ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d003      	beq.n	80026ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026e2:	21ac      	movs	r1, #172	; 0xac
 80026e4:	4804      	ldr	r0, [pc, #16]	; (80026f8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80026e6:	f7fe f840 	bl	800076a <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ff16 	bl	800251c <__NVIC_SetPriorityGrouping>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	08005f1c 	.word	0x08005f1c

080026fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b0f      	cmp	r3, #15
 8002712:	d903      	bls.n	800271c <HAL_NVIC_SetPriority+0x20>
 8002714:	21c4      	movs	r1, #196	; 0xc4
 8002716:	480e      	ldr	r0, [pc, #56]	; (8002750 <HAL_NVIC_SetPriority+0x54>)
 8002718:	f7fe f827 	bl	800076a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b0f      	cmp	r3, #15
 8002720:	d903      	bls.n	800272a <HAL_NVIC_SetPriority+0x2e>
 8002722:	21c5      	movs	r1, #197	; 0xc5
 8002724:	480a      	ldr	r0, [pc, #40]	; (8002750 <HAL_NVIC_SetPriority+0x54>)
 8002726:	f7fe f820 	bl	800076a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800272a:	f7ff ff1b 	bl	8002564 <__NVIC_GetPriorityGrouping>
 800272e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	6978      	ldr	r0, [r7, #20]
 8002736:	f7ff ff6b 	bl	8002610 <NVIC_EncodePriority>
 800273a:	4602      	mov	r2, r0
 800273c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff3a 	bl	80025bc <__NVIC_SetPriority>
}
 8002748:	bf00      	nop
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	08005f1c 	.word	0x08005f1c

08002754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	da03      	bge.n	800276e <HAL_NVIC_EnableIRQ+0x1a>
 8002766:	21d8      	movs	r1, #216	; 0xd8
 8002768:	4805      	ldr	r0, [pc, #20]	; (8002780 <HAL_NVIC_EnableIRQ+0x2c>)
 800276a:	f7fd fffe 	bl	800076a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff04 	bl	8002580 <__NVIC_EnableIRQ>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	08005f1c 	.word	0x08005f1c

08002784 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff73 	bl	8002678 <SysTick_Config>
 8002792:	4603      	mov	r3, r0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e023      	b.n	80027f6 <HAL_DAC_Init+0x5a>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a13      	ldr	r2, [pc, #76]	; (8002800 <HAL_DAC_Init+0x64>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d009      	beq.n	80027cc <HAL_DAC_Init+0x30>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_DAC_Init+0x68>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d004      	beq.n	80027cc <HAL_DAC_Init+0x30>
 80027c2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80027c6:	4810      	ldr	r0, [pc, #64]	; (8002808 <HAL_DAC_Init+0x6c>)
 80027c8:	f7fd ffcf 	bl	800076a <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	791b      	ldrb	r3, [r3, #4]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d105      	bne.n	80027e2 <HAL_DAC_Init+0x46>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7fd fdff 	bl	80003e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40007400 	.word	0x40007400
 8002804:	40009800 	.word	0x40009800
 8002808:	08005f58 	.word	0x08005f58

0800280c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_DAC_Start_DMA+0x1ac>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d105      	bne.n	800285c <HAL_DAC_Start_DMA+0x28>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00f      	beq.n	8002876 <HAL_DAC_Start_DMA+0x42>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b10      	cmp	r3, #16
 800285a:	d00c      	beq.n	8002876 <HAL_DAC_Start_DMA+0x42>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a60      	ldr	r2, [pc, #384]	; (80029e4 <HAL_DAC_Start_DMA+0x1b0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d102      	bne.n	800286c <HAL_DAC_Start_DMA+0x38>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d004      	beq.n	8002876 <HAL_DAC_Start_DMA+0x42>
 800286c:	f240 116d 	movw	r1, #365	; 0x16d
 8002870:	485d      	ldr	r0, [pc, #372]	; (80029e8 <HAL_DAC_Start_DMA+0x1b4>)
 8002872:	f7fd ff7a 	bl	800076a <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_DAC_Start_DMA+0x5e>
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	2b04      	cmp	r3, #4
 8002880:	d007      	beq.n	8002892 <HAL_DAC_Start_DMA+0x5e>
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d004      	beq.n	8002892 <HAL_DAC_Start_DMA+0x5e>
 8002888:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800288c:	4856      	ldr	r0, [pc, #344]	; (80029e8 <HAL_DAC_Start_DMA+0x1b4>)
 800288e:	f7fd ff6c 	bl	800076a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	795b      	ldrb	r3, [r3, #5]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_DAC_Start_DMA+0x6a>
 800289a:	2302      	movs	r3, #2
 800289c:	e09b      	b.n	80029d6 <HAL_DAC_Start_DMA+0x1a2>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2202      	movs	r2, #2
 80028a8:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d12f      	bne.n	8002910 <HAL_DAC_Start_DMA+0xdc>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4a4d      	ldr	r2, [pc, #308]	; (80029ec <HAL_DAC_Start_DMA+0x1b8>)
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a4c      	ldr	r2, [pc, #304]	; (80029f0 <HAL_DAC_Start_DMA+0x1bc>)
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a4b      	ldr	r2, [pc, #300]	; (80029f4 <HAL_DAC_Start_DMA+0x1c0>)
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d013      	beq.n	8002906 <HAL_DAC_Start_DMA+0xd2>
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d845      	bhi.n	8002970 <HAL_DAC_Start_DMA+0x13c>
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_DAC_Start_DMA+0xbe>
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d005      	beq.n	80028fc <HAL_DAC_Start_DMA+0xc8>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80028f0:	e03e      	b.n	8002970 <HAL_DAC_Start_DMA+0x13c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3308      	adds	r3, #8
 80028f8:	617b      	str	r3, [r7, #20]
        break;
 80028fa:	e03c      	b.n	8002976 <HAL_DAC_Start_DMA+0x142>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	617b      	str	r3, [r7, #20]
        break;
 8002904:	e037      	b.n	8002976 <HAL_DAC_Start_DMA+0x142>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3310      	adds	r3, #16
 800290c:	617b      	str	r3, [r7, #20]
        break;
 800290e:	e032      	b.n	8002976 <HAL_DAC_Start_DMA+0x142>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4a38      	ldr	r2, [pc, #224]	; (80029f8 <HAL_DAC_Start_DMA+0x1c4>)
 8002916:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a37      	ldr	r2, [pc, #220]	; (80029fc <HAL_DAC_Start_DMA+0x1c8>)
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a36      	ldr	r2, [pc, #216]	; (8002a00 <HAL_DAC_Start_DMA+0x1cc>)
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002936:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	2b08      	cmp	r3, #8
 800293c:	d013      	beq.n	8002966 <HAL_DAC_Start_DMA+0x132>
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d817      	bhi.n	8002974 <HAL_DAC_Start_DMA+0x140>
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_DAC_Start_DMA+0x11e>
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	2b04      	cmp	r3, #4
 800294e:	d005      	beq.n	800295c <HAL_DAC_Start_DMA+0x128>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002950:	e010      	b.n	8002974 <HAL_DAC_Start_DMA+0x140>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3314      	adds	r3, #20
 8002958:	617b      	str	r3, [r7, #20]
        break;
 800295a:	e00c      	b.n	8002976 <HAL_DAC_Start_DMA+0x142>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3318      	adds	r3, #24
 8002962:	617b      	str	r3, [r7, #20]
        break;
 8002964:	e007      	b.n	8002976 <HAL_DAC_Start_DMA+0x142>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	331c      	adds	r3, #28
 800296c:	617b      	str	r3, [r7, #20]
        break;
 800296e:	e002      	b.n	8002976 <HAL_DAC_Start_DMA+0x142>
        break;
 8002970:	bf00      	nop
 8002972:	e000      	b.n	8002976 <HAL_DAC_Start_DMA+0x142>
        break;
 8002974:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10f      	bne.n	800299c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800298a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6898      	ldr	r0, [r3, #8]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	f000 fa69 	bl	8002e6c <HAL_DMA_Start_IT>
 800299a:	e00e      	b.n	80029ba <HAL_DAC_Start_DMA+0x186>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80029aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68d8      	ldr	r0, [r3, #12]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	f000 fa59 	bl	8002e6c <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	2201      	movs	r2, #1
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40007400 	.word	0x40007400
 80029e4:	40009800 	.word	0x40009800
 80029e8:	08005f90 	.word	0x08005f90
 80029ec:	08002bb9 	.word	0x08002bb9
 80029f0:	08002bdb 	.word	0x08002bdb
 80029f4:	08002bf7 	.word	0x08002bf7
 80029f8:	08002c25 	.word	0x08002c25
 80029fc:	08002c47 	.word	0x08002c47
 8002a00:	08002c63 	.word	0x08002c63

08002a04 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d020      	beq.n	8002a62 <HAL_DAC_ConfigChannel+0x5e>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b24      	cmp	r3, #36	; 0x24
 8002a26:	d01c      	beq.n	8002a62 <HAL_DAC_ConfigChannel+0x5e>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	d018      	beq.n	8002a62 <HAL_DAC_ConfigChannel+0x5e>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b1c      	cmp	r3, #28
 8002a36:	d014      	beq.n	8002a62 <HAL_DAC_ConfigChannel+0x5e>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d010      	beq.n	8002a62 <HAL_DAC_ConfigChannel+0x5e>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b14      	cmp	r3, #20
 8002a46:	d00c      	beq.n	8002a62 <HAL_DAC_ConfigChannel+0x5e>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b34      	cmp	r3, #52	; 0x34
 8002a4e:	d008      	beq.n	8002a62 <HAL_DAC_ConfigChannel+0x5e>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b3c      	cmp	r3, #60	; 0x3c
 8002a56:	d004      	beq.n	8002a62 <HAL_DAC_ConfigChannel+0x5e>
 8002a58:	f44f 7142 	mov.w	r1, #776	; 0x308
 8002a5c:	4845      	ldr	r0, [pc, #276]	; (8002b74 <HAL_DAC_ConfigChannel+0x170>)
 8002a5e:	f7fd fe84 	bl	800076a <assert_failed>

#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a44      	ldr	r2, [pc, #272]	; (8002b78 <HAL_DAC_ConfigChannel+0x174>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d110      	bne.n	8002a8e <HAL_DAC_ConfigChannel+0x8a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10d      	bne.n	8002a8e <HAL_DAC_ConfigChannel+0x8a>
  {
    /* Output Buffer (BOFF1) control */
    assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d017      	beq.n	8002aaa <HAL_DAC_ConfigChannel+0xa6>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d013      	beq.n	8002aaa <HAL_DAC_ConfigChannel+0xa6>
 8002a82:	f240 310e 	movw	r1, #782	; 0x30e
 8002a86:	483b      	ldr	r0, [pc, #236]	; (8002b74 <HAL_DAC_ConfigChannel+0x170>)
 8002a88:	f7fd fe6f 	bl	800076a <assert_failed>
 8002a8c:	e00d      	b.n	8002aaa <HAL_DAC_ConfigChannel+0xa6>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    assert_param(IS_DAC_OUTPUT_SWITCH_STATE(sConfig->DAC_OutputSwitch));    
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_DAC_ConfigChannel+0xa8>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d006      	beq.n	8002aac <HAL_DAC_ConfigChannel+0xa8>
 8002a9e:	f240 3113 	movw	r1, #787	; 0x313
 8002aa2:	4834      	ldr	r0, [pc, #208]	; (8002b74 <HAL_DAC_ConfigChannel+0x170>)
 8002aa4:	f7fd fe61 	bl	800076a <assert_failed>
 8002aa8:	e000      	b.n	8002aac <HAL_DAC_ConfigChannel+0xa8>
    assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
 8002aaa:	bf00      	nop
  }    
#else
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_DAC_ConfigChannel+0xbe>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d004      	beq.n	8002ac2 <HAL_DAC_ConfigChannel+0xbe>
 8002ab8:	f44f 7146 	mov.w	r1, #792	; 0x318
 8002abc:	482d      	ldr	r0, [pc, #180]	; (8002b74 <HAL_DAC_ConfigChannel+0x170>)
 8002abe:	f7fd fe54 	bl	800076a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	795b      	ldrb	r3, [r3, #5]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_DAC_ConfigChannel+0xca>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e04e      	b.n	8002b6c <HAL_DAC_ConfigChannel+0x168>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <HAL_DAC_ConfigChannel+0x174>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d112      	bne.n	8002b12 <HAL_DAC_ConfigChannel+0x10e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10f      	bne.n	8002b12 <HAL_DAC_ConfigChannel+0x10e>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002af2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4013      	ands	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	e00e      	b.n	8002b30 <HAL_DAC_ConfigChannel+0x12c>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8002b12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4013      	ands	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	22c0      	movs	r2, #192	; 0xc0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43da      	mvns	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2201      	movs	r2, #1
 8002b62:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	08005f90 	.word	0x08005f90
 8002b78:	40007400 	.word	0x40007400

08002b7c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7fd fd88 	bl	80006dc <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	711a      	strb	r2, [r3, #4]
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f7ff fe0f 	bl	800280c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	f043 0204 	orr.w	r2, r3, #4
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f7ff fe05 	bl	8002820 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	711a      	strb	r2, [r3, #4]
}
 8002c1c:	bf00      	nop
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff ffa2 	bl	8002b7c <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	711a      	strb	r2, [r3, #4]
}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f7ff ff9b 	bl	8002b90 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f043 0204 	orr.w	r2, r3, #4
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff ff91 	bl	8002ba4 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	711a      	strb	r2, [r3, #4]
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0ce      	b.n	8002e44 <HAL_DMA_Init+0x1b4>
  }
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a68      	ldr	r2, [pc, #416]	; (8002e4c <HAL_DMA_Init+0x1bc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d021      	beq.n	8002cf4 <HAL_DMA_Init+0x64>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a66      	ldr	r2, [pc, #408]	; (8002e50 <HAL_DMA_Init+0x1c0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01c      	beq.n	8002cf4 <HAL_DMA_Init+0x64>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a65      	ldr	r2, [pc, #404]	; (8002e54 <HAL_DMA_Init+0x1c4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d017      	beq.n	8002cf4 <HAL_DMA_Init+0x64>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a63      	ldr	r2, [pc, #396]	; (8002e58 <HAL_DMA_Init+0x1c8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d012      	beq.n	8002cf4 <HAL_DMA_Init+0x64>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a62      	ldr	r2, [pc, #392]	; (8002e5c <HAL_DMA_Init+0x1cc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_DMA_Init+0x64>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a60      	ldr	r2, [pc, #384]	; (8002e60 <HAL_DMA_Init+0x1d0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d008      	beq.n	8002cf4 <HAL_DMA_Init+0x64>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a5f      	ldr	r2, [pc, #380]	; (8002e64 <HAL_DMA_Init+0x1d4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <HAL_DMA_Init+0x64>
 8002cec:	2194      	movs	r1, #148	; 0x94
 8002cee:	485e      	ldr	r0, [pc, #376]	; (8002e68 <HAL_DMA_Init+0x1d8>)
 8002cf0:	f7fd fd3b 	bl	800076a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00c      	beq.n	8002d16 <HAL_DMA_Init+0x86>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b10      	cmp	r3, #16
 8002d02:	d008      	beq.n	8002d16 <HAL_DMA_Init+0x86>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d0c:	d003      	beq.n	8002d16 <HAL_DMA_Init+0x86>
 8002d0e:	2195      	movs	r1, #149	; 0x95
 8002d10:	4855      	ldr	r0, [pc, #340]	; (8002e68 <HAL_DMA_Init+0x1d8>)
 8002d12:	f7fd fd2a 	bl	800076a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d007      	beq.n	8002d2e <HAL_DMA_Init+0x9e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_DMA_Init+0x9e>
 8002d26:	2196      	movs	r1, #150	; 0x96
 8002d28:	484f      	ldr	r0, [pc, #316]	; (8002e68 <HAL_DMA_Init+0x1d8>)
 8002d2a:	f7fd fd1e 	bl	800076a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b80      	cmp	r3, #128	; 0x80
 8002d34:	d007      	beq.n	8002d46 <HAL_DMA_Init+0xb6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_DMA_Init+0xb6>
 8002d3e:	2197      	movs	r1, #151	; 0x97
 8002d40:	4849      	ldr	r0, [pc, #292]	; (8002e68 <HAL_DMA_Init+0x1d8>)
 8002d42:	f7fd fd12 	bl	800076a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00d      	beq.n	8002d6a <HAL_DMA_Init+0xda>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d56:	d008      	beq.n	8002d6a <HAL_DMA_Init+0xda>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d60:	d003      	beq.n	8002d6a <HAL_DMA_Init+0xda>
 8002d62:	2198      	movs	r1, #152	; 0x98
 8002d64:	4840      	ldr	r0, [pc, #256]	; (8002e68 <HAL_DMA_Init+0x1d8>)
 8002d66:	f7fd fd00 	bl	800076a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <HAL_DMA_Init+0xfe>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7a:	d008      	beq.n	8002d8e <HAL_DMA_Init+0xfe>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d84:	d003      	beq.n	8002d8e <HAL_DMA_Init+0xfe>
 8002d86:	2199      	movs	r1, #153	; 0x99
 8002d88:	4837      	ldr	r0, [pc, #220]	; (8002e68 <HAL_DMA_Init+0x1d8>)
 8002d8a:	f7fd fcee 	bl	800076a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <HAL_DMA_Init+0x116>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d003      	beq.n	8002da6 <HAL_DMA_Init+0x116>
 8002d9e:	219a      	movs	r1, #154	; 0x9a
 8002da0:	4831      	ldr	r0, [pc, #196]	; (8002e68 <HAL_DMA_Init+0x1d8>)
 8002da2:	f7fd fce2 	bl	800076a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d012      	beq.n	8002dd4 <HAL_DMA_Init+0x144>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db6:	d00d      	beq.n	8002dd4 <HAL_DMA_Init+0x144>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc0:	d008      	beq.n	8002dd4 <HAL_DMA_Init+0x144>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002dca:	d003      	beq.n	8002dd4 <HAL_DMA_Init+0x144>
 8002dcc:	219b      	movs	r1, #155	; 0x9b
 8002dce:	4826      	ldr	r0, [pc, #152]	; (8002e68 <HAL_DMA_Init+0x1d8>)
 8002dd0:	f7fd fccb 	bl	800076a <assert_failed>
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002dea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002dee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f960 	bl	80030ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}  
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40020008 	.word	0x40020008
 8002e50:	4002001c 	.word	0x4002001c
 8002e54:	40020030 	.word	0x40020030
 8002e58:	40020044 	.word	0x40020044
 8002e5c:	40020058 	.word	0x40020058
 8002e60:	4002006c 	.word	0x4002006c
 8002e64:	40020080 	.word	0x40020080
 8002e68:	08005fcc 	.word	0x08005fcc

08002e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_DMA_Start_IT+0x20>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8a:	d304      	bcc.n	8002e96 <HAL_DMA_Start_IT+0x2a>
 8002e8c:	f240 114d 	movw	r1, #333	; 0x14d
 8002e90:	482c      	ldr	r0, [pc, #176]	; (8002f44 <HAL_DMA_Start_IT+0xd8>)
 8002e92:	f7fd fc6a 	bl	800076a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_DMA_Start_IT+0x38>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e04a      	b.n	8002f3a <HAL_DMA_Start_IT+0xce>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d13a      	bne.n	8002f2c <HAL_DMA_Start_IT+0xc0>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f8d7 	bl	800308e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_DMA_Start_IT+0x8e>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 020e 	orr.w	r2, r2, #14
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e00f      	b.n	8002f1a <HAL_DMA_Start_IT+0xae>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 020a 	orr.w	r2, r2, #10
 8002f08:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0204 	bic.w	r2, r2, #4
 8002f18:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e005      	b.n	8002f38 <HAL_DMA_Start_IT+0xcc>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
 8002f36:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	08005fcc 	.word	0x08005fcc

08002f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	2204      	movs	r2, #4
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d024      	beq.n	8002fba <HAL_DMA_IRQHandler+0x72>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01f      	beq.n	8002fba <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d107      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa0:	2104      	movs	r1, #4
 8002fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d06a      	beq.n	8003086 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fb8:	e065      	b.n	8003086 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d02c      	beq.n	8003024 <HAL_DMA_IRQHandler+0xdc>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d027      	beq.n	8003024 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10b      	bne.n	8002ffa <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 020a 	bic.w	r2, r2, #10
 8002ff0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	2102      	movs	r1, #2
 8003004:	fa01 f202 	lsl.w	r2, r1, r2
 8003008:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	2b00      	cmp	r3, #0
 8003018:	d035      	beq.n	8003086 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003022:	e030      	b.n	8003086 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	2208      	movs	r2, #8
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d028      	beq.n	8003086 <HAL_DMA_IRQHandler+0x13e>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d023      	beq.n	8003086 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 020e 	bic.w	r2, r2, #14
 800304c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	2101      	movs	r1, #1
 8003058:	fa01 f202 	lsl.w	r2, r1, r2
 800305c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	2b00      	cmp	r3, #0
 800307a:	d004      	beq.n	8003086 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
    }
  }
}  
 8003084:	e7ff      	b.n	8003086 <HAL_DMA_IRQHandler+0x13e>
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	2101      	movs	r1, #1
 80030a6:	fa01 f202 	lsl.w	r2, r1, r2
 80030aa:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d108      	bne.n	80030ce <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030cc:	e007      	b.n	80030de <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	60da      	str	r2, [r3, #12]
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <DMA_CalcBaseAndBitshift+0x34>)
 80030fc:	4413      	add	r3, r2
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <DMA_CalcBaseAndBitshift+0x38>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	009a      	lsls	r2, r3, #2
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a06      	ldr	r2, [pc, #24]	; (8003128 <DMA_CalcBaseAndBitshift+0x3c>)
 8003110:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	bffdfff8 	.word	0xbffdfff8
 8003124:	cccccccd 	.word	0xcccccccd
 8003128:	40020000 	.word	0x40020000

0800312c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003140:	d013      	beq.n	800316a <HAL_GPIO_Init+0x3e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a34      	ldr	r2, [pc, #208]	; (8003218 <HAL_GPIO_Init+0xec>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00f      	beq.n	800316a <HAL_GPIO_Init+0x3e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a33      	ldr	r2, [pc, #204]	; (800321c <HAL_GPIO_Init+0xf0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00b      	beq.n	800316a <HAL_GPIO_Init+0x3e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a32      	ldr	r2, [pc, #200]	; (8003220 <HAL_GPIO_Init+0xf4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <HAL_GPIO_Init+0x3e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a31      	ldr	r2, [pc, #196]	; (8003224 <HAL_GPIO_Init+0xf8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x3e>
 8003162:	21b2      	movs	r1, #178	; 0xb2
 8003164:	4830      	ldr	r0, [pc, #192]	; (8003228 <HAL_GPIO_Init+0xfc>)
 8003166:	f7fd fb00 	bl	800076a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_GPIO_Init+0x54>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	041b      	lsls	r3, r3, #16
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x5c>
 8003180:	21b3      	movs	r1, #179	; 0xb3
 8003182:	4829      	ldr	r0, [pc, #164]	; (8003228 <HAL_GPIO_Init+0xfc>)
 8003184:	f7fd faf1 	bl	800076a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 81ee 	beq.w	800356e <HAL_GPIO_Init+0x442>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	f000 81e9 	beq.w	800356e <HAL_GPIO_Init+0x442>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b11      	cmp	r3, #17
 80031a2:	f000 81e4 	beq.w	800356e <HAL_GPIO_Init+0x442>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	f000 81df 	beq.w	800356e <HAL_GPIO_Init+0x442>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b12      	cmp	r3, #18
 80031b6:	f000 81da 	beq.w	800356e <HAL_GPIO_Init+0x442>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80031c2:	f000 81d4 	beq.w	800356e <HAL_GPIO_Init+0x442>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80031ce:	f000 81ce 	beq.w	800356e <HAL_GPIO_Init+0x442>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80031da:	f000 81c8 	beq.w	800356e <HAL_GPIO_Init+0x442>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80031e6:	f000 81c2 	beq.w	800356e <HAL_GPIO_Init+0x442>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80031f2:	f000 81bc 	beq.w	800356e <HAL_GPIO_Init+0x442>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80031fe:	f000 81b6 	beq.w	800356e <HAL_GPIO_Init+0x442>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b03      	cmp	r3, #3
 8003208:	f000 81b1 	beq.w	800356e <HAL_GPIO_Init+0x442>
 800320c:	21b4      	movs	r1, #180	; 0xb4
 800320e:	4806      	ldr	r0, [pc, #24]	; (8003228 <HAL_GPIO_Init+0xfc>)
 8003210:	f7fd faab 	bl	800076a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003214:	e1ab      	b.n	800356e <HAL_GPIO_Init+0x442>
 8003216:	bf00      	nop
 8003218:	48000400 	.word	0x48000400
 800321c:	48000800 	.word	0x48000800
 8003220:	48000c00 	.word	0x48000c00
 8003224:	48001400 	.word	0x48001400
 8003228:	08006004 	.word	0x08006004
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 8192 	beq.w	8003568 <HAL_GPIO_Init+0x43c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d005      	beq.n	800325c <HAL_GPIO_Init+0x130>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d140      	bne.n	80032de <HAL_GPIO_Init+0x1b2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <HAL_GPIO_Init+0x150>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d007      	beq.n	800327c <HAL_GPIO_Init+0x150>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x150>
 8003274:	21c3      	movs	r1, #195	; 0xc3
 8003276:	4883      	ldr	r0, [pc, #524]	; (8003484 <HAL_GPIO_Init+0x358>)
 8003278:	f7fd fa77 	bl	800076a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032b2:	2201      	movs	r2, #1
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 0201 	and.w	r2, r3, #1
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d027      	beq.n	800333a <HAL_GPIO_Init+0x20e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_GPIO_Init+0x1de>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d007      	beq.n	800330a <HAL_GPIO_Init+0x1de>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x1de>
 8003302:	21d4      	movs	r1, #212	; 0xd4
 8003304:	485f      	ldr	r0, [pc, #380]	; (8003484 <HAL_GPIO_Init+0x358>)
 8003306:	f7fd fa30 	bl	800076a <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	2203      	movs	r2, #3
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d147      	bne.n	80033d6 <HAL_GPIO_Init+0x2aa>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800334c:	d013      	beq.n	8003376 <HAL_GPIO_Init+0x24a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4d      	ldr	r2, [pc, #308]	; (8003488 <HAL_GPIO_Init+0x35c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00f      	beq.n	8003376 <HAL_GPIO_Init+0x24a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4c      	ldr	r2, [pc, #304]	; (800348c <HAL_GPIO_Init+0x360>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00b      	beq.n	8003376 <HAL_GPIO_Init+0x24a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4b      	ldr	r2, [pc, #300]	; (8003490 <HAL_GPIO_Init+0x364>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d007      	beq.n	8003376 <HAL_GPIO_Init+0x24a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4a      	ldr	r2, [pc, #296]	; (8003494 <HAL_GPIO_Init+0x368>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x24a>
 800336e:	21e2      	movs	r1, #226	; 0xe2
 8003370:	4844      	ldr	r0, [pc, #272]	; (8003484 <HAL_GPIO_Init+0x358>)
 8003372:	f7fd f9fa 	bl	800076a <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b0d      	cmp	r3, #13
 800337c:	d907      	bls.n	800338e <HAL_GPIO_Init+0x262>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b0f      	cmp	r3, #15
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x262>
 8003386:	21e3      	movs	r1, #227	; 0xe3
 8003388:	483e      	ldr	r0, [pc, #248]	; (8003484 <HAL_GPIO_Init+0x358>)
 800338a:	f7fd f9ee 	bl	800076a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	08da      	lsrs	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3208      	adds	r2, #8
 8003396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800339a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	220f      	movs	r2, #15
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	08da      	lsrs	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3208      	adds	r2, #8
 80033d0:	6939      	ldr	r1, [r7, #16]
 80033d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	2203      	movs	r2, #3
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0203 	and.w	r2, r3, #3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80a8 	beq.w	8003568 <HAL_GPIO_Init+0x43c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003418:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <HAL_GPIO_Init+0x36c>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_GPIO_Init+0x36c>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6193      	str	r3, [r2, #24]
 8003424:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <HAL_GPIO_Init+0x36c>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003430:	4a1a      	ldr	r2, [pc, #104]	; (800349c <HAL_GPIO_Init+0x370>)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800345a:	d021      	beq.n	80034a0 <HAL_GPIO_Init+0x374>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <HAL_GPIO_Init+0x35c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00d      	beq.n	8003480 <HAL_GPIO_Init+0x354>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a09      	ldr	r2, [pc, #36]	; (800348c <HAL_GPIO_Init+0x360>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <HAL_GPIO_Init+0x350>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a08      	ldr	r2, [pc, #32]	; (8003490 <HAL_GPIO_Init+0x364>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_GPIO_Init+0x34c>
 8003474:	2303      	movs	r3, #3
 8003476:	e014      	b.n	80034a2 <HAL_GPIO_Init+0x376>
 8003478:	2305      	movs	r3, #5
 800347a:	e012      	b.n	80034a2 <HAL_GPIO_Init+0x376>
 800347c:	2302      	movs	r3, #2
 800347e:	e010      	b.n	80034a2 <HAL_GPIO_Init+0x376>
 8003480:	2301      	movs	r3, #1
 8003482:	e00e      	b.n	80034a2 <HAL_GPIO_Init+0x376>
 8003484:	08006004 	.word	0x08006004
 8003488:	48000400 	.word	0x48000400
 800348c:	48000800 	.word	0x48000800
 8003490:	48000c00 	.word	0x48000c00
 8003494:	48001400 	.word	0x48001400
 8003498:	40021000 	.word	0x40021000
 800349c:	40010000 	.word	0x40010000
 80034a0:	2300      	movs	r3, #0
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	f002 0203 	and.w	r2, r2, #3
 80034a8:	0092      	lsls	r2, r2, #2
 80034aa:	4093      	lsls	r3, r2
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034b2:	4935      	ldr	r1, [pc, #212]	; (8003588 <HAL_GPIO_Init+0x45c>)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	3302      	adds	r3, #2
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034c0:	4b32      	ldr	r3, [pc, #200]	; (800358c <HAL_GPIO_Init+0x460>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x3b8>
        {
          temp |= iocurrent;
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034e4:	4a29      	ldr	r2, [pc, #164]	; (800358c <HAL_GPIO_Init+0x460>)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034ea:	4b28      	ldr	r3, [pc, #160]	; (800358c <HAL_GPIO_Init+0x460>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x3e2>
        {
          temp |= iocurrent;
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800350e:	4a1f      	ldr	r2, [pc, #124]	; (800358c <HAL_GPIO_Init+0x460>)
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_GPIO_Init+0x460>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	43db      	mvns	r3, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x40c>
        {
          temp |= iocurrent;
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <HAL_GPIO_Init+0x460>)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800353e:	4b13      	ldr	r3, [pc, #76]	; (800358c <HAL_GPIO_Init+0x460>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x436>
        {
          temp |= iocurrent;
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003562:	4a0a      	ldr	r2, [pc, #40]	; (800358c <HAL_GPIO_Init+0x460>)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3301      	adds	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	f47f ae57 	bne.w	800322c <HAL_GPIO_Init+0x100>
  }
}
 800357e:	bf00      	nop
 8003580:	bf00      	nop
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40010000 	.word	0x40010000
 800358c:	40010400 	.word	0x40010400

08003590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
 800359c:	4613      	mov	r3, r2
 800359e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <HAL_GPIO_WritePin+0x20>
 80035a6:	887b      	ldrh	r3, [r7, #2]
 80035a8:	0c1b      	lsrs	r3, r3, #16
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <HAL_GPIO_WritePin+0x2a>
 80035b0:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80035b4:	480d      	ldr	r0, [pc, #52]	; (80035ec <HAL_GPIO_WritePin+0x5c>)
 80035b6:	f7fd f8d8 	bl	800076a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80035ba:	787b      	ldrb	r3, [r7, #1]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <HAL_GPIO_WritePin+0x40>
 80035c0:	787b      	ldrb	r3, [r7, #1]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d004      	beq.n	80035d0 <HAL_GPIO_WritePin+0x40>
 80035c6:	f240 11a5 	movw	r1, #421	; 0x1a5
 80035ca:	4808      	ldr	r0, [pc, #32]	; (80035ec <HAL_GPIO_WritePin+0x5c>)
 80035cc:	f7fd f8cd 	bl	800076a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80035d0:	787b      	ldrb	r3, [r7, #1]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	08006004 	.word	0x08006004

080035f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d004      	beq.n	800360c <HAL_GPIO_TogglePin+0x1c>
 8003602:	887b      	ldrh	r3, [r7, #2]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	041b      	lsls	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	d004      	beq.n	8003616 <HAL_GPIO_TogglePin+0x26>
 800360c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8003610:	480a      	ldr	r0, [pc, #40]	; (800363c <HAL_GPIO_TogglePin+0x4c>)
 8003612:	f7fd f8aa 	bl	800076a <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800361c:	887a      	ldrh	r2, [r7, #2]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4013      	ands	r3, r2
 8003622:	041a      	lsls	r2, r3, #16
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	43d9      	mvns	r1, r3
 8003628:	887b      	ldrh	r3, [r7, #2]
 800362a:	400b      	ands	r3, r1
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	619a      	str	r2, [r3, #24]
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	08006004 	.word	0x08006004

08003640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003646:	af00      	add	r7, sp, #0
 8003648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003650:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003656:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f001 b99a 	b.w	800499a <HAL_RCC_OscConfig+0x135a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d02c      	beq.n	80036d0 <HAL_RCC_OscConfig+0x90>
 8003676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d122      	bne.n	80036d0 <HAL_RCC_OscConfig+0x90>
 800368a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d118      	bne.n	80036d0 <HAL_RCC_OscConfig+0x90>
 800369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10e      	bne.n	80036d0 <HAL_RCC_OscConfig+0x90>
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d104      	bne.n	80036d0 <HAL_RCC_OscConfig+0x90>
 80036c6:	f240 114b 	movw	r1, #331	; 0x14b
 80036ca:	48ba      	ldr	r0, [pc, #744]	; (80039b4 <HAL_RCC_OscConfig+0x374>)
 80036cc:	f7fd f84d 	bl	800076a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 819d 	beq.w	8003a20 <HAL_RCC_OscConfig+0x3e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d016      	beq.n	8003724 <HAL_RCC_OscConfig+0xe4>
 80036f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003706:	d00d      	beq.n	8003724 <HAL_RCC_OscConfig+0xe4>
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003718:	d004      	beq.n	8003724 <HAL_RCC_OscConfig+0xe4>
 800371a:	f240 1151 	movw	r1, #337	; 0x151
 800371e:	48a5      	ldr	r0, [pc, #660]	; (80039b4 <HAL_RCC_OscConfig+0x374>)
 8003720:	f7fd f823 	bl	800076a <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003724:	4ba4      	ldr	r3, [pc, #656]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b04      	cmp	r3, #4
 800372e:	d00c      	beq.n	800374a <HAL_RCC_OscConfig+0x10a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003730:	4ba1      	ldr	r3, [pc, #644]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b08      	cmp	r3, #8
 800373a:	d15c      	bne.n	80037f6 <HAL_RCC_OscConfig+0x1b6>
 800373c:	4b9e      	ldr	r3, [pc, #632]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d155      	bne.n	80037f6 <HAL_RCC_OscConfig+0x1b6>
 800374a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800374e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800375e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b01      	cmp	r3, #1
 8003774:	d102      	bne.n	800377c <HAL_RCC_OscConfig+0x13c>
 8003776:	4b90      	ldr	r3, [pc, #576]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	e015      	b.n	80037a8 <HAL_RCC_OscConfig+0x168>
 800377c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003780:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003794:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003798:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80037a4:	4b84      	ldr	r3, [pc, #528]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037ac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80037b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80037b4:	fa92 f2a2 	rbit	r2, r2
 80037b8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80037bc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80037c0:	fab2 f282 	clz	r2, r2
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	f042 0220 	orr.w	r2, r2, #32
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	f002 021f 	and.w	r2, r2, #31
 80037d0:	2101      	movs	r1, #1
 80037d2:	fa01 f202 	lsl.w	r2, r1, r2
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8120 	beq.w	8003a1e <HAL_RCC_OscConfig+0x3de>
 80037de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f040 8117 	bne.w	8003a1e <HAL_RCC_OscConfig+0x3de>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f001 b8d2 	b.w	800499a <HAL_RCC_OscConfig+0x135a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x1d6>
 8003808:	4b6b      	ldr	r3, [pc, #428]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a6a      	ldr	r2, [pc, #424]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 800380e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	e036      	b.n	8003884 <HAL_RCC_OscConfig+0x244>
 8003816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x200>
 8003826:	4b64      	ldr	r3, [pc, #400]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a63      	ldr	r2, [pc, #396]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 800382c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b61      	ldr	r3, [pc, #388]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a60      	ldr	r2, [pc, #384]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 8003838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e021      	b.n	8003884 <HAL_RCC_OscConfig+0x244>
 8003840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0x22c>
 8003852:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a58      	ldr	r2, [pc, #352]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 8003858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b56      	ldr	r3, [pc, #344]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a55      	ldr	r2, [pc, #340]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e00b      	b.n	8003884 <HAL_RCC_OscConfig+0x244>
 800386c:	4b52      	ldr	r3, [pc, #328]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a51      	ldr	r2, [pc, #324]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 8003872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b4f      	ldr	r3, [pc, #316]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a4e      	ldr	r2, [pc, #312]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 800387e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003882:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003884:	4b4c      	ldr	r3, [pc, #304]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	f023 020f 	bic.w	r2, r3, #15
 800388c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003890:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4947      	ldr	r1, [pc, #284]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 800389a:	4313      	orrs	r3, r2
 800389c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800389e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d059      	beq.n	8003962 <HAL_RCC_OscConfig+0x322>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fd f933 	bl	8000b18 <HAL_GetTick>
 80038b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fd f92e 	bl	8000b18 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b64      	cmp	r3, #100	; 0x64
 80038c6:	d902      	bls.n	80038ce <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	f001 b866 	b.w	800499a <HAL_RCC_OscConfig+0x135a>
 80038ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038d2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80038e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d102      	bne.n	8003900 <HAL_RCC_OscConfig+0x2c0>
 80038fa:	4b2f      	ldr	r3, [pc, #188]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	e015      	b.n	800392c <HAL_RCC_OscConfig+0x2ec>
 8003900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003904:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003918:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800391c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003928:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003930:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003934:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003938:	fa92 f2a2 	rbit	r2, r2
 800393c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003940:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003944:	fab2 f282 	clz	r2, r2
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	f042 0220 	orr.w	r2, r2, #32
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	f002 021f 	and.w	r2, r2, #31
 8003954:	2101      	movs	r1, #1
 8003956:	fa01 f202 	lsl.w	r2, r1, r2
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0ab      	beq.n	80038b8 <HAL_RCC_OscConfig+0x278>
 8003960:	e05e      	b.n	8003a20 <HAL_RCC_OscConfig+0x3e0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003962:	f7fd f8d9 	bl	8000b18 <HAL_GetTick>
 8003966:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396a:	e00a      	b.n	8003982 <HAL_RCC_OscConfig+0x342>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800396c:	f7fd f8d4 	bl	8000b18 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b64      	cmp	r3, #100	; 0x64
 800397a:	d902      	bls.n	8003982 <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	f001 b80c 	b.w	800499a <HAL_RCC_OscConfig+0x135a>
 8003982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003986:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003996:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d106      	bne.n	80039bc <HAL_RCC_OscConfig+0x37c>
 80039ae:	4b02      	ldr	r3, [pc, #8]	; (80039b8 <HAL_RCC_OscConfig+0x378>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e019      	b.n	80039e8 <HAL_RCC_OscConfig+0x3a8>
 80039b4:	08006040 	.word	0x08006040
 80039b8:	40021000 	.word	0x40021000
 80039bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80039c8:	fa93 f3a3 	rbit	r3, r3
 80039cc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80039d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039d4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80039d8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80039e4:	4bc0      	ldr	r3, [pc, #768]	; (8003ce8 <HAL_RCC_OscConfig+0x6a8>)
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039ec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80039f0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80039f4:	fa92 f2a2 	rbit	r2, r2
 80039f8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80039fc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003a00:	fab2 f282 	clz	r2, r2
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	f042 0220 	orr.w	r2, r2, #32
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	f002 021f 	and.w	r2, r2, #31
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f202 	lsl.w	r2, r1, r2
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1a7      	bne.n	800396c <HAL_RCC_OscConfig+0x32c>
 8003a1c:	e000      	b.n	8003a20 <HAL_RCC_OscConfig+0x3e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 81a2 	beq.w	8003d7a <HAL_RCC_OscConfig+0x73a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00c      	beq.n	8003a60 <HAL_RCC_OscConfig+0x420>
 8003a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d004      	beq.n	8003a60 <HAL_RCC_OscConfig+0x420>
 8003a56:	f240 1189 	movw	r1, #393	; 0x189
 8003a5a:	48a4      	ldr	r0, [pc, #656]	; (8003cec <HAL_RCC_OscConfig+0x6ac>)
 8003a5c:	f7fc fe85 	bl	800076a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	2b1f      	cmp	r3, #31
 8003a6e:	d904      	bls.n	8003a7a <HAL_RCC_OscConfig+0x43a>
 8003a70:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8003a74:	489d      	ldr	r0, [pc, #628]	; (8003cec <HAL_RCC_OscConfig+0x6ac>)
 8003a76:	f7fc fe78 	bl	800076a <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a7a:	4b9b      	ldr	r3, [pc, #620]	; (8003ce8 <HAL_RCC_OscConfig+0x6a8>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_RCC_OscConfig+0x45e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a86:	4b98      	ldr	r3, [pc, #608]	; (8003ce8 <HAL_RCC_OscConfig+0x6a8>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d172      	bne.n	8003b78 <HAL_RCC_OscConfig+0x538>
 8003a92:	4b95      	ldr	r3, [pc, #596]	; (8003ce8 <HAL_RCC_OscConfig+0x6a8>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d16c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x538>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003ab0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d102      	bne.n	8003ace <HAL_RCC_OscConfig+0x48e>
 8003ac8:	4b87      	ldr	r3, [pc, #540]	; (8003ce8 <HAL_RCC_OscConfig+0x6a8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	e013      	b.n	8003af6 <HAL_RCC_OscConfig+0x4b6>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003ad8:	fa93 f3a3 	rbit	r3, r3
 8003adc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003ae6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003af2:	4b7d      	ldr	r3, [pc, #500]	; (8003ce8 <HAL_RCC_OscConfig+0x6a8>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	2202      	movs	r2, #2
 8003af8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003afc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003b00:	fa92 f2a2 	rbit	r2, r2
 8003b04:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003b08:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003b0c:	fab2 f282 	clz	r2, r2
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f042 0220 	orr.w	r2, r2, #32
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f002 021f 	and.w	r2, r2, #31
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCC_OscConfig+0x4fe>
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d002      	beq.n	8003b3e <HAL_RCC_OscConfig+0x4fe>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f000 bf2e 	b.w	800499a <HAL_RCC_OscConfig+0x135a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3e:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <HAL_RCC_OscConfig+0x6a8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	21f8      	movs	r1, #248	; 0xf8
 8003b54:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003b5c:	fa91 f1a1 	rbit	r1, r1
 8003b60:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003b64:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003b68:	fab1 f181 	clz	r1, r1
 8003b6c:	b2c9      	uxtb	r1, r1
 8003b6e:	408b      	lsls	r3, r1
 8003b70:	495d      	ldr	r1, [pc, #372]	; (8003ce8 <HAL_RCC_OscConfig+0x6a8>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	e100      	b.n	8003d7a <HAL_RCC_OscConfig+0x73a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8088 	beq.w	8003c9a <HAL_RCC_OscConfig+0x65a>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003b9c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003baa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb6:	f7fc ffaf 	bl	8000b18 <HAL_GetTick>
 8003bba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc0:	f7fc ffaa 	bl	8000b18 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d902      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	f000 bee2 	b.w	800499a <HAL_RCC_OscConfig+0x135a>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003be8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d102      	bne.n	8003c06 <HAL_RCC_OscConfig+0x5c6>
 8003c00:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <HAL_RCC_OscConfig+0x6a8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	e013      	b.n	8003c2e <HAL_RCC_OscConfig+0x5ee>
 8003c06:	2302      	movs	r3, #2
 8003c08:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003c10:	fa93 f3a3 	rbit	r3, r3
 8003c14:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003c18:	2302      	movs	r3, #2
 8003c1a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003c1e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ce8 <HAL_RCC_OscConfig+0x6a8>)
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003c34:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003c38:	fa92 f2a2 	rbit	r2, r2
 8003c3c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003c40:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c44:	fab2 f282 	clz	r2, r2
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	f042 0220 	orr.w	r2, r2, #32
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	f002 021f 	and.w	r2, r2, #31
 8003c54:	2101      	movs	r1, #1
 8003c56:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0af      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x580>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c60:	4b21      	ldr	r3, [pc, #132]	; (8003ce8 <HAL_RCC_OscConfig+0x6a8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	21f8      	movs	r1, #248	; 0xf8
 8003c76:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c7e:	fa91 f1a1 	rbit	r1, r1
 8003c82:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003c86:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003c8a:	fab1 f181 	clz	r1, r1
 8003c8e:	b2c9      	uxtb	r1, r1
 8003c90:	408b      	lsls	r3, r1
 8003c92:	4915      	ldr	r1, [pc, #84]	; (8003ce8 <HAL_RCC_OscConfig+0x6a8>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	600b      	str	r3, [r1, #0]
 8003c98:	e06f      	b.n	8003d7a <HAL_RCC_OscConfig+0x73a>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ca4:	fa93 f3a3 	rbit	r3, r3
 8003ca8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003cac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb0:	fab3 f383 	clz	r3, r3
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc6:	f7fc ff27 	bl	8000b18 <HAL_GetTick>
 8003cca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	e00f      	b.n	8003cf0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fc ff22 	bl	8000b18 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d907      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	f000 be5a 	b.w	800499a <HAL_RCC_OscConfig+0x135a>
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	08006040 	.word	0x08006040
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d102      	bne.n	8003d20 <HAL_RCC_OscConfig+0x6e0>
 8003d1a:	4b81      	ldr	r3, [pc, #516]	; (8003f20 <HAL_RCC_OscConfig+0x8e0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	e013      	b.n	8003d48 <HAL_RCC_OscConfig+0x708>
 8003d20:	2302      	movs	r3, #2
 8003d22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d32:	2302      	movs	r3, #2
 8003d34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003d38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003d44:	4b76      	ldr	r3, [pc, #472]	; (8003f20 <HAL_RCC_OscConfig+0x8e0>)
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	2202      	movs	r2, #2
 8003d4a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003d4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003d52:	fa92 f2a2 	rbit	r2, r2
 8003d56:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003d5a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003d5e:	fab2 f282 	clz	r2, r2
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	f042 0220 	orr.w	r2, r2, #32
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	f002 021f 	and.w	r2, r2, #31
 8003d6e:	2101      	movs	r1, #1
 8003d70:	fa01 f202 	lsl.w	r2, r1, r2
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1aa      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x690>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 812b 	beq.w	8003fe6 <HAL_RCC_OscConfig+0x9a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00c      	beq.n	8003dba <HAL_RCC_OscConfig+0x77a>
 8003da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d004      	beq.n	8003dba <HAL_RCC_OscConfig+0x77a>
 8003db0:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8003db4:	485b      	ldr	r0, [pc, #364]	; (8003f24 <HAL_RCC_OscConfig+0x8e4>)
 8003db6:	f7fc fcd8 	bl	800076a <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d079      	beq.n	8003ebe <HAL_RCC_OscConfig+0x87e>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003dd4:	fa93 f3a3 	rbit	r3, r3
 8003dd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de0:	fab3 f383 	clz	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b4f      	ldr	r3, [pc, #316]	; (8003f28 <HAL_RCC_OscConfig+0x8e8>)
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	461a      	mov	r2, r3
 8003df0:	2301      	movs	r3, #1
 8003df2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df4:	f7fc fe90 	bl	8000b18 <HAL_GetTick>
 8003df8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_OscConfig+0x7d4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fc fe8b 	bl	8000b18 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d902      	bls.n	8003e14 <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	f000 bdc3 	b.w	800499a <HAL_RCC_OscConfig+0x135a>
 8003e14:	2302      	movs	r3, #2
 8003e16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e2e:	2202      	movs	r2, #2
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e36:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	fa93 f2a3 	rbit	r2, r3
 8003e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e52:	2202      	movs	r2, #2
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	fa93 f2a3 	rbit	r2, r3
 8003e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6e:	4b2c      	ldr	r3, [pc, #176]	; (8003f20 <HAL_RCC_OscConfig+0x8e0>)
 8003e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e76:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e7a:	2102      	movs	r1, #2
 8003e7c:	6019      	str	r1, [r3, #0]
 8003e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	fa93 f1a3 	rbit	r1, r3
 8003e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e94:	6019      	str	r1, [r3, #0]
  return result;
 8003e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0a0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x7be>
 8003ebc:	e093      	b.n	8003fe6 <HAL_RCC_OscConfig+0x9a6>
 8003ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ece:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	fa93 f2a3 	rbit	r2, r3
 8003ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003edc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ee0:	601a      	str	r2, [r3, #0]
  return result;
 8003ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003eea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <HAL_RCC_OscConfig+0x8e8>)
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	461a      	mov	r2, r3
 8003efc:	2300      	movs	r3, #0
 8003efe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f00:	f7fc fe0a 	bl	8000b18 <HAL_GetTick>
 8003f04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f08:	e010      	b.n	8003f2c <HAL_RCC_OscConfig+0x8ec>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fc fe05 	bl	8000b18 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d908      	bls.n	8003f2c <HAL_RCC_OscConfig+0x8ec>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	f000 bd3d 	b.w	800499a <HAL_RCC_OscConfig+0x135a>
 8003f20:	40021000 	.word	0x40021000
 8003f24:	08006040 	.word	0x08006040
 8003f28:	10908120 	.word	0x10908120
 8003f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f30:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f34:	2202      	movs	r2, #2
 8003f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	fa93 f2a3 	rbit	r2, r3
 8003f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f54:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f58:	2202      	movs	r2, #2
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f60:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	fa93 f2a3 	rbit	r2, r3
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	fa93 f2a3 	rbit	r2, r3
 8003f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f92:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f96:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f98:	4bb8      	ldr	r3, [pc, #736]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 8003f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	6019      	str	r1, [r3, #0]
 8003fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fac:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	fa93 f1a3 	rbit	r1, r3
 8003fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003fbe:	6019      	str	r1, [r3, #0]
  return result;
 8003fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	2101      	movs	r1, #1
 8003fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d191      	bne.n	8003f0a <HAL_RCC_OscConfig+0x8ca>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 81c0 	beq.w	800437c <HAL_RCC_OscConfig+0xd3c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d014      	beq.n	800403c <HAL_RCC_OscConfig+0x9fc>
 8004012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004016:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d00c      	beq.n	800403c <HAL_RCC_OscConfig+0x9fc>
 8004022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004026:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b05      	cmp	r3, #5
 8004030:	d004      	beq.n	800403c <HAL_RCC_OscConfig+0x9fc>
 8004032:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8004036:	4892      	ldr	r0, [pc, #584]	; (8004280 <HAL_RCC_OscConfig+0xc40>)
 8004038:	f7fc fb97 	bl	800076a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403c:	4b8f      	ldr	r3, [pc, #572]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d116      	bne.n	8004076 <HAL_RCC_OscConfig+0xa36>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004048:	4b8c      	ldr	r3, [pc, #560]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	4a8b      	ldr	r2, [pc, #556]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 800404e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004052:	61d3      	str	r3, [r2, #28]
 8004054:	4b89      	ldr	r3, [pc, #548]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800405c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004060:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800406e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004076:	4b83      	ldr	r3, [pc, #524]	; (8004284 <HAL_RCC_OscConfig+0xc44>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d11b      	bne.n	80040ba <HAL_RCC_OscConfig+0xa7a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004082:	4b80      	ldr	r3, [pc, #512]	; (8004284 <HAL_RCC_OscConfig+0xc44>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a7f      	ldr	r2, [pc, #508]	; (8004284 <HAL_RCC_OscConfig+0xc44>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408e:	f7fc fd43 	bl	8000b18 <HAL_GetTick>
 8004092:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0xa6e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004098:	f7fc fd3e 	bl	8000b18 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b64      	cmp	r3, #100	; 0x64
 80040a6:	d902      	bls.n	80040ae <HAL_RCC_OscConfig+0xa6e>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	f000 bc76 	b.w	800499a <HAL_RCC_OscConfig+0x135a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b75      	ldr	r3, [pc, #468]	; (8004284 <HAL_RCC_OscConfig+0xc44>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0ee      	beq.n	8004098 <HAL_RCC_OscConfig+0xa58>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d106      	bne.n	80040d8 <HAL_RCC_OscConfig+0xa98>
 80040ca:	4b6c      	ldr	r3, [pc, #432]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4a6b      	ldr	r2, [pc, #428]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6213      	str	r3, [r2, #32]
 80040d6:	e035      	b.n	8004144 <HAL_RCC_OscConfig+0xb04>
 80040d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10c      	bne.n	8004102 <HAL_RCC_OscConfig+0xac2>
 80040e8:	4b64      	ldr	r3, [pc, #400]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4a63      	ldr	r2, [pc, #396]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	6213      	str	r3, [r2, #32]
 80040f4:	4b61      	ldr	r3, [pc, #388]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4a60      	ldr	r2, [pc, #384]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 80040fa:	f023 0304 	bic.w	r3, r3, #4
 80040fe:	6213      	str	r3, [r2, #32]
 8004100:	e020      	b.n	8004144 <HAL_RCC_OscConfig+0xb04>
 8004102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b05      	cmp	r3, #5
 8004110:	d10c      	bne.n	800412c <HAL_RCC_OscConfig+0xaec>
 8004112:	4b5a      	ldr	r3, [pc, #360]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	4a59      	ldr	r2, [pc, #356]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 8004118:	f043 0304 	orr.w	r3, r3, #4
 800411c:	6213      	str	r3, [r2, #32]
 800411e:	4b57      	ldr	r3, [pc, #348]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	4a56      	ldr	r2, [pc, #344]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	6213      	str	r3, [r2, #32]
 800412a:	e00b      	b.n	8004144 <HAL_RCC_OscConfig+0xb04>
 800412c:	4b53      	ldr	r3, [pc, #332]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4a52      	ldr	r2, [pc, #328]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	6213      	str	r3, [r2, #32]
 8004138:	4b50      	ldr	r3, [pc, #320]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	4a4f      	ldr	r2, [pc, #316]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 800413e:	f023 0304 	bic.w	r3, r3, #4
 8004142:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004148:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8082 	beq.w	800425a <HAL_RCC_OscConfig+0xc1a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004156:	f7fc fcdf 	bl	8000b18 <HAL_GetTick>
 800415a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415e:	e00c      	b.n	800417a <HAL_RCC_OscConfig+0xb3a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fc fcda 	bl	8000b18 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d902      	bls.n	800417a <HAL_RCC_OscConfig+0xb3a>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	f000 bc10 	b.w	800499a <HAL_RCC_OscConfig+0x135a>
 800417a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004182:	2202      	movs	r2, #2
 8004184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	fa93 f2a3 	rbit	r2, r3
 8004194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004198:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80041a6:	2202      	movs	r2, #2
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ae:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	fa93 f2a3 	rbit	r2, r3
 80041b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80041c0:	601a      	str	r2, [r3, #0]
  return result;
 80041c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80041ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041cc:	fab3 f383 	clz	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f043 0302 	orr.w	r3, r3, #2
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d102      	bne.n	80041e6 <HAL_RCC_OscConfig+0xba6>
 80041e0:	4b26      	ldr	r3, [pc, #152]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	e013      	b.n	800420e <HAL_RCC_OscConfig+0xbce>
 80041e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ea:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80041ee:	2202      	movs	r2, #2
 80041f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	fa93 f2a3 	rbit	r2, r3
 8004200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004204:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	4b1c      	ldr	r3, [pc, #112]	; (800427c <HAL_RCC_OscConfig+0xc3c>)
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004212:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004216:	2102      	movs	r1, #2
 8004218:	6011      	str	r1, [r2, #0]
 800421a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800421e:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	fa92 f1a2 	rbit	r1, r2
 8004228:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800422c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004230:	6011      	str	r1, [r2, #0]
  return result;
 8004232:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004236:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	fab2 f282 	clz	r2, r2
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	f002 021f 	and.w	r2, r2, #31
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f202 	lsl.w	r2, r1, r2
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d083      	beq.n	8004160 <HAL_RCC_OscConfig+0xb20>
 8004258:	e086      	b.n	8004368 <HAL_RCC_OscConfig+0xd28>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fc fc5d 	bl	8000b18 <HAL_GetTick>
 800425e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004262:	e011      	b.n	8004288 <HAL_RCC_OscConfig+0xc48>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fc fc58 	bl	8000b18 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f241 3288 	movw	r2, #5000	; 0x1388
 8004274:	4293      	cmp	r3, r2
 8004276:	d907      	bls.n	8004288 <HAL_RCC_OscConfig+0xc48>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e38e      	b.n	800499a <HAL_RCC_OscConfig+0x135a>
 800427c:	40021000 	.word	0x40021000
 8004280:	08006040 	.word	0x08006040
 8004284:	40007000 	.word	0x40007000
 8004288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004290:	2202      	movs	r2, #2
 8004292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004298:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	fa93 f2a3 	rbit	r2, r3
 80042a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80042b4:	2202      	movs	r2, #2
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042bc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	fa93 f2a3 	rbit	r2, r3
 80042c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80042ce:	601a      	str	r2, [r3, #0]
  return result;
 80042d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80042d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d102      	bne.n	80042f4 <HAL_RCC_OscConfig+0xcb4>
 80042ee:	4bbb      	ldr	r3, [pc, #748]	; (80045dc <HAL_RCC_OscConfig+0xf9c>)
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	e013      	b.n	800431c <HAL_RCC_OscConfig+0xcdc>
 80042f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80042fc:	2202      	movs	r2, #2
 80042fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004304:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	fa93 f2a3 	rbit	r2, r3
 800430e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004312:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	4bb0      	ldr	r3, [pc, #704]	; (80045dc <HAL_RCC_OscConfig+0xf9c>)
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004320:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004324:	2102      	movs	r1, #2
 8004326:	6011      	str	r1, [r2, #0]
 8004328:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800432c:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	fa92 f1a2 	rbit	r1, r2
 8004336:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800433a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800433e:	6011      	str	r1, [r2, #0]
  return result;
 8004340:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004344:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	fab2 f282 	clz	r2, r2
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	f002 021f 	and.w	r2, r2, #31
 800435a:	2101      	movs	r1, #1
 800435c:	fa01 f202 	lsl.w	r2, r1, r2
 8004360:	4013      	ands	r3, r2
 8004362:	2b00      	cmp	r3, #0
 8004364:	f47f af7e 	bne.w	8004264 <HAL_RCC_OscConfig+0xc24>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004368:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800436c:	2b01      	cmp	r3, #1
 800436e:	d105      	bne.n	800437c <HAL_RCC_OscConfig+0xd3c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004370:	4b9a      	ldr	r3, [pc, #616]	; (80045dc <HAL_RCC_OscConfig+0xf9c>)
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	4a99      	ldr	r2, [pc, #612]	; (80045dc <HAL_RCC_OscConfig+0xf9c>)
 8004376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800437c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d014      	beq.n	80043b6 <HAL_RCC_OscConfig+0xd76>
 800438c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004390:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d00c      	beq.n	80043b6 <HAL_RCC_OscConfig+0xd76>
 800439c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d004      	beq.n	80043b6 <HAL_RCC_OscConfig+0xd76>
 80043ac:	f240 213a 	movw	r1, #570	; 0x23a
 80043b0:	488b      	ldr	r0, [pc, #556]	; (80045e0 <HAL_RCC_OscConfig+0xfa0>)
 80043b2:	f7fc f9da 	bl	800076a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 82e8 	beq.w	8004998 <HAL_RCC_OscConfig+0x1358>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043c8:	4b84      	ldr	r3, [pc, #528]	; (80045dc <HAL_RCC_OscConfig+0xf9c>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	f000 82b6 	beq.w	8004942 <HAL_RCC_OscConfig+0x1302>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	f040 8207 	bne.w	80047f6 <HAL_RCC_OscConfig+0x11b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80043e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00d      	beq.n	8004414 <HAL_RCC_OscConfig+0xdd4>
 80043f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d004      	beq.n	8004414 <HAL_RCC_OscConfig+0xdd4>
 800440a:	f240 2143 	movw	r1, #579	; 0x243
 800440e:	4874      	ldr	r0, [pc, #464]	; (80045e0 <HAL_RCC_OscConfig+0xfa0>)
 8004410:	f7fc f9ab 	bl	800076a <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004418:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8083 	beq.w	800452c <HAL_RCC_OscConfig+0xeec>
 8004426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004436:	d079      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 8004438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004448:	d070      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 800444a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800445a:	d067      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 800445c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004460:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446c:	d05e      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 800446e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800447e:	d055      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 8004480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004484:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004490:	d04c      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 8004492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044a2:	d043      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 80044a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044b4:	d03a      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 80044b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044c6:	d031      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 80044c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044d8:	d028      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 80044da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044ea:	d01f      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 80044ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044fc:	d016      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 80044fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800450e:	d00d      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 8004510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004514:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004520:	d004      	beq.n	800452c <HAL_RCC_OscConfig+0xeec>
 8004522:	f44f 7111 	mov.w	r1, #580	; 0x244
 8004526:	482e      	ldr	r0, [pc, #184]	; (80045e0 <HAL_RCC_OscConfig+0xfa0>)
 8004528:	f7fc f91f 	bl	800076a <assert_failed>
 800452c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004530:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004534:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	fa93 f2a3 	rbit	r2, r3
 8004548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004550:	601a      	str	r2, [r3, #0]
  return result;
 8004552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004556:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800455a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004566:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	461a      	mov	r2, r3
 800456e:	2300      	movs	r3, #0
 8004570:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004572:	f7fc fad1 	bl	8000b18 <HAL_GetTick>
 8004576:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800457a:	e009      	b.n	8004590 <HAL_RCC_OscConfig+0xf50>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800457c:	f7fc facc 	bl	8000b18 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0xf50>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e204      	b.n	800499a <HAL_RCC_OscConfig+0x135a>
 8004590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004594:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800459c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	fa93 f2a3 	rbit	r2, r3
 80045ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80045b4:	601a      	str	r2, [r3, #0]
  return result;
 80045b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80045be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c0:	fab3 f383 	clz	r3, r3
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d107      	bne.n	80045e4 <HAL_RCC_OscConfig+0xfa4>
 80045d4:	4b01      	ldr	r3, [pc, #4]	; (80045dc <HAL_RCC_OscConfig+0xf9c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	e02c      	b.n	8004634 <HAL_RCC_OscConfig+0xff4>
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000
 80045e0:	08006040 	.word	0x08006040
 80045e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80045ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	fa93 f2a3 	rbit	r2, r3
 8004600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004604:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	fa93 f2a3 	rbit	r2, r3
 8004626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	4bc9      	ldr	r3, [pc, #804]	; (8004958 <HAL_RCC_OscConfig+0x1318>)
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004638:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800463c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004640:	6011      	str	r1, [r2, #0]
 8004642:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004646:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	fa92 f1a2 	rbit	r1, r2
 8004650:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004654:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004658:	6011      	str	r1, [r2, #0]
  return result;
 800465a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800465e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	fab2 f282 	clz	r2, r2
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	f042 0220 	orr.w	r2, r2, #32
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	f002 021f 	and.w	r2, r2, #31
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f202 	lsl.w	r2, r1, r2
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	f47f af7d 	bne.w	800457c <HAL_RCC_OscConfig+0xf3c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004682:	4bb5      	ldr	r3, [pc, #724]	; (8004958 <HAL_RCC_OscConfig+0x1318>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800468a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	430b      	orrs	r3, r1
 80046a4:	49ac      	ldr	r1, [pc, #688]	; (8004958 <HAL_RCC_OscConfig+0x1318>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	604b      	str	r3, [r1, #4]
 80046aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80046b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046bc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	fa93 f2a3 	rbit	r2, r3
 80046c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80046ce:	601a      	str	r2, [r3, #0]
  return result;
 80046d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80046d8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	461a      	mov	r2, r3
 80046ec:	2301      	movs	r3, #1
 80046ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fc fa12 	bl	8000b18 <HAL_GetTick>
 80046f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046f8:	e009      	b.n	800470e <HAL_RCC_OscConfig+0x10ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fa:	f7fc fa0d 	bl	8000b18 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x10ce>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e145      	b.n	800499a <HAL_RCC_OscConfig+0x135a>
 800470e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004712:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004716:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800471a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004720:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	fa93 f2a3 	rbit	r2, r3
 800472a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004732:	601a      	str	r2, [r3, #0]
  return result;
 8004734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004738:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800473c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b01      	cmp	r3, #1
 8004750:	d102      	bne.n	8004758 <HAL_RCC_OscConfig+0x1118>
 8004752:	4b81      	ldr	r3, [pc, #516]	; (8004958 <HAL_RCC_OscConfig+0x1318>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	e027      	b.n	80047a8 <HAL_RCC_OscConfig+0x1168>
 8004758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	fa93 f2a3 	rbit	r2, r3
 8004774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004778:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004782:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004790:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	fa93 f2a3 	rbit	r2, r3
 800479a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	4b6c      	ldr	r3, [pc, #432]	; (8004958 <HAL_RCC_OscConfig+0x1318>)
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047ac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80047b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047b4:	6011      	str	r1, [r2, #0]
 80047b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047ba:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	fa92 f1a2 	rbit	r1, r2
 80047c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80047cc:	6011      	str	r1, [r2, #0]
  return result;
 80047ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047d2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	fab2 f282 	clz	r2, r2
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	f042 0220 	orr.w	r2, r2, #32
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	f002 021f 	and.w	r2, r2, #31
 80047e8:	2101      	movs	r1, #1
 80047ea:	fa01 f202 	lsl.w	r2, r1, r2
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d082      	beq.n	80046fa <HAL_RCC_OscConfig+0x10ba>
 80047f4:	e0d0      	b.n	8004998 <HAL_RCC_OscConfig+0x1358>
 80047f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80047fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004808:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	fa93 f2a3 	rbit	r2, r3
 8004812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004816:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800481a:	601a      	str	r2, [r3, #0]
  return result;
 800481c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004820:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004824:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004826:	fab3 f383 	clz	r3, r3
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004830:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	461a      	mov	r2, r3
 8004838:	2300      	movs	r3, #0
 800483a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483c:	f7fc f96c 	bl	8000b18 <HAL_GetTick>
 8004840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004844:	e009      	b.n	800485a <HAL_RCC_OscConfig+0x121a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004846:	f7fc f967 	bl	8000b18 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x121a>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e09f      	b.n	800499a <HAL_RCC_OscConfig+0x135a>
 800485a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	fa93 f2a3 	rbit	r2, r3
 8004876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800487e:	601a      	str	r2, [r3, #0]
  return result;
 8004880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004884:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004888:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800488a:	fab3 f383 	clz	r3, r3
 800488e:	b2db      	uxtb	r3, r3
 8004890:	095b      	lsrs	r3, r3, #5
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d102      	bne.n	80048a4 <HAL_RCC_OscConfig+0x1264>
 800489e:	4b2e      	ldr	r3, [pc, #184]	; (8004958 <HAL_RCC_OscConfig+0x1318>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	e027      	b.n	80048f4 <HAL_RCC_OscConfig+0x12b4>
 80048a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80048ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	fa93 f2a3 	rbit	r2, r3
 80048c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80048d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048dc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	fa93 f2a3 	rbit	r2, r3
 80048e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	4b19      	ldr	r3, [pc, #100]	; (8004958 <HAL_RCC_OscConfig+0x1318>)
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048f8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80048fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004900:	6011      	str	r1, [r2, #0]
 8004902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004906:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	fa92 f1a2 	rbit	r1, r2
 8004910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004914:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004918:	6011      	str	r1, [r2, #0]
  return result;
 800491a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800491e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	fab2 f282 	clz	r2, r2
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	f042 0220 	orr.w	r2, r2, #32
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	f002 021f 	and.w	r2, r2, #31
 8004934:	2101      	movs	r1, #1
 8004936:	fa01 f202 	lsl.w	r2, r1, r2
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d182      	bne.n	8004846 <HAL_RCC_OscConfig+0x1206>
 8004940:	e02a      	b.n	8004998 <HAL_RCC_OscConfig+0x1358>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d104      	bne.n	800495c <HAL_RCC_OscConfig+0x131c>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e021      	b.n	800499a <HAL_RCC_OscConfig+0x135a>
 8004956:	bf00      	nop
 8004958:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <HAL_RCC_OscConfig+0x1364>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004964:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004968:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800496c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	429a      	cmp	r2, r3
 800497a:	d10b      	bne.n	8004994 <HAL_RCC_OscConfig+0x1354>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800497c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004980:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004988:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_OscConfig+0x1358>
#endif
        {
          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_RCC_OscConfig+0x135a>
        }
      }
    }
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000

080049a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b09e      	sub	sp, #120	; 0x78
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e205      	b.n	8004dcc <HAL_RCC_ClockConfig+0x424>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d116      	bne.n	80049fa <HAL_RCC_ClockConfig+0x52>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d110      	bne.n	80049fa <HAL_RCC_ClockConfig+0x52>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <HAL_RCC_ClockConfig+0x52>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d104      	bne.n	80049fa <HAL_RCC_ClockConfig+0x52>
 80049f0:	f240 21c3 	movw	r1, #707	; 0x2c3
 80049f4:	489a      	ldr	r0, [pc, #616]	; (8004c60 <HAL_RCC_ClockConfig+0x2b8>)
 80049f6:	f7fb feb8 	bl	800076a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x6e>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d007      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x6e>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d004      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x6e>
 8004a0c:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8004a10:	4893      	ldr	r0, [pc, #588]	; (8004c60 <HAL_RCC_ClockConfig+0x2b8>)
 8004a12:	f7fb feaa 	bl	800076a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a16:	4b93      	ldr	r3, [pc, #588]	; (8004c64 <HAL_RCC_ClockConfig+0x2bc>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d910      	bls.n	8004a46 <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a24:	4b8f      	ldr	r3, [pc, #572]	; (8004c64 <HAL_RCC_ClockConfig+0x2bc>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f023 0207 	bic.w	r2, r3, #7
 8004a2c:	498d      	ldr	r1, [pc, #564]	; (8004c64 <HAL_RCC_ClockConfig+0x2bc>)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a34:	4b8b      	ldr	r3, [pc, #556]	; (8004c64 <HAL_RCC_ClockConfig+0x2bc>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d001      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e1c2      	b.n	8004dcc <HAL_RCC_ClockConfig+0x424>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d031      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d024      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0xfc>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b80      	cmp	r3, #128	; 0x80
 8004a60:	d020      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0xfc>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b90      	cmp	r3, #144	; 0x90
 8004a68:	d01c      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0xfc>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2ba0      	cmp	r3, #160	; 0xa0
 8004a70:	d018      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0xfc>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2bb0      	cmp	r3, #176	; 0xb0
 8004a78:	d014      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0xfc>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a80:	d010      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0xfc>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2bd0      	cmp	r3, #208	; 0xd0
 8004a88:	d00c      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0xfc>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2be0      	cmp	r3, #224	; 0xe0
 8004a90:	d008      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0xfc>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2bf0      	cmp	r3, #240	; 0xf0
 8004a98:	d004      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0xfc>
 8004a9a:	f240 21db 	movw	r1, #731	; 0x2db
 8004a9e:	4870      	ldr	r0, [pc, #448]	; (8004c60 <HAL_RCC_ClockConfig+0x2b8>)
 8004aa0:	f7fb fe63 	bl	800076a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa4:	4b70      	ldr	r3, [pc, #448]	; (8004c68 <HAL_RCC_ClockConfig+0x2c0>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	496d      	ldr	r1, [pc, #436]	; (8004c68 <HAL_RCC_ClockConfig+0x2c0>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 80f5 	beq.w	8004cae <HAL_RCC_ClockConfig+0x306>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x13e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d008      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x13e>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d004      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x13e>
 8004adc:	f240 21e2 	movw	r1, #738	; 0x2e2
 8004ae0:	485f      	ldr	r0, [pc, #380]	; (8004c60 <HAL_RCC_ClockConfig+0x2b8>)
 8004ae2:	f7fb fe42 	bl	800076a <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d13d      	bne.n	8004b6a <HAL_RCC_ClockConfig+0x1c2>
 8004aee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004af2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004af6:	fa93 f3a3 	rbit	r3, r3
 8004afa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	fab3 f383 	clz	r3, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d102      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x170>
 8004b12:	4b55      	ldr	r3, [pc, #340]	; (8004c68 <HAL_RCC_ClockConfig+0x2c0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	e00f      	b.n	8004b38 <HAL_RCC_ClockConfig+0x190>
 8004b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b20:	fa93 f3a3 	rbit	r3, r3
 8004b24:	667b      	str	r3, [r7, #100]	; 0x64
 8004b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b2a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b34:	4b4c      	ldr	r3, [pc, #304]	; (8004c68 <HAL_RCC_ClockConfig+0x2c0>)
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b40:	fa92 f2a2 	rbit	r2, r2
 8004b44:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004b46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b48:	fab2 f282 	clz	r2, r2
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	f042 0220 	orr.w	r2, r2, #32
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	f002 021f 	and.w	r2, r2, #31
 8004b58:	2101      	movs	r1, #1
 8004b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f040 8083 	bne.w	8004c6c <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e130      	b.n	8004dcc <HAL_RCC_ClockConfig+0x424>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d13c      	bne.n	8004bec <HAL_RCC_ClockConfig+0x244>
 8004b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b7a:	fa93 f3a3 	rbit	r3, r3
 8004b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b82:	fab3 f383 	clz	r3, r3
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d102      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x1f4>
 8004b96:	4b34      	ldr	r3, [pc, #208]	; (8004c68 <HAL_RCC_ClockConfig+0x2c0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	e00f      	b.n	8004bbc <HAL_RCC_ClockConfig+0x214>
 8004b9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ba0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba4:	fa93 f3a3 	rbit	r3, r3
 8004ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8004baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bae:	643b      	str	r3, [r7, #64]	; 0x40
 8004bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb2:	fa93 f3a3 	rbit	r3, r3
 8004bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb8:	4b2b      	ldr	r3, [pc, #172]	; (8004c68 <HAL_RCC_ClockConfig+0x2c0>)
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bc0:	63ba      	str	r2, [r7, #56]	; 0x38
 8004bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bc4:	fa92 f2a2 	rbit	r2, r2
 8004bc8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bcc:	fab2 f282 	clz	r2, r2
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	f042 0220 	orr.w	r2, r2, #32
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	f002 021f 	and.w	r2, r2, #31
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f202 	lsl.w	r2, r1, r2
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d141      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0ef      	b.n	8004dcc <HAL_RCC_ClockConfig+0x424>
 8004bec:	2302      	movs	r3, #2
 8004bee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	fa93 f3a3 	rbit	r3, r3
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfa:	fab3 f383 	clz	r3, r3
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d102      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x26c>
 8004c0e:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <HAL_RCC_ClockConfig+0x2c0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	e00d      	b.n	8004c30 <HAL_RCC_ClockConfig+0x288>
 8004c14:	2302      	movs	r3, #2
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	fa93 f3a3 	rbit	r3, r3
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c20:	2302      	movs	r3, #2
 8004c22:	623b      	str	r3, [r7, #32]
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	fa93 f3a3 	rbit	r3, r3
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <HAL_RCC_ClockConfig+0x2c0>)
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2202      	movs	r2, #2
 8004c32:	61ba      	str	r2, [r7, #24]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	fa92 f2a2 	rbit	r2, r2
 8004c3a:	617a      	str	r2, [r7, #20]
  return result;
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	fab2 f282 	clz	r2, r2
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	f042 0220 	orr.w	r2, r2, #32
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	f002 021f 	and.w	r2, r2, #31
 8004c4e:	2101      	movs	r1, #1
 8004c50:	fa01 f202 	lsl.w	r2, r1, r2
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d108      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e0b6      	b.n	8004dcc <HAL_RCC_ClockConfig+0x424>
 8004c5e:	bf00      	nop
 8004c60:	08006040 	.word	0x08006040
 8004c64:	40022000 	.word	0x40022000
 8004c68:	40021000 	.word	0x40021000
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6c:	4b59      	ldr	r3, [pc, #356]	; (8004dd4 <HAL_RCC_ClockConfig+0x42c>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f023 0203 	bic.w	r2, r3, #3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4956      	ldr	r1, [pc, #344]	; (8004dd4 <HAL_RCC_ClockConfig+0x42c>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c7e:	f7fb ff4b 	bl	8000b18 <HAL_GetTick>
 8004c82:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c84:	e00a      	b.n	8004c9c <HAL_RCC_ClockConfig+0x2f4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c86:	f7fb ff47 	bl	8000b18 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_ClockConfig+0x2f4>
      {
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e097      	b.n	8004dcc <HAL_RCC_ClockConfig+0x424>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9c:	4b4d      	ldr	r3, [pc, #308]	; (8004dd4 <HAL_RCC_ClockConfig+0x42c>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 020c 	and.w	r2, r3, #12
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d1eb      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cae:	4b4a      	ldr	r3, [pc, #296]	; (8004dd8 <HAL_RCC_ClockConfig+0x430>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d210      	bcs.n	8004cde <HAL_RCC_ClockConfig+0x336>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbc:	4b46      	ldr	r3, [pc, #280]	; (8004dd8 <HAL_RCC_ClockConfig+0x430>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 0207 	bic.w	r2, r3, #7
 8004cc4:	4944      	ldr	r1, [pc, #272]	; (8004dd8 <HAL_RCC_ClockConfig+0x430>)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ccc:	4b42      	ldr	r3, [pc, #264]	; (8004dd8 <HAL_RCC_ClockConfig+0x430>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d001      	beq.n	8004cde <HAL_RCC_ClockConfig+0x336>
    {
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e076      	b.n	8004dcc <HAL_RCC_ClockConfig+0x424>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d025      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x38e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d018      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x37c>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfa:	d013      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x37c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004d04:	d00e      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x37c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d0e:	d009      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x37c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d18:	d004      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x37c>
 8004d1a:	f240 311e 	movw	r1, #798	; 0x31e
 8004d1e:	482f      	ldr	r0, [pc, #188]	; (8004ddc <HAL_RCC_ClockConfig+0x434>)
 8004d20:	f7fb fd23 	bl	800076a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d24:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <HAL_RCC_ClockConfig+0x42c>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4928      	ldr	r1, [pc, #160]	; (8004dd4 <HAL_RCC_ClockConfig+0x42c>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d026      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x3e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d018      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x3d4>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d52:	d013      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x3d4>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004d5c:	d00e      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x3d4>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d66:	d009      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x3d4>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d70:	d004      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x3d4>
 8004d72:	f240 3125 	movw	r1, #805	; 0x325
 8004d76:	4819      	ldr	r0, [pc, #100]	; (8004ddc <HAL_RCC_ClockConfig+0x434>)
 8004d78:	f7fb fcf7 	bl	800076a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7c:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <HAL_RCC_ClockConfig+0x42c>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4912      	ldr	r1, [pc, #72]	; (8004dd4 <HAL_RCC_ClockConfig+0x42c>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004d90:	f000 f82c 	bl	8004dec <HAL_RCC_GetSysClockFreq>
 8004d94:	4601      	mov	r1, r0
 8004d96:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <HAL_RCC_ClockConfig+0x42c>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d9e:	22f0      	movs	r2, #240	; 0xf0
 8004da0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	fa92 f2a2 	rbit	r2, r2
 8004da8:	60fa      	str	r2, [r7, #12]
  return result;
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	fab2 f282 	clz	r2, r2
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	40d3      	lsrs	r3, r2
 8004db4:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <HAL_RCC_ClockConfig+0x438>)
 8004db6:	5cd3      	ldrb	r3, [r2, r3]
 8004db8:	fa21 f303 	lsr.w	r3, r1, r3
 8004dbc:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <HAL_RCC_ClockConfig+0x43c>)
 8004dbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <HAL_RCC_ClockConfig+0x440>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fb fe63 	bl	8000a90 <HAL_InitTick>
  
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3778      	adds	r7, #120	; 0x78
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40022000 	.word	0x40022000
 8004ddc:	08006040 	.word	0x08006040
 8004de0:	08006128 	.word	0x08006128
 8004de4:	20000000 	.word	0x20000000
 8004de8:	20000004 	.word	0x20000004

08004dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b08b      	sub	sp, #44	; 0x2c
 8004df0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	2300      	movs	r3, #0
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004e06:	4b29      	ldr	r3, [pc, #164]	; (8004eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d002      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0x30>
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d003      	beq.n	8004e22 <HAL_RCC_GetSysClockFreq+0x36>
 8004e1a:	e03c      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e1c:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e1e:	623b      	str	r3, [r7, #32]
      break;
 8004e20:	e03c      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004e28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004e2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	fa92 f2a2 	rbit	r2, r2
 8004e34:	607a      	str	r2, [r7, #4]
  return result;
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	fab2 f282 	clz	r2, r2
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	40d3      	lsrs	r3, r2
 8004e40:	4a1c      	ldr	r2, [pc, #112]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004e42:	5cd3      	ldrb	r3, [r2, r3]
 8004e44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	220f      	movs	r2, #15
 8004e50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	fa92 f2a2 	rbit	r2, r2
 8004e58:	60fa      	str	r2, [r7, #12]
  return result;
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	fab2 f282 	clz	r2, r2
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	40d3      	lsrs	r3, r2
 8004e64:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e66:	5cd3      	ldrb	r3, [r2, r3]
 8004e68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e74:	4a0e      	ldr	r2, [pc, #56]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	e004      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	4a0c      	ldr	r2, [pc, #48]	; (8004ebc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	623b      	str	r3, [r7, #32]
      break;
 8004e94:	e002      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e98:	623b      	str	r3, [r7, #32]
      break;
 8004e9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	372c      	adds	r7, #44	; 0x2c
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	007a1200 	.word	0x007a1200
 8004eb4:	08006140 	.word	0x08006140
 8004eb8:	08006150 	.word	0x08006150
 8004ebc:	003d0900 	.word	0x003d0900

08004ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec4:	4b03      	ldr	r3, [pc, #12]	; (8004ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000000 	.word	0x20000000

08004ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004ede:	f7ff ffef 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004ee2:	4601      	mov	r1, r0
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ef0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	fa92 f2a2 	rbit	r2, r2
 8004ef8:	603a      	str	r2, [r7, #0]
  return result;
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	fab2 f282 	clz	r2, r2
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	40d3      	lsrs	r3, r2
 8004f04:	4a04      	ldr	r2, [pc, #16]	; (8004f18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004f06:	5cd3      	ldrb	r3, [r2, r3]
 8004f08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000
 8004f18:	08006138 	.word	0x08006138

08004f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f22:	f7ff ffcd 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004f26:	4601      	mov	r1, r0
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004f30:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004f34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	fa92 f2a2 	rbit	r2, r2
 8004f3c:	603a      	str	r2, [r7, #0]
  return result;
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	fab2 f282 	clz	r2, r2
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	40d3      	lsrs	r3, r2
 8004f48:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004f4a:	5cd3      	ldrb	r3, [r2, r3]
 8004f4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	08006138 	.word	0x08006138

08004f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e0af      	b.n	80050d2 <HAL_TIM_Base_Init+0x172>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a59      	ldr	r2, [pc, #356]	; (80050dc <HAL_TIM_Base_Init+0x17c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d027      	beq.n	8004fcc <HAL_TIM_Base_Init+0x6c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f84:	d022      	beq.n	8004fcc <HAL_TIM_Base_Init+0x6c>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a55      	ldr	r2, [pc, #340]	; (80050e0 <HAL_TIM_Base_Init+0x180>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d01d      	beq.n	8004fcc <HAL_TIM_Base_Init+0x6c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a53      	ldr	r2, [pc, #332]	; (80050e4 <HAL_TIM_Base_Init+0x184>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d018      	beq.n	8004fcc <HAL_TIM_Base_Init+0x6c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a52      	ldr	r2, [pc, #328]	; (80050e8 <HAL_TIM_Base_Init+0x188>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d013      	beq.n	8004fcc <HAL_TIM_Base_Init+0x6c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a50      	ldr	r2, [pc, #320]	; (80050ec <HAL_TIM_Base_Init+0x18c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00e      	beq.n	8004fcc <HAL_TIM_Base_Init+0x6c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a4f      	ldr	r2, [pc, #316]	; (80050f0 <HAL_TIM_Base_Init+0x190>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d009      	beq.n	8004fcc <HAL_TIM_Base_Init+0x6c>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a4d      	ldr	r2, [pc, #308]	; (80050f4 <HAL_TIM_Base_Init+0x194>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <HAL_TIM_Base_Init+0x6c>
 8004fc2:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8004fc6:	484c      	ldr	r0, [pc, #304]	; (80050f8 <HAL_TIM_Base_Init+0x198>)
 8004fc8:	f7fb fbcf 	bl	800076a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d014      	beq.n	8004ffe <HAL_TIM_Base_Init+0x9e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d010      	beq.n	8004ffe <HAL_TIM_Base_Init+0x9e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d00c      	beq.n	8004ffe <HAL_TIM_Base_Init+0x9e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d008      	beq.n	8004ffe <HAL_TIM_Base_Init+0x9e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b60      	cmp	r3, #96	; 0x60
 8004ff2:	d004      	beq.n	8004ffe <HAL_TIM_Base_Init+0x9e>
 8004ff4:	f240 111b 	movw	r1, #283	; 0x11b
 8004ff8:	483f      	ldr	r0, [pc, #252]	; (80050f8 <HAL_TIM_Base_Init+0x198>)
 8004ffa:	f7fb fbb6 	bl	800076a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00e      	beq.n	8005024 <HAL_TIM_Base_Init+0xc4>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500e:	d009      	beq.n	8005024 <HAL_TIM_Base_Init+0xc4>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005018:	d004      	beq.n	8005024 <HAL_TIM_Base_Init+0xc4>
 800501a:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800501e:	4836      	ldr	r0, [pc, #216]	; (80050f8 <HAL_TIM_Base_Init+0x198>)
 8005020:	f7fb fba3 	bl	800076a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_TIM_Base_Init+0xde>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b80      	cmp	r3, #128	; 0x80
 8005032:	d004      	beq.n	800503e <HAL_TIM_Base_Init+0xde>
 8005034:	f240 111d 	movw	r1, #285	; 0x11d
 8005038:	482f      	ldr	r0, [pc, #188]	; (80050f8 <HAL_TIM_Base_Init+0x198>)
 800503a:	f7fb fb96 	bl	800076a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fb fc48 	bl	80008e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3304      	adds	r3, #4
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f000 f8ce 	bl	800520c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40001000 	.word	0x40001000
 80050e8:	40001400 	.word	0x40001400
 80050ec:	40014000 	.word	0x40014000
 80050f0:	40014400 	.word	0x40014400
 80050f4:	40014800 	.word	0x40014800
 80050f8:	08006078 	.word	0x08006078

080050fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a37      	ldr	r2, [pc, #220]	; (80051e8 <HAL_TIM_Base_Start+0xec>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d027      	beq.n	800515e <HAL_TIM_Base_Start+0x62>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005116:	d022      	beq.n	800515e <HAL_TIM_Base_Start+0x62>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a33      	ldr	r2, [pc, #204]	; (80051ec <HAL_TIM_Base_Start+0xf0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01d      	beq.n	800515e <HAL_TIM_Base_Start+0x62>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a32      	ldr	r2, [pc, #200]	; (80051f0 <HAL_TIM_Base_Start+0xf4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <HAL_TIM_Base_Start+0x62>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a30      	ldr	r2, [pc, #192]	; (80051f4 <HAL_TIM_Base_Start+0xf8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_TIM_Base_Start+0x62>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2f      	ldr	r2, [pc, #188]	; (80051f8 <HAL_TIM_Base_Start+0xfc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <HAL_TIM_Base_Start+0x62>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <HAL_TIM_Base_Start+0x100>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_TIM_Base_Start+0x62>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2c      	ldr	r2, [pc, #176]	; (8005200 <HAL_TIM_Base_Start+0x104>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_TIM_Base_Start+0x62>
 8005154:	f240 119b 	movw	r1, #411	; 0x19b
 8005158:	482a      	ldr	r0, [pc, #168]	; (8005204 <HAL_TIM_Base_Start+0x108>)
 800515a:	f7fb fb06 	bl	800076a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b01      	cmp	r3, #1
 8005168:	d001      	beq.n	800516e <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e038      	b.n	80051e0 <HAL_TIM_Base_Start+0xe4>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1b      	ldr	r2, [pc, #108]	; (80051e8 <HAL_TIM_Base_Start+0xec>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00e      	beq.n	800519e <HAL_TIM_Base_Start+0xa2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005188:	d009      	beq.n	800519e <HAL_TIM_Base_Start+0xa2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a17      	ldr	r2, [pc, #92]	; (80051ec <HAL_TIM_Base_Start+0xf0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d004      	beq.n	800519e <HAL_TIM_Base_Start+0xa2>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <HAL_TIM_Base_Start+0xfc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d115      	bne.n	80051ca <HAL_TIM_Base_Start+0xce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	4b18      	ldr	r3, [pc, #96]	; (8005208 <HAL_TIM_Base_Start+0x10c>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b06      	cmp	r3, #6
 80051ae:	d015      	beq.n	80051dc <HAL_TIM_Base_Start+0xe0>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b6:	d011      	beq.n	80051dc <HAL_TIM_Base_Start+0xe0>
    {
      __HAL_TIM_ENABLE(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c8:	e008      	b.n	80051dc <HAL_TIM_Base_Start+0xe0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	e000      	b.n	80051de <HAL_TIM_Base_Start+0xe2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40012c00 	.word	0x40012c00
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40001000 	.word	0x40001000
 80051f4:	40001400 	.word	0x40001400
 80051f8:	40014000 	.word	0x40014000
 80051fc:	40014400 	.word	0x40014400
 8005200:	40014800 	.word	0x40014800
 8005204:	08006078 	.word	0x08006078
 8005208:	00010007 	.word	0x00010007

0800520c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a32      	ldr	r2, [pc, #200]	; (80052e8 <TIM_Base_SetConfig+0xdc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_Base_SetConfig+0x28>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d003      	beq.n	8005234 <TIM_Base_SetConfig+0x28>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a2f      	ldr	r2, [pc, #188]	; (80052ec <TIM_Base_SetConfig+0xe0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d108      	bne.n	8005246 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <TIM_Base_SetConfig+0xdc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <TIM_Base_SetConfig+0x6a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005254:	d00f      	beq.n	8005276 <TIM_Base_SetConfig+0x6a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a24      	ldr	r2, [pc, #144]	; (80052ec <TIM_Base_SetConfig+0xe0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00b      	beq.n	8005276 <TIM_Base_SetConfig+0x6a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a23      	ldr	r2, [pc, #140]	; (80052f0 <TIM_Base_SetConfig+0xe4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <TIM_Base_SetConfig+0x6a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <TIM_Base_SetConfig+0xe8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_Base_SetConfig+0x6a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a21      	ldr	r2, [pc, #132]	; (80052f8 <TIM_Base_SetConfig+0xec>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d108      	bne.n	8005288 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a0e      	ldr	r2, [pc, #56]	; (80052e8 <TIM_Base_SetConfig+0xdc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00b      	beq.n	80052cc <TIM_Base_SetConfig+0xc0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a0e      	ldr	r2, [pc, #56]	; (80052f0 <TIM_Base_SetConfig+0xe4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <TIM_Base_SetConfig+0xc0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a0d      	ldr	r2, [pc, #52]	; (80052f4 <TIM_Base_SetConfig+0xe8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_Base_SetConfig+0xc0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <TIM_Base_SetConfig+0xec>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d103      	bne.n	80052d4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	615a      	str	r2, [r3, #20]
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800

080052fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a86      	ldr	r2, [pc, #536]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0x228>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d01d      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005318:	d018      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a82      	ldr	r2, [pc, #520]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0x22c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d013      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a80      	ldr	r2, [pc, #512]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0x230>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00e      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a7f      	ldr	r2, [pc, #508]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0x234>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d009      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a7d      	ldr	r2, [pc, #500]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005342:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8005346:	487c      	ldr	r0, [pc, #496]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0x23c>)
 8005348:	f7fb fa0f 	bl	800076a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d020      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b10      	cmp	r3, #16
 800535a:	d01c      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b20      	cmp	r3, #32
 8005362:	d018      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b30      	cmp	r3, #48	; 0x30
 800536a:	d014      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	d010      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b50      	cmp	r3, #80	; 0x50
 800537a:	d00c      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b60      	cmp	r3, #96	; 0x60
 8005382:	d008      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b70      	cmp	r3, #112	; 0x70
 800538a:	d004      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 800538c:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8005390:	4869      	ldr	r0, [pc, #420]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0x23c>)
 8005392:	f7fb f9ea 	bl	800076a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	2b80      	cmp	r3, #128	; 0x80
 800539c:	d008      	beq.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053a6:	f240 71b6 	movw	r1, #1974	; 0x7b6
 80053aa:	4863      	ldr	r0, [pc, #396]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0x23c>)
 80053ac:	f7fb f9dd 	bl	800076a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e0ad      	b.n	800551a <HAL_TIMEx_MasterConfigSynchronization+0x21e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a50      	ldr	r2, [pc, #320]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0x228>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d161      	bne.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d054      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053f8:	d04f      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005402:	d04a      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800540c:	d045      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005416:	d040      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005420:	d03b      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800542a:	d036      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005434:	d031      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800543e:	d02c      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005448:	d027      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8005452:	d022      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800545c:	d01d      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8005466:	d018      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005470:	d013      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800547a:	d00e      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8005484:	d009      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800548e:	d004      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
 8005490:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8005494:	4828      	ldr	r0, [pc, #160]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0x23c>)
 8005496:	f7fb f968 	bl	800076a <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a16      	ldr	r2, [pc, #88]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0x228>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00e      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x1f2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d8:	d009      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x1f2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a12      	ldr	r2, [pc, #72]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0x22c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d004      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x1f2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a12      	ldr	r2, [pc, #72]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d10c      	bne.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40000400 	.word	0x40000400
 800552c:	40001000 	.word	0x40001000
 8005530:	40001400 	.word	0x40001400
 8005534:	40014000 	.word	0x40014000
 8005538:	080060b0 	.word	0x080060b0

0800553c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e06d      	b.n	800562a <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d014      	beq.n	8005580 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a36      	ldr	r2, [pc, #216]	; (8005634 <HAL_UART_Init+0xf8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d023      	beq.n	80055a8 <HAL_UART_Init+0x6c>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a34      	ldr	r2, [pc, #208]	; (8005638 <HAL_UART_Init+0xfc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d01e      	beq.n	80055a8 <HAL_UART_Init+0x6c>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a33      	ldr	r2, [pc, #204]	; (800563c <HAL_UART_Init+0x100>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d019      	beq.n	80055a8 <HAL_UART_Init+0x6c>
 8005574:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005578:	4831      	ldr	r0, [pc, #196]	; (8005640 <HAL_UART_Init+0x104>)
 800557a:	f7fb f8f6 	bl	800076a <assert_failed>
 800557e:	e013      	b.n	80055a8 <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2b      	ldr	r2, [pc, #172]	; (8005634 <HAL_UART_Init+0xf8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00e      	beq.n	80055a8 <HAL_UART_Init+0x6c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <HAL_UART_Init+0xfc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d009      	beq.n	80055a8 <HAL_UART_Init+0x6c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a28      	ldr	r2, [pc, #160]	; (800563c <HAL_UART_Init+0x100>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d004      	beq.n	80055a8 <HAL_UART_Init+0x6c>
 800559e:	f240 1131 	movw	r1, #305	; 0x131
 80055a2:	4827      	ldr	r0, [pc, #156]	; (8005640 <HAL_UART_Init+0x104>)
 80055a4:	f7fb f8e1 	bl	800076a <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7fb f9e5 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2224      	movs	r2, #36	; 0x24
 80055c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f835 	bl	8005644 <UART_SetConfig>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e022      	b.n	800562a <HAL_UART_Init+0xee>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_UART_Init+0xb6>
  {
    UART_AdvFeatureConfig(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f9f1 	bl	80059d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005600:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005610:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fb16 	bl	8005c54 <UART_CheckIdleState>
 8005628:	4603      	mov	r3, r0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40013800 	.word	0x40013800
 8005638:	40004400 	.word	0x40004400
 800563c:	40004800 	.word	0x40004800
 8005640:	080060ec 	.word	0x080060ec

08005644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	4a91      	ldr	r2, [pc, #580]	; (800589c <UART_SetConfig+0x258>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d904      	bls.n	8005664 <UART_SetConfig+0x20>
 800565a:	f640 313f 	movw	r1, #2879	; 0xb3f
 800565e:	4890      	ldr	r0, [pc, #576]	; (80058a0 <UART_SetConfig+0x25c>)
 8005660:	f7fb f883 	bl	800076a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800566c:	d00d      	beq.n	800568a <UART_SetConfig+0x46>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <UART_SetConfig+0x46>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567e:	d004      	beq.n	800568a <UART_SetConfig+0x46>
 8005680:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8005684:	4886      	ldr	r0, [pc, #536]	; (80058a0 <UART_SetConfig+0x25c>)
 8005686:	f7fb f870 	bl	800076a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005692:	d012      	beq.n	80056ba <UART_SetConfig+0x76>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00e      	beq.n	80056ba <UART_SetConfig+0x76>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056a4:	d009      	beq.n	80056ba <UART_SetConfig+0x76>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ae:	d004      	beq.n	80056ba <UART_SetConfig+0x76>
 80056b0:	f640 3141 	movw	r1, #2881	; 0xb41
 80056b4:	487a      	ldr	r0, [pc, #488]	; (80058a0 <UART_SetConfig+0x25c>)
 80056b6:	f7fb f858 	bl	800076a <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <UART_SetConfig+0x92>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ca:	d004      	beq.n	80056d6 <UART_SetConfig+0x92>
 80056cc:	f640 3142 	movw	r1, #2882	; 0xb42
 80056d0:	4873      	ldr	r0, [pc, #460]	; (80058a0 <UART_SetConfig+0x25c>)
 80056d2:	f7fb f84a 	bl	800076a <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00e      	beq.n	80056fc <UART_SetConfig+0xb8>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e6:	d009      	beq.n	80056fc <UART_SetConfig+0xb8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80056f0:	d004      	beq.n	80056fc <UART_SetConfig+0xb8>
 80056f2:	f640 3144 	movw	r1, #2884	; 0xb44
 80056f6:	486a      	ldr	r0, [pc, #424]	; (80058a0 <UART_SetConfig+0x25c>)
 80056f8:	f7fb f837 	bl	800076a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f023 030c 	bic.w	r3, r3, #12
 8005704:	2b00      	cmp	r3, #0
 8005706:	d103      	bne.n	8005710 <UART_SetConfig+0xcc>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <UART_SetConfig+0xd6>
 8005710:	f640 3145 	movw	r1, #2885	; 0xb45
 8005714:	4862      	ldr	r0, [pc, #392]	; (80058a0 <UART_SetConfig+0x25c>)
 8005716:	f7fb f828 	bl	800076a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d013      	beq.n	800574a <UART_SetConfig+0x106>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572a:	d00e      	beq.n	800574a <UART_SetConfig+0x106>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005734:	d009      	beq.n	800574a <UART_SetConfig+0x106>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800573e:	d004      	beq.n	800574a <UART_SetConfig+0x106>
 8005740:	f640 3146 	movw	r1, #2886	; 0xb46
 8005744:	4856      	ldr	r0, [pc, #344]	; (80058a0 <UART_SetConfig+0x25c>)
 8005746:	f7fb f810 	bl	800076a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <UART_SetConfig+0x122>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575a:	d004      	beq.n	8005766 <UART_SetConfig+0x122>
 800575c:	f640 3147 	movw	r1, #2887	; 0xb47
 8005760:	484f      	ldr	r0, [pc, #316]	; (80058a0 <UART_SetConfig+0x25c>)
 8005762:	f7fb f802 	bl	800076a <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <UART_SetConfig+0x260>)
 8005786:	4013      	ands	r3, r2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	6979      	ldr	r1, [r7, #20]
 800578e:	430b      	orrs	r3, r1
 8005790:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a35      	ldr	r2, [pc, #212]	; (80058a8 <UART_SetConfig+0x264>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d11f      	bne.n	8005816 <UART_SetConfig+0x1d2>
 80057d6:	4b35      	ldr	r3, [pc, #212]	; (80058ac <UART_SetConfig+0x268>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d816      	bhi.n	8005810 <UART_SetConfig+0x1cc>
 80057e2:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <UART_SetConfig+0x1a4>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	080057f9 	.word	0x080057f9
 80057ec:	08005805 	.word	0x08005805
 80057f0:	0800580b 	.word	0x0800580b
 80057f4:	080057ff 	.word	0x080057ff
 80057f8:	2300      	movs	r3, #0
 80057fa:	77fb      	strb	r3, [r7, #31]
 80057fc:	e01d      	b.n	800583a <UART_SetConfig+0x1f6>
 80057fe:	2302      	movs	r3, #2
 8005800:	77fb      	strb	r3, [r7, #31]
 8005802:	e01a      	b.n	800583a <UART_SetConfig+0x1f6>
 8005804:	2304      	movs	r3, #4
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e017      	b.n	800583a <UART_SetConfig+0x1f6>
 800580a:	2308      	movs	r3, #8
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e014      	b.n	800583a <UART_SetConfig+0x1f6>
 8005810:	2310      	movs	r3, #16
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e011      	b.n	800583a <UART_SetConfig+0x1f6>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a25      	ldr	r2, [pc, #148]	; (80058b0 <UART_SetConfig+0x26c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d102      	bne.n	8005826 <UART_SetConfig+0x1e2>
 8005820:	2300      	movs	r3, #0
 8005822:	77fb      	strb	r3, [r7, #31]
 8005824:	e009      	b.n	800583a <UART_SetConfig+0x1f6>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a22      	ldr	r2, [pc, #136]	; (80058b4 <UART_SetConfig+0x270>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d102      	bne.n	8005836 <UART_SetConfig+0x1f2>
 8005830:	2300      	movs	r3, #0
 8005832:	77fb      	strb	r3, [r7, #31]
 8005834:	e001      	b.n	800583a <UART_SetConfig+0x1f6>
 8005836:	2310      	movs	r3, #16
 8005838:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005842:	d16c      	bne.n	800591e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8005844:	7ffb      	ldrb	r3, [r7, #31]
 8005846:	2b08      	cmp	r3, #8
 8005848:	d838      	bhi.n	80058bc <UART_SetConfig+0x278>
 800584a:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <UART_SetConfig+0x20c>)
 800584c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005850:	08005875 	.word	0x08005875
 8005854:	0800587d 	.word	0x0800587d
 8005858:	08005885 	.word	0x08005885
 800585c:	080058bd 	.word	0x080058bd
 8005860:	0800588b 	.word	0x0800588b
 8005864:	080058bd 	.word	0x080058bd
 8005868:	080058bd 	.word	0x080058bd
 800586c:	080058bd 	.word	0x080058bd
 8005870:	08005893 	.word	0x08005893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005874:	f7ff fb30 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 8005878:	61b8      	str	r0, [r7, #24]
        break;
 800587a:	e024      	b.n	80058c6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800587c:	f7ff fb4e 	bl	8004f1c <HAL_RCC_GetPCLK2Freq>
 8005880:	61b8      	str	r0, [r7, #24]
        break;
 8005882:	e020      	b.n	80058c6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <UART_SetConfig+0x274>)
 8005886:	61bb      	str	r3, [r7, #24]
        break;
 8005888:	e01d      	b.n	80058c6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800588a:	f7ff faaf 	bl	8004dec <HAL_RCC_GetSysClockFreq>
 800588e:	61b8      	str	r0, [r7, #24]
        break;
 8005890:	e019      	b.n	80058c6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005896:	61bb      	str	r3, [r7, #24]
        break;
 8005898:	e015      	b.n	80058c6 <UART_SetConfig+0x282>
 800589a:	bf00      	nop
 800589c:	00895440 	.word	0x00895440
 80058a0:	080060ec 	.word	0x080060ec
 80058a4:	efff69f3 	.word	0xefff69f3
 80058a8:	40013800 	.word	0x40013800
 80058ac:	40021000 	.word	0x40021000
 80058b0:	40004400 	.word	0x40004400
 80058b4:	40004800 	.word	0x40004800
 80058b8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	77bb      	strb	r3, [r7, #30]
        break;
 80058c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d075      	beq.n	80059b8 <UART_SetConfig+0x374>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	005a      	lsls	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	085b      	lsrs	r3, r3, #1
 80058d6:	441a      	add	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b0f      	cmp	r3, #15
 80058e8:	d916      	bls.n	8005918 <UART_SetConfig+0x2d4>
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f0:	d212      	bcs.n	8005918 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f023 030f 	bic.w	r3, r3, #15
 80058fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	085b      	lsrs	r3, r3, #1
 8005900:	b29b      	uxth	r3, r3
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	b29a      	uxth	r2, r3
 8005908:	89fb      	ldrh	r3, [r7, #14]
 800590a:	4313      	orrs	r3, r2
 800590c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	89fa      	ldrh	r2, [r7, #14]
 8005914:	60da      	str	r2, [r3, #12]
 8005916:	e04f      	b.n	80059b8 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	77bb      	strb	r3, [r7, #30]
 800591c:	e04c      	b.n	80059b8 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    switch (clocksource)
 800591e:	7ffb      	ldrb	r3, [r7, #31]
 8005920:	2b08      	cmp	r3, #8
 8005922:	d828      	bhi.n	8005976 <UART_SetConfig+0x332>
 8005924:	a201      	add	r2, pc, #4	; (adr r2, 800592c <UART_SetConfig+0x2e8>)
 8005926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592a:	bf00      	nop
 800592c:	08005951 	.word	0x08005951
 8005930:	08005959 	.word	0x08005959
 8005934:	08005961 	.word	0x08005961
 8005938:	08005977 	.word	0x08005977
 800593c:	08005967 	.word	0x08005967
 8005940:	08005977 	.word	0x08005977
 8005944:	08005977 	.word	0x08005977
 8005948:	08005977 	.word	0x08005977
 800594c:	0800596f 	.word	0x0800596f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005950:	f7ff fac2 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 8005954:	61b8      	str	r0, [r7, #24]
        break;
 8005956:	e013      	b.n	8005980 <UART_SetConfig+0x33c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005958:	f7ff fae0 	bl	8004f1c <HAL_RCC_GetPCLK2Freq>
 800595c:	61b8      	str	r0, [r7, #24]
        break;
 800595e:	e00f      	b.n	8005980 <UART_SetConfig+0x33c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005960:	4b1b      	ldr	r3, [pc, #108]	; (80059d0 <UART_SetConfig+0x38c>)
 8005962:	61bb      	str	r3, [r7, #24]
        break;
 8005964:	e00c      	b.n	8005980 <UART_SetConfig+0x33c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005966:	f7ff fa41 	bl	8004dec <HAL_RCC_GetSysClockFreq>
 800596a:	61b8      	str	r0, [r7, #24]
        break;
 800596c:	e008      	b.n	8005980 <UART_SetConfig+0x33c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005972:	61bb      	str	r3, [r7, #24]
        break;
 8005974:	e004      	b.n	8005980 <UART_SetConfig+0x33c>
      default:
        pclk = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	77bb      	strb	r3, [r7, #30]
        break;
 800597e:	bf00      	nop
    }

    if (pclk != 0U)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d018      	beq.n	80059b8 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	085a      	lsrs	r2, r3, #1
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	441a      	add	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	fbb2 f3f3 	udiv	r3, r2, r3
 8005998:	b29b      	uxth	r3, r3
 800599a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b0f      	cmp	r3, #15
 80059a0:	d908      	bls.n	80059b4 <UART_SetConfig+0x370>
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a8:	d204      	bcs.n	80059b4 <UART_SetConfig+0x370>
      {
        huart->Instance->BRR = usartdiv;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	e001      	b.n	80059b8 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80059c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	007a1200 	.word	0x007a1200

080059d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	2bff      	cmp	r3, #255	; 0xff
 80059e2:	d904      	bls.n	80059ee <UART_AdvFeatureConfig+0x1a>
 80059e4:	f640 31c8 	movw	r1, #3016	; 0xbc8
 80059e8:	4896      	ldr	r0, [pc, #600]	; (8005c44 <UART_AdvFeatureConfig+0x270>)
 80059ea:	f7fa febe 	bl	800076a <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d018      	beq.n	8005a2c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <UART_AdvFeatureConfig+0x42>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a0a:	d004      	beq.n	8005a16 <UART_AdvFeatureConfig+0x42>
 8005a0c:	f640 31cd 	movw	r1, #3021	; 0xbcd
 8005a10:	488c      	ldr	r0, [pc, #560]	; (8005c44 <UART_AdvFeatureConfig+0x270>)
 8005a12:	f7fa feaa 	bl	800076a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d018      	beq.n	8005a6a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d009      	beq.n	8005a54 <UART_AdvFeatureConfig+0x80>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a48:	d004      	beq.n	8005a54 <UART_AdvFeatureConfig+0x80>
 8005a4a:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8005a4e:	487d      	ldr	r0, [pc, #500]	; (8005c44 <UART_AdvFeatureConfig+0x270>)
 8005a50:	f7fa fe8b 	bl	800076a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d018      	beq.n	8005aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <UART_AdvFeatureConfig+0xbe>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a86:	d004      	beq.n	8005a92 <UART_AdvFeatureConfig+0xbe>
 8005a88:	f640 31db 	movw	r1, #3035	; 0xbdb
 8005a8c:	486d      	ldr	r0, [pc, #436]	; (8005c44 <UART_AdvFeatureConfig+0x270>)
 8005a8e:	f7fa fe6c 	bl	800076a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d018      	beq.n	8005ae6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d009      	beq.n	8005ad0 <UART_AdvFeatureConfig+0xfc>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac4:	d004      	beq.n	8005ad0 <UART_AdvFeatureConfig+0xfc>
 8005ac6:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8005aca:	485e      	ldr	r0, [pc, #376]	; (8005c44 <UART_AdvFeatureConfig+0x270>)
 8005acc:	f7fa fe4d 	bl	800076a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d018      	beq.n	8005b24 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <UART_AdvFeatureConfig+0x13a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b02:	d004      	beq.n	8005b0e <UART_AdvFeatureConfig+0x13a>
 8005b04:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8005b08:	484e      	ldr	r0, [pc, #312]	; (8005c44 <UART_AdvFeatureConfig+0x270>)
 8005b0a:	f7fa fe2e 	bl	800076a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d018      	beq.n	8005b62 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <UART_AdvFeatureConfig+0x178>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b40:	d004      	beq.n	8005b4c <UART_AdvFeatureConfig+0x178>
 8005b42:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 8005b46:	483f      	ldr	r0, [pc, #252]	; (8005c44 <UART_AdvFeatureConfig+0x270>)
 8005b48:	f7fa fe0f 	bl	800076a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d04a      	beq.n	8005c04 <UART_AdvFeatureConfig+0x230>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a35      	ldr	r2, [pc, #212]	; (8005c48 <UART_AdvFeatureConfig+0x274>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <UART_AdvFeatureConfig+0x1ae>
 8005b78:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8005b7c:	4831      	ldr	r0, [pc, #196]	; (8005c44 <UART_AdvFeatureConfig+0x270>)
 8005b7e:	f7fa fdf4 	bl	800076a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <UART_AdvFeatureConfig+0x1ca>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b92:	d004      	beq.n	8005b9e <UART_AdvFeatureConfig+0x1ca>
 8005b94:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8005b98:	482a      	ldr	r0, [pc, #168]	; (8005c44 <UART_AdvFeatureConfig+0x270>)
 8005b9a:	f7fa fde6 	bl	800076a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bbc:	d122      	bne.n	8005c04 <UART_AdvFeatureConfig+0x230>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d013      	beq.n	8005bee <UART_AdvFeatureConfig+0x21a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bce:	d00e      	beq.n	8005bee <UART_AdvFeatureConfig+0x21a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bd8:	d009      	beq.n	8005bee <UART_AdvFeatureConfig+0x21a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005be2:	d004      	beq.n	8005bee <UART_AdvFeatureConfig+0x21a>
 8005be4:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8005be8:	4816      	ldr	r0, [pc, #88]	; (8005c44 <UART_AdvFeatureConfig+0x270>)
 8005bea:	f7fa fdbe 	bl	800076a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01d      	beq.n	8005c4c <UART_AdvFeatureConfig+0x278>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <UART_AdvFeatureConfig+0x258>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c20:	d004      	beq.n	8005c2c <UART_AdvFeatureConfig+0x258>
 8005c22:	f640 4105 	movw	r1, #3077	; 0xc05
 8005c26:	4807      	ldr	r0, [pc, #28]	; (8005c44 <UART_AdvFeatureConfig+0x270>)
 8005c28:	f7fa fd9f 	bl	800076a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	e003      	b.n	8005c4c <UART_AdvFeatureConfig+0x278>
 8005c44:	080060ec 	.word	0x080060ec
 8005c48:	40013800 	.word	0x40013800
  }
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c64:	f7fa ff58 	bl	8000b18 <HAL_GetTick>
 8005c68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d10e      	bne.n	8005c96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f82d 	bl	8005ce6 <UART_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e023      	b.n	8005cde <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d10e      	bne.n	8005cc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f817 	bl	8005ce6 <UART_WaitOnFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e00d      	b.n	8005cde <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b09c      	sub	sp, #112	; 0x70
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	603b      	str	r3, [r7, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf6:	e0a5      	b.n	8005e44 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfe:	f000 80a1 	beq.w	8005e44 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d02:	f7fa ff09 	bl	8000b18 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d302      	bcc.n	8005d18 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d13e      	bne.n	8005d96 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d2c:	667b      	str	r3, [r7, #100]	; 0x64
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e6      	bne.n	8005d18 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	663b      	str	r3, [r7, #96]	; 0x60
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3308      	adds	r3, #8
 8005d68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e5      	bne.n	8005d4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2220      	movs	r2, #32
 8005d82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e067      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d04f      	beq.n	8005e44 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db2:	d147      	bne.n	8005e44 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dbc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e6      	bne.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3308      	adds	r3, #8
 8005df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f023 0301 	bic.w	r3, r3, #1
 8005e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e10:	623a      	str	r2, [r7, #32]
 8005e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	69f9      	ldr	r1, [r7, #28]
 8005e16:	6a3a      	ldr	r2, [r7, #32]
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e5      	bne.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e010      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69da      	ldr	r2, [r3, #28]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	bf0c      	ite	eq
 8005e54:	2301      	moveq	r3, #1
 8005e56:	2300      	movne	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	f43f af4a 	beq.w	8005cf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3770      	adds	r7, #112	; 0x70
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <__libc_init_array>:
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	4d0d      	ldr	r5, [pc, #52]	; (8005ea8 <__libc_init_array+0x38>)
 8005e74:	4c0d      	ldr	r4, [pc, #52]	; (8005eac <__libc_init_array+0x3c>)
 8005e76:	1b64      	subs	r4, r4, r5
 8005e78:	10a4      	asrs	r4, r4, #2
 8005e7a:	2600      	movs	r6, #0
 8005e7c:	42a6      	cmp	r6, r4
 8005e7e:	d109      	bne.n	8005e94 <__libc_init_array+0x24>
 8005e80:	4d0b      	ldr	r5, [pc, #44]	; (8005eb0 <__libc_init_array+0x40>)
 8005e82:	4c0c      	ldr	r4, [pc, #48]	; (8005eb4 <__libc_init_array+0x44>)
 8005e84:	f000 f820 	bl	8005ec8 <_init>
 8005e88:	1b64      	subs	r4, r4, r5
 8005e8a:	10a4      	asrs	r4, r4, #2
 8005e8c:	2600      	movs	r6, #0
 8005e8e:	42a6      	cmp	r6, r4
 8005e90:	d105      	bne.n	8005e9e <__libc_init_array+0x2e>
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e98:	4798      	blx	r3
 8005e9a:	3601      	adds	r6, #1
 8005e9c:	e7ee      	b.n	8005e7c <__libc_init_array+0xc>
 8005e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea2:	4798      	blx	r3
 8005ea4:	3601      	adds	r6, #1
 8005ea6:	e7f2      	b.n	8005e8e <__libc_init_array+0x1e>
 8005ea8:	08006160 	.word	0x08006160
 8005eac:	08006160 	.word	0x08006160
 8005eb0:	08006160 	.word	0x08006160
 8005eb4:	08006164 	.word	0x08006164

08005eb8 <memset>:
 8005eb8:	4402      	add	r2, r0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d100      	bne.n	8005ec2 <memset+0xa>
 8005ec0:	4770      	bx	lr
 8005ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ec6:	e7f9      	b.n	8005ebc <memset+0x4>

08005ec8 <_init>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	bf00      	nop
 8005ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ece:	bc08      	pop	{r3}
 8005ed0:	469e      	mov	lr, r3
 8005ed2:	4770      	bx	lr

08005ed4 <_fini>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	bf00      	nop
 8005ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eda:	bc08      	pop	{r3}
 8005edc:	469e      	mov	lr, r3
 8005ede:	4770      	bx	lr
